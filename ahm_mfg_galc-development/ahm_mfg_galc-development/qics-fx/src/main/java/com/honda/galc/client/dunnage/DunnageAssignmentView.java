package com.honda.galc.client.dunnage;
import org.apache.commons.lang.StringUtils;
import org.tbee.javafx.scene.layout.MigPane;

import com.honda.galc.client.product.mvc.ViewId;
import com.honda.galc.client.qi.base.AbstractQiProcessView;
import com.honda.galc.client.ui.MainWindow;
import com.honda.galc.client.ui.component.ColumnMappingList;
import com.honda.galc.client.ui.component.Fonts;
import com.honda.galc.client.ui.component.LoggedButton;
import com.honda.galc.client.ui.component.LoggedTableColumn;
import com.honda.galc.client.ui.component.ObjectTablePane;
import com.honda.galc.client.ui.component.TextFieldState;
import com.honda.galc.client.ui.component.UpperCaseFieldBean;
import com.honda.galc.client.utils.QiCommonUtil;
import com.honda.galc.client.utils.QiConstant;
import com.honda.galc.client.utils.UiFactory;
import com.honda.galc.data.ProductType;
import com.honda.galc.entity.product.BaseProduct;
import com.honda.galc.entity.product.DieCast;
import com.honda.galc.entity.product.MbpnProduct;
import com.honda.galc.service.utils.ProductTypeUtil;

import javafx.geometry.Pos;
import javafx.geometry.Rectangle2D;
import javafx.scene.input.KeyEvent;
import javafx.stage.Screen;
/**
 * 
 * <h3>DunnageAssignmentView Class description</h3>
 * <p> DunnageAssignmentView description </p>
 * 
 * <h4>Change History</h4>
 * <Table border="1" Cellpadding="3" Cellspacing="0" width="100%">
 * <TR bgcolor="#EEEEFF" Class="TableSubHeadingColor">
 * <TH>Update by</TH>
 * <TH>Update date</TH>
 * <TH>Version</TH>
 * <TH>Mark of Update</TH>
 * <TH>Reason</TH>
 * </TR>
 *
 * </TABLE>
 *   
 * @author L&T Infotech<br>
 * May 14, 2017
 *
 */
public class DunnageAssignmentView extends AbstractQiProcessView<DunnageAssignmentModel, DunnageAssignmentController> {

	private LoggedButton newDunnageButton;
	private LoggedButton changeDunnageButton;
	private LoggedButton printButton;
	private UpperCaseFieldBean dunnageNumberTextField;
	private ObjectTablePane<BaseProduct> dunnageeTablePane;

	public DunnageAssignmentView( MainWindow window) {
		super(ViewId.DUNNAGE,window);
	}


	@Override
	public void reload() {
		clearErrorMessage();
		String dunnageNumber= StringUtils.trimToEmpty(getDunnageNumberTextField().getText());
		String validDunnage = StringUtils.trimToEmpty(getController().validateDunnageField(getDunnageNumberTextField()));
		if(dunnageNumber.isEmpty()|| !validDunnage.isEmpty()){
			getDunnageNumberTextField().setText(getController().selectLastDunnageNumber());
		}
		if(null!=getDunnageNumberTextField().getText())
			getDunnageeTablePane().setData(getModel().findAllDunnageProducts(getDunnageNumberTextField().getText()));
		getController().setButtonState();
	}

	@Override
	public void start() {
	}

	@SuppressWarnings("unchecked")
	@Override
	public void initView() {
		Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
		double width = primaryScreenBounds.getWidth()*0.8;
		double height = primaryScreenBounds.getHeight();
		getMainWindow().getStylesheets().add(QiConstant.CSS_PATH);
		MigPane migPane = new MigPane("",
				"10[]10[]",//column
				"10[]10"
				);
		if(null!= getProductType()){
			dunnageeTablePane = (ObjectTablePane<BaseProduct>) createDunnageTablePane(getProductType(),width,height);
			LoggedTableColumn<BaseProduct, Integer> column = new LoggedTableColumn<BaseProduct, Integer>();		
			createSerialNumber(column);
			setRepairMethodTablePane(column);
			migPane.add(dunnageeTablePane);
			migPane.add(createOrUpdateDunnagePanel(width,height),"top");
		}
		this.setCenter(migPane);
	}

	private void setRepairMethodTablePane(LoggedTableColumn<BaseProduct, Integer> column) {
		dunnageeTablePane.getTable().getColumns().add(0, column);
		dunnageeTablePane.getTable().getColumns().get(0).setText("#");
		dunnageeTablePane.getTable().getColumns().get(0).setResizable(true);
		dunnageeTablePane.getTable().getColumns().get(0).setMaxWidth(45);
	}


	private MigPane createOrUpdateDunnagePanel(double width,double height) {
		MigPane dataGrouping = new MigPane(StringUtils.EMPTY,
				"[]",//column
				"[]15[]15[]"
				);
		newDunnageButton  = createBtn("New Dunnage", getController());
		newDunnageButton.getStyleClass().add("dunnage-btn");
		if(!getModel().getDunnagePropertyBean().isDunnageNumberAutoGenerated())
			newDunnageButton.setDisable(true);
		changeDunnageButton =  createBtn("Change Dunnage", getController());
		changeDunnageButton.getStyleClass().add("dunnage-btn");
		printButton =  createBtn("Print", getController());
		getPrintButton().setDisable(true);
		dunnageNumberTextField = createFilterTextField("dunnageNumberTextField",(int) (width*0.25),StringUtils.EMPTY);
		dunnageNumberTextField.setPrefHeight(height*0.05);
		dunnageNumberTextField.addEventFilter(KeyEvent.KEY_TYPED, QiCommonUtil.restrictLengthOfTextFields(getModel().getDunnagePropertyBean().getDunnageNumberLength()));
		dataGrouping.add(newDunnageButton,"wrap");
		dataGrouping.add(changeDunnageButton,"wrap");
		dataGrouping.add(dunnageNumberTextField,"wrap");
		dataGrouping.add(printButton);
		return dataGrouping;
	}


	private UpperCaseFieldBean createFilterTextField(String id, int width, String promptText) {
		UpperCaseFieldBean dunnageNumberTextField= (UpperCaseFieldBean) UiFactory.createTextField(id, width, Fonts.SS_DIALOG_PLAIN(20), TextFieldState.EDIT, Pos.BASELINE_LEFT, true);
		dunnageNumberTextField.setMaxWidth(width);
		dunnageNumberTextField.setPromptText(promptText);
		dunnageNumberTextField.setOnAction(getController());
		return dunnageNumberTextField;
	}


	private ObjectTablePane<? extends BaseProduct> createDunnageTablePane(ProductType productType, double width,double height){
		if(ProductTypeUtil.isInstanceOf(productType, MbpnProduct.class)){
			ColumnMappingList mbpnColumnMappings = 
					ColumnMappingList.with("Product Id","productId").put("Spec Code", "currentProductSpecCode").put("Order No", "currentOrderNo");

			Double[] columnWidth = new Double[] {0.25, 0.25, 0.22}; 
			ObjectTablePane<BaseProduct> dunnagePanel = createDunnagePanel(width, mbpnColumnMappings, columnWidth,height);
			return dunnagePanel;
		}
		else if(ProductTypeUtil.isInstanceOf(productType, DieCast.class)){

			ColumnMappingList dieCastColumnMappings = 
					ColumnMappingList.with("Die Cast Number", "dcSerialNumber").put("Machining Number", "mcSerialNumber").put("Model", "modelCode");
			Double[] columnWidth = new Double[] {0.25, 0.25, 0.22}; 
			ObjectTablePane<BaseProduct> dunnagePanel = createDunnagePanel(width, dieCastColumnMappings, columnWidth,height);
			return dunnagePanel;
		}
		else{
			ColumnMappingList dftColumnMappings = ColumnMappingList.with("Product Id", "productId").put("Produc Spec", "productSpecCode");
			Double[] columnWidth = new Double[] {
					0.40, 0.40
			}; 
			ObjectTablePane<BaseProduct> dunnagePanel = createDunnagePanel(width, dftColumnMappings, columnWidth,height);
			return dunnagePanel;
		}
	}


	/**
	 * @param width
	 * @param mbpnColumnMappings
	 * @param columnWidth
	 * @return
	 */
	private ObjectTablePane<BaseProduct> createDunnagePanel(double width, ColumnMappingList mbpnColumnMappings,
			Double[] columnWidth,double height ) {
		ObjectTablePane<BaseProduct> dunnagePanel = new ObjectTablePane<BaseProduct>(mbpnColumnMappings,columnWidth);
		dunnagePanel.setPrefSize(width, height*0.64);
		dunnagePanel.setConstrainedResize(false);
		return dunnagePanel;
	}

	public ObjectTablePane<BaseProduct> getDunnageeTablePane() {
		return dunnageeTablePane;
	}

	public void setDunnageeTablePane(ObjectTablePane<BaseProduct> dunnageeTablePane) {
		this.dunnageeTablePane = dunnageeTablePane;
	}

	public UpperCaseFieldBean getDunnageNumberTextField() {
		return dunnageNumberTextField;
	}

	public void setDunnageNumberTextField(UpperCaseFieldBean dunnageNumberTextField) {
		this.dunnageNumberTextField = dunnageNumberTextField;
	}


	public LoggedButton getNewDunnageButton() {
		return newDunnageButton;
	}

	public void setNewDunnageButton(LoggedButton newDunnageButton) {
		this.newDunnageButton = newDunnageButton;
	}

	public LoggedButton getChangeDunnageButton() {
		return changeDunnageButton;
	}

	public void setChangeDunnageButton(LoggedButton changeDunnageButton) {
		this.changeDunnageButton = changeDunnageButton;
	}
	private ProductType getProductType(){
		return getMainWindow().getApplicationContext().getProductTypeData().getProductType();
	}
	
	public LoggedButton getPrintButton() {
		return printButton;
	}

	public void setPrintButton(LoggedButton printButton) {
		this.printButton = printButton;
	}
}
