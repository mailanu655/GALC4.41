package com.honda.galc.client.qics.view.screen;

import java.awt.Color;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Date;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.List;

import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;

import org.apache.commons.lang.StringUtils;

import com.honda.galc.client.dunnage.DunnageTablePaneFactory;
import com.honda.galc.client.dunnage.DunnageUtils;
import com.honda.galc.client.product.command.ChainCommand;
import com.honda.galc.client.product.command.Command;
import com.honda.galc.client.product.controller.listener.InputNumberChangeListener;
import com.honda.galc.client.product.validator.PassedDateValidator;
import com.honda.galc.client.product.validator.StringTokenValidator;
import com.honda.galc.client.product.validator.StringValidator;
import com.honda.galc.client.qics.view.action.AbstractPanelAction;
import com.honda.galc.client.qics.view.action.RemoveDunnageAction;
import com.honda.galc.client.qics.view.constants.ActionId;
import com.honda.galc.client.qics.view.constants.QicsViewId;
import com.honda.galc.client.qics.view.frame.QicsFrame;
import com.honda.galc.client.ui.MessageDialog;
import com.honda.galc.client.ui.component.Fonts;
import com.honda.galc.client.ui.component.ObjectTablePane;
import com.honda.galc.client.ui.component.TextFieldState;
import com.honda.galc.client.ui.component.UpperCaseDocument;
import com.honda.galc.entity.product.BaseProduct;
import com.honda.galc.entity.product.DieCast;
import com.honda.galc.util.BeanUtils;
import com.honda.galc.util.ProductSpecUtil;
import com.honda.galc.util.PropertyComparator;

/**
 * <h3>Class description</h3> <h4>Description</h4>
 * <p>
 * <code>DunnagePanel</code> is ...
 * </p>
 * <h4>Usage and Example</h4> <h4>Special Notes</h4>
 * 
 * <h4>Change History</h4>
 * <Table border="1" Cellpadding="3" Cellspacing="0" width="100%">
 * <TR bgcolor="#EEEEFF" Class="TableSubHeadingColor">
 * <TH>Update by</TH>
 * <TH>Update date</TH>
 * <TH>Version</TH>
 * <TH>Mark of Update</TH>
 * <TH>Reason</TH>
 * </TR>
 * <TR>
 * <TD>Karol Wozniak</TD>
 * <TD>Apr 7, 2009</TD>
 * <TD>0.1</TD>
 * <TD>(none)</TD>
 * <TD>Initial Realse</TD>
 * </TR>
 * </TABLE>
 * 
 * @see
 * @ver 0.1
 * @author Karol Wozniak
 */
public class DunnagePanel extends QicsPanel {

	private static final long serialVersionUID = 1L;

	private JButton newDunnageButton;
	private JButton changeDunnageButton;
	private JButton printDunnageButton;
	private JTextField dunnageNumberTextField;

	private ObjectTablePane<BaseProduct> productPane;
	private JPopupMenu productTablePopupMenu;
	
	public DunnagePanel(QicsFrame frame) {
		super(frame);
		initialize();
	}

	@Override
	public QicsViewId getQicsViewId() {
		return QicsViewId.DUNNAGE;
	}

	// === construction === //
	protected void initialize() {
		// setLayout(new GridLayout(1, 1));
		setLayout(null);
		setSize(getTabPaneWidth(), getTabPaneHeight());
		productPane = createProductPane();

		dunnageNumberTextField = createDunnageNumberTextField();
		changeDunnageButton = createChangeDunnageButton();
		newDunnageButton = createNewDunnageButton();
		printDunnageButton = createPrintDunnageButton();

		productTablePopupMenu = createProductTablePopupMenu();

		add(getProductPane());

		JPanel panel = new JPanel();
		if (getQicsPropertyBean().isDunnageNumberAutoGenerated()) {
			panel.add(getNewDunnageButton());
		}
		panel.add(getChangeDunnageButton());
		panel.add(getDunnageNumberTextField());

		panel.setLayout(new GridLayout(panel.getComponentCount(), 1, 0, 2));
		panel.setLocation(getProductPane().getX() + getProductPane().getWidth(), getProductPane().getY());
		panel.setSize(getWidth() - getProductPane().getWidth() - 5, panel.getComponentCount() * 50);

		getPrintDunnageButton().setSize(panel.getWidth(), 50);
		getPrintDunnageButton().setLocation(panel.getX(), getProductPane().getY() + getProductPane().getHeight() - getPrintDunnageButton().getHeight());

		add(panel);
		add(getPrintDunnageButton());

		mapActions();
		mapEventHandlers();
		mapValidators();
	}

	// === controlling api === //
	@Override
	public void startPanel() {

		if (getQicsController().isRefreshProductCheckResults()) {
			getQicsController().submitItemCheckProductState();
			getQicsController().submitWarnCheckProductState();
			// if (getQicsController().isErrorMsgExists()) {
			// getQicsFrame().setErrorMessage(getQicsController().getErrorMessageId());
			// return;
			// }
		}

		if (!getQicsController().getProductItemCheckResults().isEmpty() && !getQicsController().getProductWarnCheckResults().isEmpty()) {
			getQicsFrame().getMainPanel().displayCheckResultsPanel();
			return;
		}

		if (StringUtils.isBlank(getClientModel().getDunnageNumber())) {
			if (getQicsPropertyBean().isDunnageNumberAutoGenerated()) {
				String lastDunnageNumber = getQicsController().selectLastDunnageNumber();
				getClientModel().setDunnageNumber(lastDunnageNumber);
			}
		}
		
		if(StringUtils.isNotBlank(getClientModel().getDunnageNumber())){		
			getDunnageNumberTextField().setText(getClientModel().getDunnageNumber());
		}
		
		loadDunnageProducts(getClientModel().getDunnageNumber());
		
		getQicsController().doDunnageUpdate(true);		
		BaseProduct product = getQicsController().getProductModel().getProduct();
		if(StringUtils.isNotBlank(product.getDunnage()) && !product.getDunnage().equalsIgnoreCase(getClientModel().getDunnageNumber())){
			String msg = String.format("%s is already assigned to a different Dunnage: %s. Do you want to modify it?", product, product.getDunnage());
			boolean doModifyProductDunnage = MessageDialog.confirm(getQicsFrame(), msg);
			if (!doModifyProductDunnage) {
				getQicsController().doDunnageUpdate(false);
				//finish process
				getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton().doClick();
				return;
			}	
		}			

		setButtonsState();
		getQicsController().setRefreshProductCheckResults(true);
	}	
	
	@Override
	public void setButtonsState() {
		super.setButtonsState();
		getQicsFrame().getMainPanel().setButtonsState();

		boolean fromAction = getClientProperty("FROM_ACTION") != null;
		putClientProperty("FROM_ACTION", null);
		
		String dunnageNumber = getClientModel().getDunnageNumber();
		if (isEmpty(dunnageNumber)) {
			getChangeDunnageButton().setEnabled(false);
			TextFieldState.EDIT.setState(getDunnageNumberTextField());
			getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton().setEnabled(false);
			setFocus(getDunnageNumberTextField());
		} else {
			getChangeDunnageButton().setEnabled(true);
			TextFieldState.READ_ONLY.setState(getDunnageNumberTextField());

			if (isProductAlreadyOnPallet()) {
				getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton().setEnabled(true);
				getQicsFrame().setMessage("Part already associated to Dunnage");
				setFocus(getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton());
			} else {
				if (getProductPane().getTable().getRowCount() >= getQicsController().getDunnageCartQuantity()) {
					getQicsFrame().setMessage("Dunnage Pallet is completed.");
					if (fromAction) {
						getQicsController().playWarnSound();
					}
					getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton().setEnabled(false);
					if (getQicsPropertyBean().isDunnageNumberAutoGenerated()) {
						setFocus(getNewDunnageButton());
					} else {
						setFocus(getChangeDunnageButton());
					}
				} else {
					List<BaseProduct> list = getProductPane().getItems();
					BaseProduct product = getQicsController().getProductModel().getProduct();
					// Decision to make dunnage groups by model code or by both model code and model type code.
					if (getQicsPropertyBean().isDunnageGroupedByModelType()) {
						if (!validateModelAndTypeCode(product, list)) {
							String msg = String.format("product: %s model code: %s and model type code: %s do not match Dunnage model/model type.", product.getProductId(), product.getModelCode(), ProductSpecUtil.extractModelTypeCode(product.getProductSpecCode()));
							setErrorMessage(msg);
							if (fromAction) {
								getQicsController().playNgSound();
							}
							getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton().setEnabled(false);
							setFocus(getChangeDunnageButton());
							return;
						} else {
							getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton().setEnabled(true);
							setFocus(getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton());	
						}
					}else{
						if (!validateModelCode(product.getModelCode(), list)) {
							String msg = String.format("product: %s model code: %s does not match Dunnage model.", product.getProductId(), product.getModelCode());
							setErrorMessage(msg);
							if (fromAction) {
								getQicsController().playNgSound();
							}
							getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton().setEnabled(false);
							setFocus(getChangeDunnageButton());
							return;
						} else {
							getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton().setEnabled(true);
							setFocus(getQicsFrame().getMainPanel().getSubmitButtonsPanel().getSubmitButton());	
						}
						
					}
				}
			}
		}
		getPrintDunnageButton().setEnabled(getQicsController().getClientModel().isPrintDunnage());
	}

	// === data api === //
	public void loadDunnageProducts(String dunnageNumber) {
		if (isEmpty(dunnageNumber)) {
			getProductPane().removeData();
			return;
		} else {
			List<BaseProduct> list = getQicsController().selectDunnageProducts(dunnageNumber);
			getProductPane().removeData();
			if (list != null && !list.isEmpty()) {
				Collections.sort(list, new PropertyComparator<BaseProduct>(BaseProduct.class, "updateTimestamp"));
				Collections.reverse(list);
			}

			getProductPane().reloadData(list);
			getProductPane().getTable().scrollRectToVisible(getProductPane().getTable().getCellRect(getProductPane().getTable().getRowCount()-1, 0, true));
			return;
		}
	}

	private boolean validateModelCode(String modelCode, List<BaseProduct> list) {
		for (BaseProduct aproduct : list)
			if (modelCode == null || !modelCode.equals(aproduct.getModelCode())) {
				return false;
			}
		return true;
	}
	
	private boolean validateModelAndTypeCode(BaseProduct product, List<BaseProduct> list){
		for(BaseProduct ps : list){
			if(product == null) return false;
			if((ProductSpecUtil.extractModelTypeCode(product.getProductSpecCode()) ==null || ProductSpecUtil.extractModelTypeCode(product.getProductSpecCode()).equals("*"))){
				if(!product.getModelCode().equals(ps.getModelCode()))return false;
			}
			else{
				if (!(product.getModelCode().equals(ps.getModelCode()) && ProductSpecUtil.extractModelTypeCode(product.getProductSpecCode()).equals(ProductSpecUtil.extractModelTypeCode(ps.getProductSpecCode())))) return false;
			}
		}
		return true;
	}

	public boolean isProductAlreadyOnPallet() {
		List<? extends BaseProduct> list = getProductPane().getItems();
		if (list == null || list.isEmpty()) {
			return false;
		}
		for (BaseProduct product : list) {
			if (product == null) {
				continue;
			}
			boolean equals = BeanUtils.safeEquals(product.getId(), getQicsController().getProductModel().getProduct().getId());
			if (equals) {
				return true;
			}
		}
		return false;
	}

	protected boolean isValidDunnageNumber(String str) {
		ChainCommand validator = (ChainCommand) getDunnageNumberTextField().getClientProperty("validator");
		if (validator == null) {
			return true;
		}
		List<String> messages = validator.execute(str);
		if (messages != null && !messages.isEmpty()) {
			setErrorMessage(messages.get(0));
			return false;
		}

		return true;
	}

	protected boolean isEmpty(String str) {
		if (str == null || str.trim().length() == 0) {
			return true;
		}
		return false;
	}

	// === ui factory methods === //
	@SuppressWarnings("unchecked")
	protected ObjectTablePane<BaseProduct> createProductPane() {
		ObjectTablePane<BaseProduct> panel = (ObjectTablePane<BaseProduct>) DunnageTablePaneFactory.createDunnageTablePane(getQicsController().getProductType());
		DunnageTableCellRenderer renderer = new DunnageTableCellRenderer();
		panel.setCellRenderer(renderer);
		panel.getTable().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		if (getClientConfig().isScreenTouch()) {
			panel.getTable().setRowHeight((int) (panel.getTable().getRowHeight() * getClientConfig().getScreenTouchFactor()));
		}
		panel.setSize(getTabPaneWidth() - 200, getTabPaneHeight());

		return panel;

	}

	protected JPopupMenu createProductTablePopupMenu() {
		JPopupMenu popup = new JPopupMenu();
		JMenuItem menuItem = new JMenuItem("Remove");
		menuItem.setName("Remove");
		menuItem.addActionListener(new RemoveDunnageAction(this));
		popup.add(menuItem);
		return popup;
	}

	protected JTextField createDunnageNumberTextField() {
		JTextField textField = new JTextField();
		textField.setText("");
		TextFieldState.EDIT.setState(textField);
		textField.setFont(Fonts.DIALOG_PLAIN_26);
		textField.setAlignmentX(Component.LEFT_ALIGNMENT);
		textField.setEditable(true);
		textField.setRequestFocusEnabled(true);
		textField.setDocument(new UpperCaseDocument(getQicsPropertyBean().getDunnageNumberLength()));
		textField.setName("dunnageNumberTextField");
		return textField;
	}

	protected JButton createChangeDunnageButton() {
		JButton button = new JButton();
		button.setFont(Fonts.DIALOG_PLAIN_18);
		return button;
	}

	protected JButton createNewDunnageButton() {
		JButton button = new JButton();
		button.setFont(Fonts.DIALOG_PLAIN_18);
		return button;
	}

	protected JButton createPrintDunnageButton() {
		JButton button = new JButton("Print");
		button.setFont(Fonts.DIALOG_PLAIN_18);
		button.setEnabled(false);
		return button;
	}

	// === get/set === //
	public ObjectTablePane<BaseProduct> getProductPane() {
		return productPane;
	}

	public JTextField getDunnageNumberTextField() {
		return dunnageNumberTextField;
	}

	public JButton getChangeDunnageButton() {
		return changeDunnageButton;
	}

	public JButton getNewDunnageButton() {
		return newDunnageButton;
	}

	// === actions mappings/event handlers === //
	@Override
	protected void mapActions() {

		AbstractPanelAction processDunnageAction = new AbstractPanelAction(this) {
			private static final long serialVersionUID = 1L;

			@Override
			protected void execute(ActionEvent e) {
				String dunnageNumber = getDunnageNumberTextField().getText();
				dunnageNumber = dunnageNumber == null ? null : dunnageNumber.trim();
				getDunnageNumberTextField().setText(dunnageNumber);
				if (!isValidDunnageNumber(dunnageNumber)) {
					TextFieldState.ERROR.setState(getDunnageNumberTextField());
					getDunnageNumberTextField().selectAll();
					getQicsController().playNgSound();
					return;
				}
				putClientProperty("FROM_ACTION", true);
				getClientModel().setDunnageNumber(dunnageNumber);
				loadDunnageProducts(dunnageNumber);
				setButtonsState();
			}
		};
		getDunnageNumberTextField().setAction(processDunnageAction);

		AbstractPanelAction newDunnageAction = new AbstractPanelAction(this) {
			private static final long serialVersionUID = 1L;

			@Override
			protected void setActionId() {
				setActionId(ActionId.NEW_DUNNAGE);
			}
			
			@Override
			protected void execute(ActionEvent e) {
				if (StringUtils.isNotBlank(getClientModel().getDunnageNumber()) && getProductPane().getTable().getRowCount() < getQicsController().getDunnageCartQuantity()) {
					String msg = "Current dunnage is not full, are You sure you want to start new one ?";
					int ret = JOptionPane.showConfirmDialog(getParent(), msg, "New Dunnage", JOptionPane.YES_NO_OPTION);
					if (ret == JOptionPane.NO_OPTION) {
						return;
					}
				}

				getProductPane().removeData();
				getDunnageNumberTextField().setText("");
				getClientModel().setDunnageNumber(null);
				String dunnage = getQicsController().generateDunnageNumber();
				getDunnageNumberTextField().setText(dunnage);
				getClientModel().setDunnageNumber(dunnage);
				loadDunnageProducts(dunnage);
				setButtonsState();
			}
		};
		newDunnageAction.putValue(Action.NAME, "New Dunnage");
		newDunnageAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_N);
		getNewDunnageButton().setAction(newDunnageAction);
		getNewDunnageButton().getInputMap().put(KeyStroke.getKeyStroke((char) KeyEvent.VK_ENTER), "newDunnage");
		getNewDunnageButton().getActionMap().put("newDunnage", getNewDunnageButton().getAction());
		getNewDunnageButton().setEnabled(getQicsPropertyBean().isDunnageNumberAutoGenerated());

		AbstractPanelAction changeDunnageAction = new AbstractPanelAction(this) {
			private static final long serialVersionUID = 1L;

			@Override
			protected void setActionId() {
				setActionId(ActionId.CHANGE_DUNNAGE);
			}
			
			@Override
			protected void execute(ActionEvent e) {
				getProductPane().removeData();
				getDunnageNumberTextField().setText("");
				getClientModel().setDunnageNumber(null);
				TextFieldState.EDIT.setState(getDunnageNumberTextField());
				setButtonsState();
			}
		};

		changeDunnageAction.putValue(Action.NAME, "Change Dunnage");
		changeDunnageAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_E);
		getChangeDunnageButton().setAction(changeDunnageAction);
		getChangeDunnageButton().getInputMap().put(KeyStroke.getKeyStroke((char) KeyEvent.VK_ENTER), "changeDunnage");
		getChangeDunnageButton().getActionMap().put("changeDunnage", getChangeDunnageButton().getAction());

		AbstractPanelAction printDunnageAction = new AbstractPanelAction(this) {
			private static final long serialVersionUID = 1L;
			
			@Override
			protected void setActionId() {
				setActionId(ActionId.PRINT_DUNNAGE);
			}

			@Override
			protected boolean isAuthorized() {
				int productCount = getProductPane().getTable().getRowCount();
				if (productCount > 0 && productCount <  getQicsController().getDunnageCartQuantity())  {
					return isAuthorized(getAuthorizationGroup());
				}
				return true;
			}
			
			@Override
			protected void execute(ActionEvent e) {
				if (getProductPane().getTable().getRowCount() == 0) {
					JOptionPane.showMessageDialog(DunnagePanel.this, "There are not product to send to printer.");
					return;
				}
				int retCode = JOptionPane.showConfirmDialog(DunnagePanel.this, "Are you sure ?", "Print Dunage", JOptionPane.YES_NO_OPTION);
				if (retCode != JOptionPane.YES_OPTION) {
					return;
				}
				List<? extends BaseProduct> products = getProductPane().getItems();
				getQicsController().printDunnage(products);
			}
		};

		printDunnageAction.putValue(Action.NAME, "Print Dunnage");
		printDunnageAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_P);
		getPrintDunnageButton().setAction(printDunnageAction);
		getPrintDunnageButton().getInputMap().put(KeyStroke.getKeyStroke((char) KeyEvent.VK_ENTER), "printDunnage");
		getPrintDunnageButton().getActionMap().put("printDunnage", getPrintDunnageButton().getAction());
	}

	@Override
	protected void mapEventHandlers() {
		getProductPane().getTable().addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				showPopupMenu(e);
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				showPopupMenu(e);
			}

			protected void showPopupMenu(MouseEvent e) {
				if (e.isPopupTrigger()) {
					if (!getQicsController().isProductProcessable()) {
						return;
					}
					int count = getProductPane().getTable().getSelectedRowCount();
					getProductTablePopupMenu().getSubElements()[0].getComponent().setEnabled(count > 0);
					getProductTablePopupMenu().show(e.getComponent(), e.getX(), e.getY());
				}
			}
		});

		getDunnageNumberTextField().getDocument().addDocumentListener(new InputNumberChangeListener(this, getDunnageNumberTextField()));
	}

	protected void mapValidators() {
		boolean autoGenerated = getQicsPropertyBean().isDunnageNumberAutoGenerated();
		List<Command> validators = DunnageUtils.getValidatorCommands(autoGenerated);
		if (autoGenerated) {
			int machineIdLength = getQicsPropertyBean().getDunnageNumberLength() - DunnageUtils.getSequenceTokenLength() - DunnageUtils.getDateTokenLength();
			validators.add(new StringTokenValidator("Machine", 0, machineIdLength - 1, new StringValidator(getQicsPropertyBean().getMachineId())));
			PassedDateValidator pdv = new PassedDateValidator(false, null, true, DunnageUtils.getDatePattern()) {
				@Override
				public Date getDate() {
					return getQicsController().getProductionDate();
				}

				@Override
				public String getDetailedMessage(String propertyName) {
					String date = new SimpleDateFormat("yyyy-MMM-dd").format(getDate());
					String str = String.format("%s (%s)", date, DunnageUtils.getDatePattern());
					return MessageFormat.format(getDetailedMessageTemplate(), propertyName, str);
				}
			};
			int dateIx = DunnageUtils.getDateTokenIx();
			int dateEndIx = DunnageUtils.getDateTokenIx() + DunnageUtils.getDateTokenLength() - 1;
			validators.add(new StringTokenValidator("Date", dateIx, dateEndIx, pdv));
		}

		ChainCommand validator = ChainCommand.create(validators, "Dunnage");
		validator.setShortCircuit(true);
		getDunnageNumberTextField().putClientProperty("validator", validator);
	}

	public JPopupMenu getProductTablePopupMenu() {
		return productTablePopupMenu;
	}

	protected JButton getPrintDunnageButton() {
		return printDunnageButton;
	}

	class DunnageTableCellRenderer extends DefaultTableCellRenderer {
		private static final long serialVersionUID = 1L;

		@Override
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
			if (column == 0) {
				Object productId = table.getValueAt(row, 1);
				BaseProduct bp = getProductModel().getProduct();
				if (bp instanceof DieCast) {
					DieCast dc = (DieCast) bp;
					setBackGroundColor(dc.getDcSerialNumber() != null && dc.getDcSerialNumber().equals(productId));
				} else {
					setBackGroundColor(bp.getProductId() != null && bp.getProductId().equals(productId));
				}
			}
			return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		}

		private void setBackGroundColor(boolean green) {
			setBackground(green ? Color.GREEN : Color.WHITE);
		}
	}
}
