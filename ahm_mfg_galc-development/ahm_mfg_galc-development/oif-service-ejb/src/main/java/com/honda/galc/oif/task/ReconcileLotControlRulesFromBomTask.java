package com.honda.galc.oif.task;

import static com.honda.galc.service.ServiceFactory.getDao;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.honda.galc.common.logging.Logger;
import com.honda.galc.dao.oif.BomDao;
import com.honda.galc.dao.product.LotControlRuleDao;
import com.honda.galc.dao.product.PartByProductSpecCodeDao;
import com.honda.galc.dao.product.PartSpecDao;
import com.honda.galc.data.ProductType;
import com.honda.galc.entity.fif.Bom;
import com.honda.galc.entity.product.LotControlRule;
import com.honda.galc.entity.product.LotControlRuleId;
import com.honda.galc.entity.product.PartByProductSpecCode;
import com.honda.galc.entity.product.PartByProductSpecCodeId;
import com.honda.galc.entity.product.PartSpec;
import com.honda.galc.entity.product.ProductSpec;
import com.honda.galc.service.ServiceFactory;
import com.honda.galc.service.utils.ProductTypeUtil;
import com.honda.galc.system.oif.svc.common.IEventTaskExecutable;
import com.honda.galc.system.oif.svc.common.OifErrorsCollector;
import com.honda.galc.util.ProductSpecUtil;

public class ReconcileLotControlRulesFromBomTask extends OifAbstractTask implements IEventTaskExecutable {

	private static final String CHECK_PART_LEVEL = "CHECK_PART_LEVEL";
	private static final String PLANT_CODE = "PLANT_CODE";
	protected OifErrorsCollector errorsCollector;

	private boolean checkPartLevel = false;
	private String plantCode = "T";
	private List<? extends ProductSpec> productSpecs = new ArrayList<ProductSpec>();
	
	public ReconcileLotControlRulesFromBomTask(String name) {
		super(name);
		errorsCollector = new OifErrorsCollector(name);
	}

	public void execute(Object[] args) {
		try {
			String checkPart = getProperty(CHECK_PART_LEVEL, "");
			checkPartLevel = checkPart.trim().length()> 0?Boolean.valueOf(checkPart):false;
			plantCode = getProperty(PLANT_CODE, "");
			getLogger().info("Started processing Reconcile LotControl Rules From Bom Task  ");
			process();
			getLogger().info("Finished processing Reconcile LotControl Rules From Bom Task");
		} catch (Exception e) {
			getLogger()
					.info("Unexpected Exception Occurred  while running the Reconcile LotControl Rules From Bom Task :"
							+ e.getMessage());
			e.printStackTrace();
			errorsCollector.emergency(e, "Unexpected exception occured");
		} finally {
			errorsCollector.sendEmail();
		}

	}

	private void process() {
		List<PartSpec> partSpecs = ServiceFactory.getDao(PartSpecDao.class)
				.findAllWithPartNumberAndAssignedToProcessPoint();
		loadProductSpec();
		for (PartSpec partSpec : partSpecs) {
			if (isAutoGenerated(partSpec)) {
				if (checkPartLevel) {
					handlePartNumberChange(partSpec);
				}
				// get effective mtoci for partSpec
				Map<String, Bom> effectiveProductSpecCodes = getProductSpecCodes(partSpec);

				// get lotControl rules for partName
				List<LotControlRule> lotControlRules = ServiceFactory.getDao(LotControlRuleDao.class)
						.findAllByPartName(partSpec.getId().getPartName());

				Map<String, LotControlRule> lotControlRulesWithPartId = new HashMap<String, LotControlRule>();
				for (LotControlRule rule : lotControlRules) {
					List<PartByProductSpecCode> partByProductSpecCodes = rule.getPartByProductSpecs();
					for (PartByProductSpecCode partByProductSpecCode : partByProductSpecCodes) {
						if (partByProductSpecCode.getId().getPartId().equalsIgnoreCase(partSpec.getId().getPartId())) {
							lotControlRulesWithPartId.put(rule.getProductSpecCode(), rule);
						}
					}
				}
				List<String> ineffectiveSpecCodes = new ArrayList<String>();
				// remove lot control rules with mtoci that are no longer
				// effective
				for (String productSpecCode : lotControlRulesWithPartId.keySet()) {
					if (!effectiveProductSpecCodes.keySet().contains(productSpecCode)) {
						LotControlRule rule = lotControlRulesWithPartId.get(productSpecCode);
						List<PartByProductSpecCode> partByProductSpecCodes = rule.getPartByProductSpecs();
						for(PartByProductSpecCode partbyProductSpec: partByProductSpecCodes){
							getDao(PartByProductSpecCodeDao.class).remove(partbyProductSpec);
						}
						getDao(LotControlRuleDao.class).remove(rule);
						errorsCollector.error(" Removed LotControlRule :" + rule);
						ineffectiveSpecCodes.add(productSpecCode);
					}
				}
			
				// add lot control rules and part specs for effective mtoci if
				// do not exist
				for (String productSpecCode : effectiveProductSpecCodes.keySet()) {
					boolean ruleExists = false;

					for (LotControlRule lotControlRule : lotControlRules){
						if (lotControlRule.getProductSpecCode().equalsIgnoreCase(productSpecCode)) {
							ruleExists = true;
						}
					}
					if (!ruleExists) {
						Bom bom = effectiveProductSpecCodes.get(productSpecCode);
						String partNumber = bom.getId().getPartNo();
						List<PartSpec> pSpecs = getDao(PartSpecDao.class)
								.findAllByPartName(partSpec.getId().getPartName());
						boolean matchingPartSpecExists =  false;
						for (PartSpec pSpec : pSpecs) {
							if (!StringUtils.isEmpty(pSpec.getPartNumber())
									&& pSpec.getPartNumber().trim().equalsIgnoreCase(partNumber.trim()) && bomModelYearMatchesPartIdModelYear(bom, pSpec)) {
								matchingPartSpecExists= true;
								LotControlRule otherRuleWithSamePartSpec = getLotControlRuleWithPartSpec(pSpec);
								if (otherRuleWithSamePartSpec != null) {
									addNewLotControlRuleForPartSpec(pSpec, bom, otherRuleWithSamePartSpec);
								}else{
									errorsCollector.error(" Cannot create lotcontrol rule  as no prior rule exists for part spec-" + partSpec.toString());
								}
								break;
							}
						}
						if(!matchingPartSpecExists){
							errorsCollector.error(" Cannot create lotcontrol rule as no matching partSpec exists for productspec - "+ productSpecCode +" with part number - " + partNumber+" for part - "+partSpec.getId().getPartName());
						}

					}
				}
			}
		}
	}

	private boolean bomModelYearMatchesPartIdModelYear(Bom bom, PartSpec partSpec) {
		String bomModelYear = bom.getId().getMtcModel().substring(0, 1);
		String partSpecModelYear = partSpec.getId().getPartId().substring(0, 1);
		return bomModelYear.equalsIgnoreCase(partSpecModelYear);
	}

	private LotControlRule getLotControlRuleWithPartSpec(PartSpec partSpec) {
		List<LotControlRule> lotControlRules = ServiceFactory.getDao(LotControlRuleDao.class)
				.findAllByPartName(partSpec.getId().getPartName());
		LotControlRule selectedRule = null;
		for (LotControlRule rule : lotControlRules) {

			List<PartByProductSpecCode> partByProductSpecCodes = rule.getPartByProductSpecs();

			for (PartByProductSpecCode partByProductSpecCode : partByProductSpecCodes) {
				PartSpec spec = partByProductSpecCode.getPartSpec();
				if (spec != null && StringUtils.isNotEmpty(spec.getPartNumber()) && spec.getPartNumber().trim().equalsIgnoreCase(partSpec.getPartNumber().trim())) {
					selectedRule = rule;
					break;
				}
			}
		}
		return selectedRule;
	}

	private void addNewLotControlRuleForPartSpec(PartSpec part, Bom bom, LotControlRule otherRuleWithSamePartSpec) {

		String modelYear = bom.getId().getMtcModel().substring(0, 1);
		String modelCode = bom.getId().getMtcModel().substring(1);
		String modelTypeCode = bom.getId().getMtcType();
		String modelOptionCode = bom.getId().getMtcOption();
		String extColorCode = bom.getId().getMtcColor();
		String intColorCode = bom.getId().getIntColorCode();

		String newSpecCode= modelYear+ProductSpec.padModelCode((modelCode).equals(ProductSpec.WILDCARD)?"":modelCode);
		newSpecCode += ProductSpec.padModelTypeCode((modelTypeCode).equals(ProductSpec.WILDCARD)?"":modelTypeCode);
		newSpecCode += ProductSpec.padModelOptionCode((modelOptionCode).equals(ProductSpec.WILDCARD)?"":modelOptionCode);
		newSpecCode += ProductSpec.padExtColorCode((extColorCode).equals(ProductSpec.WILDCARD)?"":extColorCode);
		newSpecCode += ProductSpec.padIntColorCode((intColorCode).equals(ProductSpec.WILDCARD)?"":intColorCode);

		
		PartByProductSpecCode partByProductSpecCode = new PartByProductSpecCode();
		PartByProductSpecCodeId partByProductSpecCodeId = new PartByProductSpecCodeId();
		partByProductSpecCodeId.setProductSpecCode(newSpecCode.trim());
		partByProductSpecCodeId.setPartId(part.getId().getPartId());
		partByProductSpecCodeId.setPartName(part.getId().getPartName());
		partByProductSpecCodeId.setModelYearCode(StringUtils.isEmpty(modelYear) ? ProductSpec.WILDCARD : modelYear);
		partByProductSpecCodeId.setModelCode(StringUtils.isEmpty(modelCode) ? ProductSpec.WILDCARD : modelCode);
		partByProductSpecCodeId
				.setModelTypeCode(StringUtils.isEmpty(modelTypeCode) ? ProductSpec.WILDCARD : modelTypeCode);
		partByProductSpecCodeId
				.setModelOptionCode(StringUtils.isEmpty(modelOptionCode) ? ProductSpec.WILDCARD : modelOptionCode);
		partByProductSpecCodeId
				.setExtColorCode(StringUtils.isEmpty(extColorCode) ? ProductSpec.WILDCARD : extColorCode);
		partByProductSpecCodeId
				.setIntColorCode(StringUtils.isEmpty(intColorCode) ? ProductSpec.WILDCARD : intColorCode);
		partByProductSpecCode.setId(partByProductSpecCodeId);
		getDao(PartByProductSpecCodeDao.class).save(partByProductSpecCode);

		LotControlRule rule = new LotControlRule();
		LotControlRuleId lotControlRuleid = new LotControlRuleId();
		lotControlRuleid.setPartName(part.getId().getPartName());
		lotControlRuleid.setProductSpecCode(newSpecCode.trim());
		lotControlRuleid.setModelYearCode(StringUtils.isEmpty(modelYear) ? ProductSpec.WILDCARD : modelYear);
		lotControlRuleid.setModelCode(StringUtils.isEmpty(modelCode) ? ProductSpec.WILDCARD : modelCode);
		lotControlRuleid.setModelTypeCode(StringUtils.isEmpty(modelTypeCode) ? ProductSpec.WILDCARD : modelTypeCode);
		lotControlRuleid
				.setModelOptionCode(StringUtils.isEmpty(modelOptionCode) ? ProductSpec.WILDCARD : modelOptionCode);
		lotControlRuleid.setExtColorCode(StringUtils.isEmpty(extColorCode) ? ProductSpec.WILDCARD : extColorCode);
		lotControlRuleid.setIntColorCode(StringUtils.isEmpty(intColorCode) ? ProductSpec.WILDCARD : intColorCode);
		lotControlRuleid.setProcessPointId(otherRuleWithSamePartSpec.getId().getProcessPointId());
		rule.setId(lotControlRuleid);
		rule.setCreateTimestamp(new Timestamp(System.currentTimeMillis()));
		rule.setSequenceNumber(otherRuleWithSamePartSpec.getSequenceNumber());
		rule.setDeviceId(otherRuleWithSamePartSpec.getDeviceId());
		rule.setExpectedInstallTime(otherRuleWithSamePartSpec.getExpectedInstallTime());
		rule.setInstructionCode(otherRuleWithSamePartSpec.getInstructionCode());
		rule.setSerialNumberScanFlag(otherRuleWithSamePartSpec.getSerialNumberScanFlag());
		rule.setStrategy(otherRuleWithSamePartSpec.getStrategy());
		rule.setSubId(otherRuleWithSamePartSpec.getSubId());
		rule.setUnique(otherRuleWithSamePartSpec.isUnique());
		rule.setVerify(otherRuleWithSamePartSpec.isVerify());
		rule.setPartConfirm(otherRuleWithSamePartSpec.isPartConfirm());
		getDao(LotControlRuleDao.class).save(rule);
		errorsCollector.error(" Added LotControlRule :" + rule);
	}

	private boolean isAutoGenerated(PartSpec partSpec) {
		return partSpec.getId().getPartId().substring(1, 2).equalsIgnoreCase("~");
	}

	private Map<String, Bom> getProductSpecCodes(PartSpec partSpec) {
		BomDao bomDao = getDao(BomDao.class);

		Map<String, Bom> productSpecCodes = new HashMap<String, Bom>();

		String partNumber = partSpec.getPartNumber();
		if (StringUtils.isNotEmpty(partNumber)) {
			String partNo = partSpec.getPartNumber().substring(0, 11);
			List<Bom> bomList = bomDao.findAllValidModels(plantCode, partNo);
			for (Bom bom : bomList) {
				String modelYear = bom.getId().getMtcModel().substring(0, 1);
				String modelCode = bom.getId().getMtcModel().substring(1, 4);
				String modelType = bom.getId().getMtcType();
				String modelOption = bom.getId().getMtcOption();
				String extColorCode = bom.getId().getMtcColor();
				String intColorCode = bom.getId().getIntColorCode();

				String newSpecCode= modelYear+ProductSpec.padModelCode((modelCode).equals(ProductSpec.WILDCARD)?"":modelCode);
				newSpecCode += ProductSpec.padModelTypeCode((modelType).equals(ProductSpec.WILDCARD)?"":modelType);
				newSpecCode += ProductSpec.padModelOptionCode((modelOption).equals(ProductSpec.WILDCARD)?"":modelOption);
				newSpecCode += ProductSpec.padExtColorCode((extColorCode).equals(ProductSpec.WILDCARD)?"":extColorCode);
				newSpecCode += ProductSpec.padIntColorCode((intColorCode).equals(ProductSpec.WILDCARD)?"":intColorCode);
			
				if(isValid(newSpecCode)) {
					productSpecCodes.put(newSpecCode.trim(), bom);
				}
				
			}
		}
		return productSpecCodes;
	}

	private Logger getLogger() {
		return Logger.getLogger(componentId);
	}

	private void handlePartNumberChange(PartSpec partSpec) {
		BomDao bomDao = getDao(BomDao.class);
		String partNumber = partSpec.getPartNumber().trim();
		if (StringUtils.isNotEmpty(partNumber)) {
			String partNo = partSpec.getPartNumber().substring(0, 11);
			List<Bom> bomList = bomDao.findAllValidModels(plantCode, partNo);
			for (Bom bom : bomList) {
				String bomPartNo = bom.getId().getPartNo();
				if (!bomPartNo.trim().equalsIgnoreCase(partNumber)) {
					// updatePartSpecTbx with new part Number
					partSpec.setPartNumber(bomPartNo);
					getDao(PartSpecDao.class).save(partSpec);
					partNumber = bomPartNo;
					errorsCollector.error(" Updated :" + partSpec + " with Part Number :" + bomPartNo);
				}
			}
		}
	}

	private boolean isValid(String wildCardSpecCode) {
	   for(ProductSpec productSpec : productSpecs)  {
		   if (ProductSpecUtil.match(productSpec.getProductSpecCode(), wildCardSpecCode, false)) return true;
	   }
	   return false;
	}
	 
	 @SuppressWarnings("unchecked")
	public void loadProductSpec() {
	   productSpecs = (List<? extends ProductSpec>)ProductTypeUtil.getProductSpecDao(ProductType.FRAME.toString()).findAllProductSpecCodesOnly(ProductType.FRAME.toString());
	}
	    
}