--This script is to convert HMIN GALC DB over to the initial version of the REGIONAL CODE BASE

CREATE TABLE GALADM.BLOCK_BUILD_RESULTS_TBX (
   BLOCK_ID VARCHAR(17) NOT NULL,
   PART_NAME VARCHAR(32) DEFAULT ' ' NOT NULL,
   ACTUAL_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
   RESULT_VALUE VARCHAR(30),
   INSTALLED_PART_STATUS INTEGER,
   ASSOCIATE_NO VARCHAR(11),
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT BLOCK_BUILD_RESULTS_PK PRIMARY KEY
     (BLOCK_ID,PART_NAME)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.BLOCK_BUILD_RESULTS_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.BLOCK_BUILD_RESULTS_TBX IS 'RMT BlockBuildResult';

CREATE TABLE GALADM.BLOCK_HISTORY_TBX (
   BLOCK_ID VARCHAR(17) NOT NULL,
   PROCESS_POINT_ID CHARACTER(16) DEFAULT ' ' NOT NULL,
   ACTUAL_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   PROCESS_COUNT INTEGER DEFAULT 1 NOT NULL,
   CONSTRAINT BLOCK_HISTORY_PK PRIMARY KEY
     (BLOCK_ID,PROCESS_POINT_ID,ACTUAL_TIMESTAMP)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.BLOCK_HISTORY_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.BLOCK_HISTORY_TBX IS 'RMT BlockHistory';

CREATE INDEX GALADM.BLOCK_HISTORY_I1
  ON GALADM.BLOCK_HISTORY_TBX
    ( PROCESS_POINT_ID, ACTUAL_TIMESTAMP )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE TABLE GALADM.BLOCK_LOAD_TBX (
   MC_NUMBER CHARACTER(20) NOT NULL,
   PRODUCTION_LOT CHARACTER(20),
   LOT_SIZE INTEGER,
   PRODUCT_SPEC_CODE CHARACTER(22),
   REFERENCE_NUMBER INTEGER,
   STATUS CHARACTER(1),
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT BLOCK_LOAD_PK PRIMARY KEY
     (MC_NUMBER)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.BLOCK_LOAD_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.BLOCK_LOAD_TBX IS 'RMT BlockLoad';

CREATE INDEX GALADM.BLOCK_LOAD_I1
  ON GALADM.BLOCK_LOAD_TBX
    ( PRODUCTION_LOT, STATUS )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE INDEX GALADM.BLOCK_LOAD_I2
  ON GALADM.BLOCK_LOAD_TBX
    ( STATUS )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE TABLE GALADM.BLOCK_TBX (
   BLOCK_ID VARCHAR(17) NOT NULL,
   MC_SERIAL_NUMBER VARCHAR(17),
   DC_SERIAL_NUMBER VARCHAR(17),
   ENGINE_SERIAL_NUMBER VARCHAR(17),
   MODEL VARCHAR(12),
   TRACKING_STATUS VARCHAR(12),
   DUNNAGE VARCHAR(12),
   DEFECT_STATUS SMALLINT,
   HOLD_STATUS SMALLINT DEFAULT 0 NOT NULL,
   LAST_PASSING_PROCESS_POINT_ID CHARACTER(16),
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT BLOCK_PK PRIMARY KEY
     (BLOCK_ID)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.BLOCK_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.BLOCK_TBX IS 'RMT Block';

CREATE INDEX GALADM.BLOCK_I1
  ON GALADM.BLOCK_TBX
    ( ENGINE_SERIAL_NUMBER )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE INDEX GALADM.BLOCK_I2
  ON GALADM.BLOCK_TBX
    ( DC_SERIAL_NUMBER )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE INDEX GALADM.BLOCK_I3
  ON GALADM.BLOCK_TBX
    ( DUNNAGE )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE INDEX GALADM.BLOCK_I4
  ON GALADM.BLOCK_TBX
    ( LAST_PASSING_PROCESS_POINT_ID )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE INDEX GALADM.BLOCK_I5
  ON GALADM.BLOCK_TBX
    ( MC_SERIAL_NUMBER )
  ALLOW REVERSE SCANS
  COMPRESS NO;

COMMENT ON TABLE GALADM.GAL105TBX IS
   'RMT AccessControlManager for user security';
COMMENT ON TABLE GALADM.GAL108TBX IS
   'RMT BearingSelectResult for tracking bearing used in a specific engine';
COMMENT ON TABLE GALADM.GAL111TBX IS
   'RMT BroadcastDestination for setting up printing on a process point';
COMMENT ON TABLE GALADM.GAL117TBX IS 'RMT Site';
COMMENT ON TABLE GALADM.GAL118TBX IS
   'RMT CounterByModelGroup for summarizing number of models built by process point, production date, shift, period';
COMMENT ON TABLE GALADM.GAL119TBX IS
   'RMT CounterByProductSpec for summarizing number of product specs built by process point, production date, shift, period';
COMMENT ON TABLE GALADM.GAL120TBX IS
   'RMT CounterByProductionLot for summarizing number of production lots built by process point, production date, shift, period';
COMMENT ON TABLE GALADM.GAL123TBX IS 'RMT DefectGroup for QICS';

ALTER TABLE GALADM.GAL125TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL125TBX
  ADD COLUMN PART_GROUP_NAME CHARACTER(20);

ALTER TABLE GALADM.GAL125TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL125TBX;

COMMENT ON TABLE GALADM.GAL125TBX IS
   'RMT DefectResult for QICS recording defects to product';

ALTER TABLE GALADM.GAL125TBX_AUD
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL125TBX_AUD
  ADD COLUMN OLD_PART_GROUP_NAME CHARACTER(20)
  ADD COLUMN NEW_PART_GROUP_NAME CHARACTER(20);

ALTER TABLE GALADM.GAL125TBX_AUD
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL125TBX_AUD;

COMMENT ON TABLE GALADM.GAL126TBX IS
   'RMT DefectType for QICS to define defect type name';
COMMENT ON TABLE GALADM.GAL127TBX IS 'RMT DefectTypeDescription for QICS';
COMMENT ON TABLE GALADM.GAL128TBX IS 'RMT Division';

ALTER TABLE GALADM.GAL131TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL131TBX
  ADD COLUMN DEFECT_STATUS SMALLINT;

ALTER TABLE GALADM.GAL131TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL131TBX;

COMMENT ON TABLE GALADM.GAL131TBX IS 'RMT Engine';

COMMENT ON TABLE GALADM.GAL133TBX IS 'RMT EngineSpec';
COMMENT ON TABLE GALADM.GAL135TBX IS 'RMT ExpectedProduct for LOT CONTROL';

ALTER TABLE GALADM.GAL136TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL136TBX
  ADD COLUMN LOCATION VARCHAR(20);

ALTER TABLE GALADM.GAL136TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL136TBX;

COMMENT ON TABLE GALADM.GAL136TBX IS 'RMT ExceptionalOut';

COMMENT ON TABLE GALADM.GAL141TBX IS 'RMT EngineFiringResult';
COMMENT ON TABLE GALADM.GAL143TBX IS 'RMT Frame';

ALTER TABLE GALADM.GAL144TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL144TBX
  ALTER COLUMN BOUNDARY_MARK_REQUIRED
    SET DEFAULT '';

ALTER TABLE GALADM.GAL144TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL144TBX;

COMMENT ON TABLE GALADM.GAL144TBX IS 'RMT FrameSpec';

ALTER TABLE GALADM.GAL147TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL147TBX
  ADD COLUMN QSR_ID INTEGER;

ALTER TABLE GALADM.GAL147TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL147TBX;

COMMENT ON TABLE GALADM.GAL147TBX IS 'RMT HoldResult';

COMMENT ON TABLE GALADM.GAL158TBX IS
   'RMT HostMtoc for OIF Frame MTO Master Specification';

COMMENT ON TABLE GALADM.GAL173TBX IS 'RMT Image for QICS';
COMMENT ON TABLE GALADM.GAL174TBX IS 'RMT ImageSection for QICS';
COMMENT ON TABLE GALADM.GAL175TBX IS 'RMT ImageSectionPoint for QICS';
COMMENT ON TABLE GALADM.GAL176TBX IS 'RMT InProcessProduct for LINE CONTROL';

ALTER TABLE GALADM.GAL177TBX
   DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL177TBX
   ALTER COLUMN RESPONSIBLE_DEPT
     SET DATA TYPE VARCHAR(32);

ALTER TABLE GALADM.GAL177TBX
   DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL177TBX;

COMMENT ON TABLE GALADM.GAL177TBX IS 'RMT InRepairArea for QICS';

COMMENT ON TABLE GALADM.GAL178TBX IS 'RMT InspectionModel for QICS';
COMMENT ON TABLE GALADM.GAL179TBX IS 'RMT InspectionPart for QICS';
COMMENT ON TABLE GALADM.GAL180TBX IS 'RMT InspectionPartDescription for QICS';
COMMENT ON TABLE GALADM.GAL181TBX IS 'RMT InspectionPartLocation for QICS';

COMMENT ON TABLE GALADM.GAL185_HIST_TBX IS
   'RMT InstalledPartHistory for LOT CONTROL to keep history of Installed Parts per Product';

COMMENT ON TABLE GALADM.GAL185TBX IS 'RMT InstalledPart for LOT CONTROL';
COMMENT ON TABLE GALADM.GAL191TBX IS
   'RMT IPPTag for QICS to track Initial Production Part Tag';
COMMENT ON TABLE GALADM.GAL192TBX IS 'RMT IQS';
COMMENT ON TABLE GALADM.GAL195TBX IS 'RMT Line';

ALTER TABLE GALADM.GAL198TBX
    DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL198TBX
    ALTER COLUMN PART_SERIAL_NUMBER
      SET DATA TYPE VARCHAR(255);

ALTER TABLE GALADM.GAL198TBX
    DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL198TBX;

COMMENT ON TABLE GALADM.GAL198TBX IS 'RMT Measurement';

 CREATE TABLE GALADM.GAL198_HIST_TBX (
   PRODUCT_ID CHARACTER(17) NOT NULL DEFAULT '',
   PART_NAME CHARACTER(32) NOT NULL DEFAULT '',
   MEASUREMENT_SEQUENCE_NUMBER INTEGER NOT NULL DEFAULT 0,
   MEASUREMENT_ATTEMPT INTEGER NOT NULL DEFAULT 0,
   MEASUREMENT_VALUE DOUBLE,
   MEASUREMENT_STATUS INTEGER,
   ACTUAL_TIMESTAMP TIMESTAMP,
   MEASUREMENT_ANGLE DOUBLE,
   PART_SERIAL_NUMBER VARCHAR(255),
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT GAL198_HIST_PK PRIMARY KEY
     (PRODUCT_ID, PART_NAME, MEASUREMENT_SEQUENCE_NUMBER, MEASUREMENT_ATTEMPT)
 )
   IN GALTBSDAT3
   INDEX IN GALTBSIDX1;

 ALTER TABLE GALADM.GAL198_HIST_TBX
   DATA CAPTURE CHANGES INCLUDE LONGVAR COLUMNS
   PCTFREE 0
   LOCKSIZE ROW
   APPEND OFF
   NOT VOLATILE;

COMMENT ON TABLE GALADM.GAL198_HIST_TBX IS
   'RMT Measurement Attempt History for LOT CONTROL';

 CREATE INDEX GALADM.GAL198_HIST_I1
   ON GALADM.GAL198_HIST_TBX
     ( PRODUCT_ID ASC, PART_NAME ASC, ACTUAL_TIMESTAMP ASC, MEASUREMENT_VALUE ASC, MEASUREMENT_ATTEMPT ASC )
   ALLOW REVERSE SCANS
   COMPRESS NO;


COMMENT ON TABLE GALADM.GAL205TBX IS 'RMT ParkingAddress';

ALTER TABLE GALADM.GAL206TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL206TBX
  ADD COLUMN ALLOW_DUPLICATES INTEGER NOT NULL DEFAULT 0
  ADD COLUMN COMMENT VARCHAR(256);

ALTER TABLE GALADM.GAL206TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL206TBX;

COMMENT ON TABLE GALADM.GAL206TBX IS
   'RMT Part for LOT CONTROL - Replaced by PART_SPEC_TBX and MEASUREMENT_SPEC_TBX';
COMMENT ON TABLE GALADM.GAL208TBX IS 'RMT PartGroup for QICS';
COMMENT ON TABLE GALADM.GAL211TBX IS 'RMT Plant';
COMMENT ON TABLE GALADM.GAL212TBX IS 'RMT PreProductionLot for LINE CONTROL';
COMMENT ON TABLE GALADM.GAL214TBX IS 'RMT ProcessPoint';

ALTER TABLE GALADM.GAL215TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL215TBX
  ADD COLUMN PROCESS_COUNT INTEGER;

ALTER TABLE GALADM.GAL215TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL215TBX;

COMMENT ON TABLE GALADM.GAL215TBX IS
   'RMT ProductResult for LINE CONTROL to record history of Product through Process Points';
COMMENT ON TABLE GALADM.GAL216TBX IS 'RMT ProductStampingSequence';
COMMENT ON TABLE GALADM.GAL217TBX IS 'RMT ProductionLot';
COMMENT ON TABLE GALADM.GAL219TBX IS 'RMT Regression';

ALTER TABLE GALADM.GAL222TBX
 DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL222TBX
 ALTER COLUMN COMMENT
   SET DATA TYPE VARCHAR(256)
 ALTER COLUMN REPAIR_DEPT
   SET DATA TYPE VARCHAR(32);

ALTER TABLE GALADM.GAL222TBX
 DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL222TBX;

COMMENT ON TABLE GALADM.GAL222TBX IS
   'RMT DefectRepairResult for QICS to record repairs for each product defect';
COMMENT ON TABLE GALADM.GAL224TBX IS 'RMT ReuseProductResult';
COMMENT ON TABLE GALADM.GAL226TBX IS
   'RMT DailyDepartmentSchedule for LINE CONTROL to define production working periods per GPCS Plan Code';
COMMENT ON TABLE GALADM.GAL227TBX IS 'RMT SecondaryPart for QICS';
COMMENT ON TABLE GALADM.GAL234TBX IS 'RMT Terminal';
COMMENT ON TABLE GALADM.GAL235TBX IS 'RMT Zone';
COMMENT ON TABLE GALADM.GAL236TBX IS 'RMT PreviousLine';
COMMENT ON TABLE GALADM.GAL237TBX IS 'RMT GpcsPlant';
COMMENT ON TABLE GALADM.GAL238TBX IS 'RMT GpcsDivision';
COMMENT ON TABLE GALADM.GAL240TBX IS 'RMT Counter';
COMMENT ON TABLE GALADM.GAL241TBX IS 'RMT Application';
COMMENT ON TABLE GALADM.GAL242TBX IS 'RMT ApplicationByTerminal';
COMMENT ON TABLE GALADM.GAL243TBX IS 'RMT ApplicationTask';
COMMENT ON TABLE GALADM.GAL244TBX IS 'RMT TaskSpec';
COMMENT ON TABLE GALADM.GAL245TBX IS
   'RMT PartByProductSpecCode for LOT CONTROL to define Installed Part IDs per Product Spec Code';

ALTER TABLE GALADM.GAL246TBX
 DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL246TBX
 ALTER COLUMN INSTRUCTION_CODE
   SET DATA TYPE CHARACTER(2);

ALTER TABLE GALADM.GAL246TBX
 DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL246TBX;

COMMENT ON TABLE GALADM.GAL246TBX IS
   'RMT LotControlRule for LOT CONTROL to define Installed Part rules per Process Point and Product Spec Code';
COMMENT ON TABLE GALADM.GAL253TBX IS 'RMT Device for LOT CONTROL';
COMMENT ON TABLE GALADM.GAL257TBX IS
   'RMT DeviceFormat for LOT CONTROL to configure Device by Client ID';
COMMENT ON TABLE GALADM.GAL258TBX IS
   'RMT PrintAttributeFormat for LOT CONTROL by Form';
COMMENT ON TABLE GALADM.GAL259TBX IS
   'RMT BuildAttribute for LOT CONTROL by Product Spec Code';

ALTER TABLE GALADM.GAL260TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL260TBX
  ADD COLUMN PREHEAT INTEGER;

ALTER TABLE GALADM.GAL260TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL260TBX;

COMMENT ON TABLE GALADM.GAL260TBX IS
   'RMT StationResult for QICS Station Result per process point, production date and shift';
COMMENT ON TABLE GALADM.GAL261TBX IS
   'RMT PartName for LOT CONTROL to manage Installed Part';

ALTER TABLE GALADM.GAL263TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL263TBX
  ADD COLUMN APPC70A_EMISSION_FLAG CHARACTER(1)
  ADD COLUMN APPC70A_TIMESTAMP TIMESTAMP;

ALTER TABLE GALADM.GAL263TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL263TBX;

COMMENT ON TABLE GALADM.GAL263TBX IS
   'RMT ShippingStatus for LINE CONTROL to manage FRAME (Vin) shipping status';
COMMENT ON TABLE GALADM.GAL282TBX IS
   'RMT UserSecurityGroup for SECURITY to manage users to groups';
COMMENT ON TABLE GALADM.GAL283TBX IS
   'RMT AccessControlEntry for SECURITY to manage access to Terminal Applications (Screen ID)';
COMMENT ON TABLE GALADM.GAL287TBX IS
   'RMT ApplicationMenuEntry for managing Menu Items on Terminals';
COMMENT ON TABLE GALADM.GAL294TBX IS
   'RMT PrintForm for LOT CONTROL to manage forms to printers';

ALTER TABLE GALADM.GAL322TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL322TBX
  ADD COLUMN REPAIR_AREA CHARACTER(20)
  ADD COLUMN REPAIR_DEPARTMENT CHARACTER(32);

ALTER TABLE GALADM.GAL322TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL322TBX;

COMMENT ON TABLE GALADM.GAL322TBX IS 'RMT DefectDescription for QICS';
COMMENT ON TABLE GALADM.GAL324TBX IS 'RMT SecurityGroup for SECURITY';
COMMENT ON TABLE GALADM.GAL364TBX IS
   'RMT InspectionTwoPartDescription for QICS';

ALTER TABLE GALADM.GAL489TBX
 DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL489TBX
 ALTER COLUMN PROPERTY_KEY
   SET DATA TYPE VARCHAR(64)
 ALTER COLUMN PROPERTY_VALUE
   SET DATA TYPE VARCHAR(1024);

ALTER TABLE GALADM.GAL489TBX
 DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL489TBX;

COMMENT ON TABLE GALADM.GAL489TBX IS
   'RMT ComponentProperty for managing application properties';
COMMENT ON TABLE GALADM.GAL600TBX IS 'RMT AdminUser for SECURITY';
COMMENT ON TABLE GALADM.GAL601TBX IS 'RMT AdminGroup for SECURITY';
COMMENT ON TABLE GALADM.GAL602TBX IS 'RMT AdminUserGroup for SECURITY';

ALTER TABLE GALADM.GAL650TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.GAL650TBX
  ALTER COLUMN DATA_READY_TAG
    SET NOT NULL
  ALTER COLUMN NEEDS_LISTENER
    SET NOT NULL
  ADD COLUMN PROCESS_COMPLETE_TAG VARCHAR(128);

ALTER TABLE GALADM.GAL650TBX
  ALTER COLUMN NEEDS_LISTENER
    SET DEFAULT 0;

ALTER TABLE GALADM.GAL650TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.GAL650TBX;

COMMENT ON TABLE GALADM.GAL650TBX IS
   'RMT OpcConfigEntry for LOT CONTROL to manage OPC EI configuration';

CREATE TABLE GALADM.GTS_PRODUCT_TBX (
   TRACKING_AREA VARCHAR(10) NOT NULL,
   PRODUCT_ID VARCHAR(40) NOT NULL,
   SHORT_PROD_ID VARCHAR(20),
   LOT_NUMBER VARCHAR(20),
   KD_LOT_NUMBER VARCHAR(18),
   MODEL_YEAR CHARACTER(1),
   MODEL_CODE VARCHAR(5),
   MODEL_TYPE VARCHAR(5),
   MODEL_OPTION VARCHAR(5),
   INT_COLOR_CODE VARCHAR(5),
   EXT_COLOR_CODE VARCHAR(10),
   HOLD_STATUS SMALLINT DEFAULT 0,
   DEFECT_STATUS SMALLINT,
   INSPECTION_STATUS SMALLINT DEFAULT 0,
   PRODUCT_SEQ SMALLINT DEFAULT 0 NOT NULL,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT GTS_PRODUCT_PK PRIMARY KEY
     (TRACKING_AREA,PRODUCT_ID)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.GTS_PRODUCT_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.GTS_PRODUCT_TBX IS 'RMT GtsProduct';

CREATE ALIAS GALADM.HCM_GTS_PRODUCT_TBX FOR GALADM.GTS_PRODUCT_TBX;

COMMENT ON ALIAS GALADM.HCM_GTS_PRODUCT_TBX IS 'RMT alias to GTS_PRODUCT_TBX';

CREATE TABLE GALADM.HEAD_BUILD_RESULTS_TBX (
   HEAD_ID VARCHAR(17) NOT NULL,
   PART_NAME VARCHAR(32) DEFAULT ' ' NOT NULL,
   ACTUAL_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
   RESULT_VALUE VARCHAR(30),
   INSTALLED_PART_STATUS INTEGER,
   ASSOCIATE_NO VARCHAR(11),
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT HEAD_BUILD_RESULTS_PK PRIMARY KEY
     (HEAD_ID,PART_NAME)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.HEAD_BUILD_RESULTS_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.HEAD_BUILD_RESULTS_TBX IS 'RMT HeadBuildResult';

CREATE TABLE GALADM.HEAD_HISTORY_TBX (
   HEAD_ID VARCHAR(17) NOT NULL,
   PROCESS_POINT_ID CHARACTER(16) DEFAULT ' ' NOT NULL,
   ACTUAL_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
   CREATE_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
   UPDATE_TIMESTAMP TIMESTAMP,
   PROCESS_COUNT INTEGER DEFAULT 1 NOT NULL,
   CONSTRAINT HEAD_HISTORY_PK PRIMARY KEY
     (HEAD_ID,PROCESS_POINT_ID,ACTUAL_TIMESTAMP)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.HEAD_HISTORY_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.HEAD_HISTORY_TBX IS 'RMT HeadHistory';

CREATE INDEX GALADM.HEAD_HISTORY_I1
  ON GALADM.HEAD_HISTORY_TBX
    ( PROCESS_POINT_ID, ACTUAL_TIMESTAMP )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE TABLE GALADM.HEAD_TBX (
   HEAD_ID VARCHAR(17) NOT NULL,
   MC_SERIAL_NUMBER VARCHAR(17),
   DC_SERIAL_NUMBER VARCHAR(17),
   ENGINE_SERIAL_NUMBER VARCHAR(17),
   MODEL VARCHAR(12),
   TRACKING_STATUS VARCHAR(12),
   DUNNAGE VARCHAR(12),
   DEFECT_STATUS SMALLINT,
   HOLD_STATUS SMALLINT DEFAULT 0 NOT NULL,
   ENGINE_FIRING_FLAG SMALLINT DEFAULT 0 NOT NULL,
   LAST_PASSING_PROCESS_POINT_ID CHARACTER(16),
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT HEAD_PK PRIMARY KEY
     (HEAD_ID)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.HEAD_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.HEAD_TBX IS 'RMT Head';

CREATE INDEX GALADM.HEAD_I1
  ON GALADM.HEAD_TBX
    ( ENGINE_SERIAL_NUMBER )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE INDEX GALADM.HEAD_I2
  ON GALADM.HEAD_TBX
    ( DC_SERIAL_NUMBER )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE INDEX GALADM.HEAD_I3
  ON GALADM.HEAD_TBX
    ( DUNNAGE )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE INDEX GALADM.HEAD_I4
  ON GALADM.HEAD_TBX
    ( LAST_PASSING_PROCESS_POINT_ID )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE TABLE GALADM.HOLD_PARM_TBX (
   HOLD_ID BIGINT NOT NULL,
   DEPARTMENT CHARACTER(2) NOT NULL,
   MACHINE_NUMBER VARCHAR(50) NOT NULL,
   DIE_NUMBER VARCHAR(80) NOT NULL,
   START_DATE DATE NOT NULL,
   STOP_DATE DATE NOT NULL,
   HOLD_REASON VARCHAR(80) NOT NULL,
   HOLD_ASSOCIATE_ID VARCHAR(11) NOT NULL,
   HOLD_ASSOCIATE_NAME VARCHAR(30) NOT NULL,
   ACTUAL_TIMESTAMP TIMESTAMP NOT NULL,
   RELEASE_FLAG SMALLINT NOT NULL,
   RELEASE_ASSOCIATE_ID VARCHAR(11),
   RELEASE_ASSOCIATE_NAME VARCHAR(30),
   RELEASE_TIMESTAMP TIMESTAMP,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   QSR_ID INTEGER,
   CONSTRAINT HOLD_PARM_PK PRIMARY KEY
     (HOLD_ID)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.HOLD_PARM_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.HOLD_PARM_TBX IS 'RMT HoldParm';

CREATE TABLE GALADM.HOST_PRIORITY_PLAN_TBX (
   AFAE_FLAG CHARACTER(1) NOT NULL,
   PLAN_CODE CHARACTER(11) NOT NULL,
   LINE_NUMBER CHARACTER(2) NOT NULL,
   PLAN_PROC_LOC CHARACTER(2) NOT NULL,
   WE_LINE_NUMBER CHARACTER(2) NOT NULL,
   WE_PLAN_PROC_LOC CHARACTER(2) NOT NULL,
   PA_LINE_NUMBER CHARACTER(2) NOT NULL,
   PA_PLAN_PROC_LOC CHARACTER(2) NOT NULL,
   AFAE_OFF_DATE DATE NOT NULL,
   PROD_SEQ_NUMBER CHARACTER(12) NOT NULL,
   DEMAND_TYPE CHARACTER(2) NOT NULL,
   KD_LOT_NO CHARACTER(18) NOT NULL,
   MODEL_YEAR_CODE CHARACTER(1) NOT NULL,
   MODEL_CODE CHARACTER(3) NOT NULL,
   MODEL_TYPE_CODE CHARACTER(3) NOT NULL,
   MODEL_OPTION CHARACTER(3) NOT NULL,
   EXT_COLOUR_CODE CHARACTER(10) NOT NULL,
   INT_COLOUR_CODE CHARACTER(2) NOT NULL,
   NO_OF_UNITS INTEGER NOT NULL,
   START_VIN_NUMBER CHARACTER(17) NOT NULL,
   REMAKE_FLAG CHARACTER(1) NOT NULL,
   Y_N_FLAG CHARACTER(1) NOT NULL,
   CARRY_I_O_FLAG CHARACTER(1) NOT NULL,
   NO_OF_UNITS_CICO INTEGER NOT NULL,
   PLAN_CREATED CHARACTER(1) NOT NULL,
   CREATE_DATE DATE DEFAULT CURRENT_DATE NOT NULL,
   ROW_PROCESSED CHARACTER(1) DEFAULT 'N' NOT NULL,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT HOST_PRIORITY_PLAN_PK PRIMARY KEY
     (AFAE_FLAG,PLAN_CODE,LINE_NUMBER,PLAN_PROC_LOC,WE_LINE_NUMBER,WE_PLAN_PROC_LOC,PA_LINE_NUMBER,PA_PLAN_PROC_LOC,AFAE_OFF_DATE,PROD_SEQ_NUMBER,CREATE_DATE)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.HOST_PRIORITY_PLAN_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.HOST_PRIORITY_PLAN_TBX IS 'RMT HostPriorityPlan';

CREATE ALIAS GALADM.HCM_TGA3051 FOR GALADM.HOST_PRIORITY_PLAN_TBX;

COMMENT ON ALIAS GALADM.HCM_TGA3051 IS 'RMT alias to HOST_PRIORITY_PLAN_TBX';

COMMENT ON TABLE GALADM.MBPN_PRODUCT_TBX IS
   'RMT MbpnProduct for tracking product id of type Manufacturing Base Part Number';

COMMENT ON GALADM.MBPN_PRODUCT_TBX (
 HOLD_STATUS_ID IS 'Link to HOLD_STATUS_TBX',
 PRODUCT_STATUS_ID IS 'Link to PRODUCT_STATUS_TBX' );

COMMENT ON TABLE GALADM.MBPN_TBX IS
   'RMT Mbpn for defining Manufacturing Base Part Number product spec codes';
COMMENT ON TABLE GALADM.MEASUREMENT_SPEC_TBX IS
   'RMT MeasurementSpec for LOT CONTROL to define Installed Part Measurement Specs';

ALTER TABLE GALADM.NOTIFICATION_PROVIDER_TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.NOTIFICATION_PROVIDER_TBX
  ALTER COLUMN HOST_IP
    SET DATA TYPE VARCHAR (255)
  ALTER COLUMN HOST_PORT
    SET DATA TYPE INTEGER
  ALTER COLUMN DESCRIPTION
    DROP DEFAULT;

ALTER TABLE GALADM.NOTIFICATION_PROVIDER_TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.NOTIFICATION_PROVIDER_TBX;

DROP TRIGGER GALADM.NOTIF_PRO_TR2;
DROP TRIGGER GALADM.NOTIF_PRO_TR1;

COMMENT ON TABLE GALADM.NOTIFICATION_PROVIDER_TBX IS
   'RMT NotificationProvider for managing hosts setup for asynchronous communication';

ALTER TABLE GALADM.NOTIFICATION_SUBSCRIBER_TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.NOTIFICATION_SUBSCRIBER_TBX
  ALTER COLUMN CLIENT_IP
    SET DATA TYPE VARCHAR (255);

ALTER TABLE GALADM.NOTIFICATION_SUBSCRIBER_TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.NOTIFICATION_SUBSCRIBER_TBX;

COMMENT ON TABLE GALADM.NOTIFICATION_SUBSCRIBER_TBX IS
   'RMT NotificationSubscriber for managing clients setup for asynchronous communication';

ALTER TABLE GALADM.NOTIFICATION_TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.NOTIFICATION_TBX
  ALTER COLUMN DESCRIPTION
    DROP DEFAULT;

ALTER TABLE GALADM.NOTIFICATION_TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.NOTIFICATION_TBX;

COMMENT ON TABLE GALADM.NOTIFICATION_TBX IS
   'RMT Notification class definition for asynchronous communication';
COMMENT ON TABLE GALADM.ORDER_TBX IS
   'RMT Orders for LINE to track status of Product Orders for a Plan Code';

COMMENT ON GALADM.ORDER_TBX (
 LOCATION_LEVEL_ID IS 'Location Level ID is PROCESS POINT ID or LINE ID of the station(s) that manage these orders',
 ORDER_STATUS_ID IS 'Link to ORDER_STATUS_TBX',
 HOLD_STATUS_ID IS 'Link to HOLD_STATUS_TBX' );

CREATE TABLE GALADM.PART_LOT_TBX (
  PART_SERIAL_NUMBER CHARACTER(30) NOT NULL,
  PART_NUMBER CHARACTER(30) NOT NULL,
  PART_NAME CHARACTER(32) NOT NULL,
  STATUS SMALLINT DEFAULT 0,
  STARTING_QUANTITY INTEGER DEFAULT 0,
  CURRENT_QUANTITY INTEGER DEFAULT 0,
  COMMENT VARCHAR(256),
  CREATE_TIMESTAMP TIMESTAMP,
  UPDATE_TIMESTAMP TIMESTAMP,
  CONSTRAINT PART_LOT_PK PRIMARY KEY
    (PART_SERIAL_NUMBER, PART_NAME, PART_NUMBER)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.PART_LOT_TBX
  DATA CAPTURE NONE
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.PART_LOT_TBX IS
   'RMT PartLot for tracking quantity of parts installed from a lot';

ALTER TABLE GALADM.PART_SPEC_TBX
  DATA CAPTURE NONE;

ALTER TABLE GALADM.PART_SPEC_TBX
  ALTER COLUMN COMMENT
    SET DATA TYPE VARCHAR(256);

ALTER TABLE GALADM.PART_SPEC_TBX
  DATA CAPTURE CHANGES;

REORG TABLE GALADM.PART_SPEC_TBX;

COMMENT ON TABLE GALADM.PART_SPEC_TBX IS
   'RMT PartSpec for LOT CONTROL to define Installed Part Spec';

CREATE TABLE GALADM.PLC_MEMORY_MAP_TBX (
  METRIC VARCHAR(160) NOT NULL,
  DATA_TYPE CHARACTER(30),
  MEMORY_BANK CHARACTER(30),
  START_ADDRESS CHARACTER(30),
  BIT CHARACTER(30),
  BYTE_ORDER CHARACTER(30),
  LENGTH INTEGER,
  CREATE_TIMESTAMP TIMESTAMP,
  UPDATE_TIMESTAMP TIMESTAMP,
  CONSTRAINT HMIN_MEM_PK PRIMARY KEY
    (METRIC)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.PLC_MEMORY_MAP_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.PLC_MEMORY_MAP_TBX IS
   'RMT PlcMemoryMapItem for LOT CONTROL to manage PLC Memory Map';

COMMENT ON TABLE GALADM.PRODUCT_PRIORITY_PLAN_TBX IS
   'RMT ProductPriorityPlan for LINE to manage sequence of product orders for a given tracking line';

COMMENT ON GALADM.PRODUCT_PRIORITY_PLAN_TBX (
 PLAN_STATUS_ID IS 'Link to PLAN_STATUS_TBX' );

DROP TRIGGER GALADM.HCMSEQUENCETR2;
DROP TRIGGER GALADM.HCMSEQUENCETR1;
DROP TABLE GALADM.HCM_PRODUCT_SEQUENCE_TBX;

CREATE TABLE GALADM.PRODUCT_SEQUENCE_TBX (
   PRODUCT_ID CHARACTER(17) NOT NULL,
   PROCESS_POINT_ID CHARACTER(16) NOT NULL,
   REFERENCE_TIMESTAMP TIMESTAMP NOT NULL,
   ASSOCIATE_NO CHARACTER(11),
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT PRODUCT_SEQUENCE_PK PRIMARY KEY
     (PRODUCT_ID,PROCESS_POINT_ID)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.PRODUCT_SEQUENCE_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.PRODUCT_SEQUENCE_TBX IS 'RMT ProductSequence';

CREATE TABLE GALADM.PRODUCT_SPEC_CODE_TBX (
  PRODUCT_SPEC_CODE CHARACTER(22) NOT NULL,
  PRODUCT_TYPE CHARACTER(10) NOT NULL,
  MODEL_YEAR_CODE CHARACTER(1),
  MODEL_CODE CHARACTER(3),
  MODEL_TYPE_CODE CHARACTER(3),
  MODEL_OPTION_CODE CHARACTER(3),
  EXT_COLOR_CODE CHARACTER(10),
  INT_COLOR_CODE CHARACTER(3),
  MODEL_YEAR_DESCRIPTION CHARACTER(4),
  CREATE_TIMESTAMP TIMESTAMP,
  UPDATE_TIMESTAMP TIMESTAMP,
  CONSTRAINT PRODUCT_SPEC_CODE_PK PRIMARY KEY
    (PRODUCT_SPEC_CODE,PRODUCT_TYPE)
)
  IN GALTBSDAT6
  INDEX IN GALTBSIDX2;

ALTER TABLE GALADM.PRODUCT_SPEC_CODE_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.PRODUCT_SPEC_CODE_TBX IS
   'RMT ProductTypeData for defining the different product types';

COMMENT ON TABLE GALADM.PRODUCT_TYPE_TBX IS
   'RMT ProductTypeData for defining the different product types';

CREATE TABLE GALADM.QUORUM_DETAIL_TBX (
   QUORUM_DATE DATE NOT NULL,
   QUORUM_ID INTEGER NOT NULL,
   QUORUM_SEQ INTEGER NOT NULL,
   KD_LOT CHARACTER(18),
   YMTO  CHARACTER(9),
   ENGINE_NUMBER CHARACTER(12),
   STATUS INTEGER DEFAULT 0 NOT NULL,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT QUORUM_DETAIL_PK PRIMARY KEY
     (QUORUM_DATE,QUORUM_ID,QUORUM_SEQ)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.QUORUM_DETAIL_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.QUORUM_DETAIL_TBX IS 'RMT ShippingQuorumDetail';

CREATE INDEX QUORUM_DETAIL_I1
  ON GALADM.QUORUM_DETAIL_TBX
    ( ENGINE_NUMBER, QUORUM_ID, QUORUM_DATE )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE TABLE GALADM.QUORUM_TBX (
   QUORUM_DATE DATE NOT NULL,
   QUORUM_ID INTEGER NOT NULL,
   TRAILER_ID INTEGER NOT NULL,
   TRAILER_ROW INTEGER NOT NULL,
   PALLET_TYPE VARCHAR(5) NOT NULL,
   QUORUM_SIZE INTEGER NOT NULL,
   STATUS INTEGER NOT NULL,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT QUORUM_PK PRIMARY KEY
     (QUORUM_DATE,QUORUM_ID)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.QUORUM_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.QUORUM_TBX IS 'RMT ShippingQuorum';

CREATE UNIQUE INDEX QUORUM_I1
  ON GALADM.QUORUM_TBX
    ( QUORUM_ID, QUORUM_DATE, TRAILER_ID )
  ALLOW REVERSE SCANS
  COMPRESS NO;

CREATE INDEX QUORUM_I2
  ON GALADM.QUORUM_TBX
    ( STATUS )
  ALLOW REVERSE SCANS
  COMPRESS NO;

DROP TRIGGER GALADM.HCMREQUIREDPARTSTR2;
DROP TRIGGER GALADM.HCMREQUIREDPARTSTR1;
DROP TABLE GALADM.HCM_REQUIRED_PARTS_TBX;

CREATE TABLE GALADM.REQUIRED_PARTS_TBX (
   PROCESS_POINT_ID CHARACTER(16) DEFAULT ' ' NOT NULL,
   MODEL_YEAR_CODE CHARACTER(1) DEFAULT ' ' NOT NULL,
   MODEL_CODE CHARACTER(3) DEFAULT ' ' NOT NULL,
   MODEL_TYPE_CODE CHARACTER(3) DEFAULT ' ' NOT NULL,
   MODEL_OPTION_CODE CHARACTER(3) DEFAULT ' ' NOT NULL,
   INT_COLOR_CODE CHARACTER(2) DEFAULT ' ' NOT NULL,
   EXT_COLOR_CODE CHARACTER(10) DEFAULT ' ' NOT NULL,
   PART_NAME CHARACTER(32) DEFAULT ' ' NOT NULL,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   SUB_ID CHARACTER(2),
   CONSTRAINT REQUIRED_PARTS_PK PRIMARY KEY
     (PROCESS_POINT_ID,MODEL_YEAR_CODE,MODEL_CODE,MODEL_TYPE_CODE,MODEL_OPTION_CODE,INT_COLOR_CODE,EXT_COLOR_CODE,PART_NAME)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.REQUIRED_PARTS_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.REQUIRED_PARTS_TBX IS 'RMT RequiredPart';

CREATE TABLE GALADM.SKIPPED_PRODUCT_TBX (
  PRODUCT_ID CHARACTER(17) NOT NULL,
  PROCESS_POINT_ID CHARACTER(16) NOT NULL,
  SUB_ID CHARACTER(2),
  PRODUCT_TYPE CHARACTER(10),
  KD_LOT_NUMBER CHARACTER(18),
  PRODUCTION_LOT CHARACTER(20),
  PRODUCT_SPEC_CODE CHARACTER(22),
  STATUS SMALLINT DEFAULT 0,
  SKIP_TIMESTAMP TIMESTAMP,
  DISABLE_TIMESTAMP TIMESTAMP,
  CREATE_TIMESTAMP TIMESTAMP,
  UPDATE_TIMESTAMP TIMESTAMP,
  CONSTRAINT SKIPPED_PRODUCT_PK PRIMARY KEY
    (PRODUCT_ID, PROCESS_POINT_ID)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.SKIPPED_PRODUCT_TBX
  DATA CAPTURE NONE
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.SKIPPED_PRODUCT_TBX IS
   'RMT SkippedProduct for tracking which products were skipped per plan';

CREATE TABLE GALADM.STANDARD_SCHEDULE_TBX (
   PLANT_CODE CHARACTER(4) DEFAULT '' NOT NULL,
   LINE_NO CHARACTER(2) DEFAULT '' NOT NULL,
   PROCESS_LOCATION CHARACTER(2) DEFAULT '' NOT NULL,
   DAY_OF_WEEK CHARACTER(3) NOT NULL,
   SHIFT CHARACTER(2) DEFAULT '' NOT NULL,
   PERIOD INTEGER DEFAULT 0 NOT NULL,
   PERIOD_LABEL CHARACTER(5),
   TYPE CHARACTER(3),
   PLAN CHARACTER(1),
   START_TIME TIMESTAMP,
   END_TIME TIMESTAMP,
   NEXT_DAY SMALLINT DEFAULT 0,
   CAPACITY INTEGER DEFAULT 0,
   CAPACITY_ON INTEGER DEFAULT 0,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT STANDARD_SCHEDULE_PK PRIMARY KEY
     (PLANT_CODE,LINE_NO,PROCESS_LOCATION,DAY_OF_WEEK,SHIFT,PERIOD)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.STANDARD_SCHEDULE_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.STANDARD_SCHEDULE_TBX IS 'RMT StandardSchedule';

COMMENT ON TABLE GALADM.SUB_PRODUCT_TBX IS
   'RMT SubProduct for subassembly products';

CREATE ALIAS GALADM.TEMPLATES_TBX FOR GALADM.HMIN_TEMPLATES_TBX;

COMMENT ON ALIAS GALADM.TEMPLATES_TBX IS
   'RMT alias to HMIN_TEMPLATES_TBX Template for LOT CONTROL to define Printing Templates';

CREATE TABLE GALADM.TRAILER_INFO_TBX (
   TRAILER_ID INTEGER NOT NULL,
   TRAILER_NUMBER VARCHAR(10),
   SCH_QTY INTEGER NOT NULL,
   ACT_QTY INTEGER DEFAULT 0 NOT NULL,
   STATUS INTEGER,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT TRAILER_INFO_PK PRIMARY KEY
     (TRAILER_ID)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.TRAILER_INFO_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.TRAILER_INFO_TBX IS 'RMT ShippingTrailerInfo';

CREATE TABLE GALADM.TRAILER_STATUS_TBX (
   TRAILER_ID INTEGER NOT NULL,
   STATUS INTEGER NOT NULL,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT TRAILER_STATUS_PK PRIMARY KEY
     (TRAILER_ID)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.TRAILER_STATUS_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.TRAILER_STATUS_TBX IS 'RMT ShippingTrailerStatus';

CREATE TABLE GALADM.VANNING_SCHEDULE_TBX (
   PRODUCTION_DATE DATE NOT NULL,
   VANNING_SEQ INTEGER NOT NULL,
   TRAILER_ID INTEGER,
   KD_LOT CHARACTER(18) NOT NULL,
   PRODUCTION_LOT CHARACTER(20) NOT NULL,
   YMTO CHARACTER(9) NOT NULL,
   SCH_QTY INTEGER NOT NULL,
   ACT_QTY INTEGER DEFAULT 0 NOT NULL,
   CREATE_TIMESTAMP TIMESTAMP,
   UPDATE_TIMESTAMP TIMESTAMP,
   CONSTRAINT VANNING_SCHEDULE_PK PRIMARY KEY
     (PRODUCTION_DATE,VANNING_SEQ)
)
  IN GALTBSREF12
  INDEX IN GALTBSIDX4;

ALTER TABLE GALADM.VANNING_SCHEDULE_TBX
  DATA CAPTURE CHANGES
  PCTFREE 0
  LOCKSIZE ROW
  APPEND OFF
  NOT VOLATILE;

COMMENT ON TABLE GALADM.VANNING_SCHEDULE_TBX IS 'RMT ShippingVanningSchedule';

CREATE ALIAS GALADM.HCM_VANNING_SCHEDULE_TBX FOR GALADM.VANNING_SCHEDULE_TBX;

COMMENT ON ALIAS GALADM.HCM_VANNING_SCHEDULE_TBX IS
   'RMT alias to VANNING_SCHEDULE_TBX';

CREATE ALIAS GALADM.WSBUILDS_TBX FOR GALADM.HNA_WSBUILDS_TBX;

COMMENT ON ALIAS GALADM.WSBUILDS_TBX IS
   'RMT alias to HNA_WSBUILDS_TBX WebStartBuild for Web Start to define build numbers';

CREATE ALIAS GALADM.WSCLIENTS_TBX FOR GALADM.HNA_WSCLIENTS_TBX;

COMMENT ON ALIAS GALADM.WSCLIENTS_TBX IS
   'RMT alias to HNA_WSCLIENTS_TBX WebStartClient for Web Start to define Clients';

CREATE ALIAS GALADM.WSDEFBUILDS_TBX FOR GALADM.HNA_WSDEFBUILDS_TBX;

COMMENT ON ALIAS GALADM.WSDEFBUILDS_TBX IS
   'RMT alias to HNA_WSDEFBUILDS_TBX WebStartDefaultBuild for Web start to define default builds per environment';

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.BLOCK_BUILD_RESULTS_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.BLOCK_BUILD_RESULTS_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.BLOCK_HISTORY_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.BLOCK_HISTORY_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.BLOCK_LOAD_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.BLOCK_LOAD_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.BLOCK_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.BLOCK_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.GAL198_HIST_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.GAL198_HIST_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.GTS_PRODUCT_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.GTS_PRODUCT_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.HEAD_BUILD_RESULTS_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.HEAD_BUILD_RESULTS_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.HEAD_HISTORY_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.HEAD_HISTORY_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.HEAD_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.HEAD_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.HOLD_PARM_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.HOLD_PARM_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.HOST_PRIORITY_PLAN_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.HOST_PRIORITY_PLAN_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.PART_LOT_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.PART_LOT_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.PRODUCT_SEQUENCE_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.PRODUCT_SEQUENCE_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.PRODUCT_SPEC_CODE_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.PRODUCT_SPEC_CODE_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.QUORUM_DETAIL_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.QUORUM_DETAIL_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.QUORUM_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.QUORUM_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.REQUIRED_PARTS_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.REQUIRED_PARTS_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.SKIPPED_PRODUCT_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.SKIPPED_PRODUCT_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.STANDARD_SCHEDULE_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.STANDARD_SCHEDULE_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.TRAILER_INFO_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.TRAILER_INFO_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.TRAILER_STATUS_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.TRAILER_STATUS_TBX TO GROUP GALQQA_S;

GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE GALADM.VANNING_SCHEDULE_TBX TO GROUP GALQQA_A;
GRANT SELECT ON TABLE GALADM.VANNING_SCHEDULE_TBX TO GROUP GALQQA_S;

--Need to rebuild dependent objects that were invalidated by the alters

DROP VIEW GALADM.HMIN_DIV_METRICS_DATE_VW;
DROP VIEW GALADM.HMIN_DIV_METRICS_SHIFT_VW;
DROP VIEW GALADM.HMIN_DIV_PLAN_DATE_VW;
DROP VIEW GALADM.HMIN_DIV_PLAN_SHIFT_VW;
DROP VIEW GALADM.HMIN_PP_METRICS_DATE_VW;
DROP VIEW GALADM.HMIN_PP_METRICS_SHIFT_VW;
DROP VIEW GALADM.HMIN_PLAN_DATE_VW;
DROP VIEW GALADM.HMIN_PLAN_SHIFT_VW;
DROP VIEW GALADM.HMIN_PLAN_VW;
DROP VIEW GALADM.HMIN_OFF_PP_DIV_VW;
DROP VIEW GALADM.HMIN_TRACKING_INVENTORY_VW;
DROP VIEW GALADM.HMIN_TRACKING_INVENTORY_REF_VW;
DROP FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC;
DROP FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_PP_FUNC;
--GALQDBQA ONLY
DROP SPECIFIC FUNCTION SQL080706080958100; --GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC;
DROP SPECIFIC FUNCTION SQL080706080958101; --GALADM.HMIN_GET_QUALITY_PP_LINE_FUNC;
DROP FUNCTION GALADM.HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC;
DROP SPECIFIC FUNCTION SQL080714222510801; --GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC;
DROP FUNCTION GALADM.HMIN_GET_OFF_PP_DIV_FUNC;
DROP SPECIFIC FUNCTION SQL080918184654700; --GALADM.HMIN_CALC_PLAN_FUNC;
DROP SPECIFIC FUNCTION SQL080918184616800; --GALADM.HMIN_CALC_PLAN_NOW_FUNC;

CREATE FUNCTION GALADM.HMIN_CALC_PLAN_NOW_FUNC(
	PROCESS_POINT_ID_IN VARCHAR(16),
  START_IN TIMESTAMP,
	END_IN TIMESTAMP)
	RETURNS DOUBLE
	NO EXTERNAL ACTION
------------------------------------------------------------------------
-- SQL Function HMIN_CALC_PLAN_NOW_FUNC
	-- PROCESS_POINT_ID_IN 
	-- START_IN 
	-- END_IN
	
-- This function is to calculate the Plan Qty Now for this process point (On or Off Type)
-- between the start and end timestamps
	
-- Alan Study
-- 20080918	
-- Initial Creation

------------------------------------------------------------------------
F1: BEGIN ATOMIC
	DECLARE PROCESS_POINT_TYPE_V INTEGER;
	DECLARE PLAN_V DOUBLE;

	--Get the process point type to determine how to calculate the plan
	SET PROCESS_POINT_TYPE_V = (SELECT PROCESS_POINT_TYPE
		FROM GALADM.GAL214TBX P
		WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN);
	
	--Process Point Type
	--1 = ON Process Point
	--2 = OFF Process Point
	--8 = OFF QICS Process Point
	--9 = ON QICS Process Point

	IF (PROCESS_POINT_TYPE_V=1 OR PROCESS_POINT_TYPE_V=9) THEN
		SET PLAN_V = (SELECT sum(
			case when S.PLAN = 'Y' 
				and S.START_TIMESTAMP <= current_timestamp 
				and current_timestamp >= S.END_TIMESTAMP 
			then S.CAPACITY_ON 
			when S.PLAN = 'Y' 
				and current timestamp >= S.START_TIMESTAMP 
				and current timestamp <= S.END_TIMESTAMP 
			then timestampdiff(2, char(current timestamp - S.START_TIMESTAMP)) * 
				(decimal(S.CAPACITY_ON,20,15) /
				(TIMESTAMPDIFF(2,char(S.END_TIMESTAMP-S.START_TIMESTAMP )))) 
			else 0 
			end) AS PLAN_QTY_NOW
			FROM galadm.GAL214TBX p left join galadm.GAL128TBX d on p.DIVISION_ID=d.DIVISION_ID 
				left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID 
				left join galadm.GAL226TBX s 
				on g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE 
					and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
			WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN 
			and S.START_TIMESTAMP >= START_IN 
			AND S.END_TIMESTAMP <= END_IN);
	END IF;
	IF (PROCESS_POINT_TYPE_V=2 OR PROCESS_POINT_TYPE_V=8) THEN
		SET PLAN_V = (SELECT sum( 
			case when S.PLAN = 'Y' 
				and S.START_TIMESTAMP <= current_timestamp 
				and current_timestamp >= S.END_TIMESTAMP 
			then S.CAPACITY 
			when S.PLAN = 'Y' 
				and current timestamp >= S.START_TIMESTAMP 
				and current timestamp <= S.END_TIMESTAMP 
			then timestampdiff(2, char(current timestamp - S.START_TIMESTAMP)) * 
				(decimal(S.CAPACITY,20,15) /
				(TIMESTAMPDIFF(2,char(S.END_TIMESTAMP-S.START_TIMESTAMP )))) 
			else 0 
			end) AS PLAN_QTY_NOW			
			FROM galadm.GAL214TBX p left join galadm.GAL128TBX d on p.DIVISION_ID=d.DIVISION_ID 
				left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID 
				left join galadm.GAL226TBX s 
				on g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE 
					and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
			WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN 
			and S.START_TIMESTAMP >= START_IN 
			AND S.END_TIMESTAMP <= END_IN);
	END IF;
	
	SET PLAN_V = COALESCE(PLAN_V,0);
	RETURN PLAN_V;
END;

COMMENT ON FUNCTION GALADM.HMIN_CALC_PLAN_NOW_FUNC IS
'Given a Process Point ID and start and end timestamp return the Plan as of the current time from the GAL226TBX';

GRANT EXECUTE ON FUNCTION GALADM.HMIN_CALC_PLAN_NOW_FUNC TO GROUP GALQQA_A;
GRANT EXECUTE ON FUNCTION GALADM.HMIN_CALC_PLAN_NOW_FUNC TO GROUP GALQQA_S;

CREATE FUNCTION GALADM.HMIN_CALC_PLAN_FUNC(
	PROCESS_POINT_ID_IN VARCHAR(16),
  START_IN TIMESTAMP,
	END_IN TIMESTAMP)
	RETURNS DOUBLE
	NO EXTERNAL ACTION
------------------------------------------------------------------------
-- SQL Function HMIN_CALC_PLAN_FUNC
	-- PROCESS_POINT_ID_IN 
	-- START_IN 
	-- END_IN
	
-- This function is to calculate the Plan Qty for this process point (On or Off Type)
-- between the start and end timestamps
	
-- Alan Study
-- 20080918	
-- Initial Creation

------------------------------------------------------------------------
F1: BEGIN ATOMIC
	DECLARE PROCESS_POINT_TYPE_V INTEGER;
	DECLARE PLAN_V DOUBLE;

	--Get the process point type to determine how to calculate the plan
	SET PROCESS_POINT_TYPE_V = (SELECT PROCESS_POINT_TYPE
		FROM GALADM.GAL214TBX P
		WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN);
	
	--Process Point Type
	--1 = ON Process Point
	--2 = OFF Process Point
	--8 = OFF QICS Process Point
	--9 = ON QICS Process Point

	IF (PROCESS_POINT_TYPE_V=1 OR PROCESS_POINT_TYPE_V=9) THEN
		SET PLAN_V = (SELECT sum(s.CAPACITY_ON) AS PLAN_QTY
			FROM galadm.GAL214TBX p left join galadm.GAL128TBX d on p.DIVISION_ID=d.DIVISION_ID 
				left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID 
				left join galadm.GAL226TBX s 
				on g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE 
					and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
			WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN 
			and S.START_TIMESTAMP >= START_IN 
			AND S.END_TIMESTAMP <= END_IN);
	END IF;
	IF (PROCESS_POINT_TYPE_V=2 OR PROCESS_POINT_TYPE_V=8) THEN
		SET PLAN_V = (SELECT sum(s.CAPACITY) AS PLAN_QTY
			FROM galadm.GAL214TBX p left join galadm.GAL128TBX d on p.DIVISION_ID=d.DIVISION_ID 
				left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID 
				left join galadm.GAL226TBX s 
				on g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE 
					and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
			WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN 
			and S.START_TIMESTAMP >= START_IN 
			AND S.END_TIMESTAMP <= END_IN);
	END IF;
	
	SET PLAN_V = COALESCE(PLAN_V,0);
	RETURN PLAN_V;
END;

COMMENT ON FUNCTION GALADM.HMIN_CALC_PLAN_FUNC IS
'Given a Process Point ID and start and end timestamp return the Plan from the GAL226TBX';

GRANT EXECUTE ON FUNCTION GALADM.HMIN_CALC_PLAN_FUNC TO GROUP GALQQA_A;
GRANT EXECUTE ON FUNCTION GALADM.HMIN_CALC_PLAN_FUNC TO GROUP GALQQA_S;

CREATE FUNCTION GALADM.HMIN_GET_OFF_PP_DIV_FUNC( 
	DIVISION_ID_IN VARCHAR(16) )
	RETURNS VARCHAR(16)
	SPECIFIC HMIN_GET_OFF_PP_DIV_FUNC
	NO EXTERNAL ACTION
	DETERMINISTIC
------------------------------------------------------------------------
-- SQL Function HMIN_GET_OFF_PP_DIV_FUNC
	
-- This function is to determine the process point id for Division OFF

-- Alan Study
-- 20080602	
-- Initial Creation

------------------------------------------------------------------------	
BEGIN ATOMIC
	DECLARE COMPONENT_ID_V VARCHAR(40); 
	DECLARE PROPERTY_KEY_V VARCHAR(40);
	DECLARE PROPERTY_VALUE_V VARCHAR(256);
	DECLARE PROCESS_POINT_ID_V VARCHAR(16);
	
	SET PROPERTY_KEY_V = 'OFF_PP_' || DIVISION_ID_IN;
	SET PROPERTY_VALUE_V = 'TRUE';
	--Get the First Record that matches in the property table
	SET COMPONENT_ID_V = (SELECT P.COMPONENT_ID 
		FROM GALADM.GAL489TBX P
		WHERE P.PROPERTY_KEY=PROPERTY_KEY_V
		AND UPPER(P.PROPERTY_VALUE)=UPPER(PROPERTY_VALUE_V)
		ORDER BY P.COMPONENT_ID
		FETCH FIRST 1 ROWS ONLY);
	IF (LENGTH(COMPONENT_ID_V)>5) THEN
		--Some process points have properties that start with prop_ so remove it
		IF (SUBSTR(COMPONENT_ID_V,1,5)='prop_') then
			SET COMPONENT_ID_V = RIGHT(COMPONENT_ID_V,LENGTH(COMPONENT_ID_V)-5);
		END IF;
	END IF;
	
	--Only return if it is a valid Process Point
	SET PROCESS_POINT_ID_V = (SELECT P.PROCESS_POINT_ID 
		FROM GALADM.GAL214TBX P 
		WHERE P.PROCESS_POINT_ID=COMPONENT_ID_V);
	
	RETURN PROCESS_POINT_ID_V;
END;

COMMENT ON FUNCTION GALADM.HMIN_GET_OFF_PP_DIV_FUNC IS 'Determine the process point id for Division OFF using GAL489TBX Property Key = OFF_PP_[DIVISION_ID_IN] and PROPERTY_VALUE = TRUE';

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_OFF_PP_DIV_FUNC TO GROUP GALQQA_A;
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_OFF_PP_DIV_FUNC TO GROUP GALQQA_S;

CREATE FUNCTION GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC ( PROCESS_POINT_ID_IN VARCHAR(16) )
  RETURNS DOUBLE
  SPECIFIC HMIN_GET_PP_ALL_SEQ_NUM_FUNC
  LANGUAGE SQL
  DETERMINISTIC
  NO EXTERNAL ACTION
  READS SQL DATA
  INHERIT SPECIAL REGISTERS
F1: BEGIN ATOMIC
   RETURN select (coalesce(d.SEQUENCE_NUMBER,0)+1)*1000000+(coalesce(l.LINE_SEQUENCE_NUMBER,0)+1)*1000+(coalesce(p.SEQUENCE_NUMBER,0)+1) ALL_SEQ_NUM
 from galadm.gal214tbx p
 left join galadm.gal195tbx l
 on p.LINE_ID=l.LINE_ID
 left JOIN GALADM.GAL128TBX D
 ON L.DIVISION_ID=D.DIVISION_ID
 left JOIN GALADM.GAL117TBX S
 ON D.SITE_NAME=S.SITE_NAME
 WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN;--   

END;

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC TO GROUP GALQQA_S;
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC TO GROUP GALQQA_A;

CREATE FUNCTION GALADM.HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC (
    LOCATION_LEVEL_ID_IN	VARCHAR(16),
    SECONDS_HOLD_IN	INTEGER )
  RETURNS VARCHAR(16)
  SPECIFIC HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC
  LANGUAGE SQL
  NOT DETERMINISTIC
  EXTERNAL ACTION
  READS SQL DATA
  CALLED ON NULL INPUT
  INHERIT SPECIAL REGISTERS
BEGIN ATOMIC
	RETURN (select t.PROCESS_POINT_ID from 
(select row_number() over (order by galadm.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(m.PROCESS_POINT_ID),M.PROCESS_POINT_ID) rownum, m.PROCESS_POINT_ID 
from GALADM.GAL214TBX m
where m.tracking_point_flag=1 and m.DIVISION_ID=CAST(LOCATION_LEVEL_ID_IN AS VARCHAR(16))
order by galadm.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(m.PROCESS_POINT_ID),M.PROCESS_POINT_ID) t
where t.rownum=(1+mod(int(MIDNIGHT_SECONDS(current_timestamp)/SECONDS_HOLD_IN),
(select count(*) from galadm.gal214tbx p where p.tracking_point_flag=1 and p.DIVISION_ID=CAST(LOCATION_LEVEL_ID_IN AS VARCHAR(16))))));
END;

COMMENT ON FUNCTION GALADM.HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC IS 'Return a Process Point ID for SECONDS_HOLD for every tracking point in the LOCATION_LEVEL_ID (It varies over time)';

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC TO GROUP GALQQA_S;
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC TO GROUP GALQQA_A;

CREATE FUNCTION GALADM.HMIN_GET_QUALITY_PP_LINE_FUNC ( LINE_ID_IN VARCHAR(16) )
  RETURNS VARCHAR(16)
  SPECIFIC HMIN_GET_QUALITY_PP_LINE_FUNC
  LANGUAGE SQL
  NOT DETERMINISTIC
  EXTERNAL ACTION
  READS SQL DATA
  INHERIT SPECIAL REGISTERS
BEGIN ATOMIC
	DECLARE COMPONENT_ID_V VARCHAR(40); --
	DECLARE PROPERTY_KEY_V VARCHAR(40);--
	DECLARE PROPERTY_VALUE_V VARCHAR(256);--
	DECLARE PROCESS_POINT_ID_V VARCHAR(16);--
	
	SET PROPERTY_KEY_V = 'QUALITY_PP_' || LINE_ID_IN;--
	SET PROPERTY_VALUE_V = 'TRUE';--
		SET COMPONENT_ID_V = (SELECT P.COMPONENT_ID 
		FROM GALADM.GAL489TBX P
		WHERE P.PROPERTY_KEY=PROPERTY_KEY_V
		AND UPPER(P.PROPERTY_VALUE)=UPPER(PROPERTY_VALUE_V)
		ORDER BY P.COMPONENT_ID
		FETCH FIRST 1 ROWS ONLY);--
	IF (LENGTH(COMPONENT_ID_V)>5) THEN
				IF (SUBSTR(COMPONENT_ID_V,1,5)='prop_') then
			SET COMPONENT_ID_V = RIGHT(COMPONENT_ID_V,LENGTH(COMPONENT_ID_V)-5);--
		END IF;--
	END IF;--
	
		SET PROCESS_POINT_ID_V = (SELECT P.PROCESS_POINT_ID 
		FROM GALADM.GAL214TBX P 
		WHERE P.PROCESS_POINT_ID=COMPONENT_ID_V);--
	
	RETURN PROCESS_POINT_ID_V;--
END;

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_QUALITY_PP_LINE_FUNC TO GROUP GALQQA_S;
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_QUALITY_PP_LINE_FUNC TO GROUP GALQQA_A;

CREATE FUNCTION GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC ( DIVISION_ID_IN VARCHAR(16) )
  RETURNS VARCHAR(16)
  SPECIFIC HMIN_GET_QUALITY_PP_DIV_FUNC
  LANGUAGE SQL
  NOT DETERMINISTIC
  EXTERNAL ACTION
  READS SQL DATA
  INHERIT SPECIAL REGISTERS
BEGIN ATOMIC
	DECLARE COMPONENT_ID_V VARCHAR(40); --
	DECLARE PROPERTY_KEY_V VARCHAR(40);--
	DECLARE PROPERTY_VALUE_V VARCHAR(256);--
	DECLARE PROCESS_POINT_ID_V VARCHAR(16);--
	
	SET PROPERTY_KEY_V = 'QUALITY_PP_' || DIVISION_ID_IN;--
	SET PROPERTY_VALUE_V = 'TRUE';--
		SET COMPONENT_ID_V = (SELECT P.COMPONENT_ID 
		FROM GALADM.GAL489TBX P
		WHERE P.PROPERTY_KEY=PROPERTY_KEY_V
		AND UPPER(P.PROPERTY_VALUE)=UPPER(PROPERTY_VALUE_V)
		ORDER BY P.COMPONENT_ID
		FETCH FIRST 1 ROWS ONLY);--
	IF (LENGTH(COMPONENT_ID_V)>5) THEN
		IF (SUBSTR(COMPONENT_ID_V,1,5)='prop_') then
			SET COMPONENT_ID_V = RIGHT(COMPONENT_ID_V,LENGTH(COMPONENT_ID_V)-5);--
		END IF;--
	END IF;--
	
	SET PROCESS_POINT_ID_V = (SELECT P.PROCESS_POINT_ID 
		FROM GALADM.GAL214TBX P 
		WHERE P.PROCESS_POINT_ID=COMPONENT_ID_V);--
	
	RETURN PROCESS_POINT_ID_V;--
END;

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC TO GROUP GALQQA_S;
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC TO GROUP GALQQA_A;

CREATE FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_PP_FUNC(
	DIVISION_ID_IN VARCHAR(16), 
	PP_ID_IN VARCHAR(16))
	RETURNS VARCHAR(16)
	SPECIFIC HMIN_GET_NEXT_TRACKING_PP_FUNC
	NO EXTERNAL ACTION
	DETERMINISTIC
------------------------------------------------------------------------
-- SQL Function HMIN_GET_NEXT_TRACKING_PP_FUNC
	
-- This function is to determine the next process point id that is a tracking point
-- This will loop for the division

-- Alan Study
-- 20090731	
-- Initial Creation

------------------------------------------------------------------------	
BEGIN ATOMIC
	DECLARE NEXT_PP_V VARCHAR(16);
	SET NEXT_PP_V = (select p.PROCESS_POINT_ID from galadm.gal214tbx p
			where p.tracking_point_flag=1 and p.DIVISION_ID=DIVISION_ID_IN
				and GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(p.PROCESS_POINT_ID)>(
					select GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(p.PROCESS_POINT_ID)
	 					from galadm.gal214tbx p
	 					where p.PROCESS_POINT_ID=PP_ID_IN)
			order by GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(p.PROCESS_POINT_ID)
			FETCH FIRST 1 ROWS ONLY
	);
	IF (NEXT_PP_V IS NULL) THEN
		SET NEXT_PP_V = (select p.PROCESS_POINT_ID from galadm.gal214tbx p
			where p.tracking_point_flag=1 and p.DIVISION_ID=DIVISION_ID_IN
			order by GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(p.PROCESS_POINT_ID)
			fetch first 1 rows only);
	END IF;
	RETURN NEXT_PP_V; 
END;

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_PP_FUNC TO GROUP GALQQA_A;
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_PP_FUNC TO GROUP GALQQA_S;

CREATE FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC(
	LINE_ID_IN VARCHAR(16))
	RETURNS VARCHAR(16)
	SPECIFIC HMIN_GET_NEXT_TRACKING_LINE_FUNC
	NO EXTERNAL ACTION
	DETERMINISTIC
------------------------------------------------------------------------
-- SQL Function HMIN_GET_NEXT_TRACKING_LINE_FUNC
	
-- This function is to determine the next line id that has a tracking point

-- Alan Study
-- 20080819	
-- Initial Creation

------------------------------------------------------------------------	
BEGIN ATOMIC
	RETURN (SELECT L.LINE_ID 
			FROM GALADM.GAL195TBX L
			WHERE GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(L.ENTRY_PROCESS_POINT_ID)>(
 				SELECT GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(P.ENTRY_PROCESS_POINT_ID)
 				FROM GALADM.GAL195TBX P
 				WHERE P.LINE_ID=LINE_ID_IN) AND (L.ENTRY_PROCESS_POINT_ID <>'' and L.ENTRY_PROCESS_POINT_ID IS NOT NULL)
			ORDER BY GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(L.ENTRY_PROCESS_POINT_ID)
			FETCH FIRST 1 ROWS ONLY
	);
END;

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC TO GROUP GALQQA_A;
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC TO GROUP GALQQA_S;

CREATE VIEW GALADM.HMIN_TRACKING_INVENTORY_REF_VW
    (TRACKING_SITE_NAME, TRACKING_SITE_DESC,TRACKING_DIVISION_ID,TRACKING_DIVISION_NAME,
		TRACKING_DIVISION_STD_INV,TRACKING_DIVISION_DESC, TRACKING_PLANT_NAME,TRACKING_LINE_ID,
		TRACKING_LINE_NAME,TRACKING_LINE_DESC,TRACKING_PROCESS_POINT_ID, TRACKING_PROCESS_POINT_NAME,
		TRACKING_PROCESS_POINT_DESC, TRACKING_SEQ, STD_INVENTORY, MINIMUM_INVENTORY, MAXIMUM_INVENTORY,
		CURRENT_INVENTORY, NEXT_TRACKING_LINE_ID, NEXT_TRACKING_LINE_NAME, NEXT_TRACKING_PP_NAME)
AS
SELECT 	trim(S.SITE_NAME), trim(S.SITE_DESCRIPTION),trim(D.DIVISION_ID), trim(D.DIVISION_NAME), 
				(select sum(LINE.std_inventory) from galadm.gal195tbx line where line.DIVISION_ID=d.DIVISION_ID AND LINE.ENTRY_PROCESS_POINT_ID IS NOT NULL AND LINE.ENTRY_PROCESS_POINT_ID <> ''),
				trim(D.DIVISION_DESCRIPTION), trim(D.PLANT_NAME),
				TRIM(L.LINE_ID), TRIM(L.LINE_NAME),	TRIM(L.LINE_DESCRIPTION), 
				TRIM(P.PROCESS_POINT_ID), TRIM(P.PROCESS_POINT_NAME),
				TRIM(P.PROCESS_POINT_DESCRIPTION),
				galadm.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(p.PROCESS_POINT_ID),
				L.STD_INVENTORY, L.MINIMUM_INVENTORY, L.MAXIMUM_INVENTORY,
				COALESCE((SELECT COUNT(DISTINCT F.PRODUCT_ID) FROM GALADM.GAL143TBX F WHERE F.TRACKING_STATUS=L.LINE_ID GROUP BY F.TRACKING_STATUS),0),
				GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC(L.LINE_ID),
				(SELECT N.LINE_NAME FROM GALADM.GAL195TBX N WHERE N.LINE_ID=GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC(L.LINE_ID)),
				(SELECT P.PROCESS_POINT_NAME FROM GALADM.GAL195TBX N LEFT JOIN GALADM.GAL214TBX P ON N.ENTRY_PROCESS_POINT_ID=P.PROCESS_POINT_ID 
				WHERE N.LINE_ID=GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC(L.LINE_ID))
				FROM GALADM.GAL117TBX S left join GALADM.GAL128TBX D on S.SITE_NAME = D.SITE_NAME
				left join GALADM.GAL195TBX L on D.DIVISION_ID = L.DIVISION_ID
				left join GALADM.GAL214TBX P on L.LINE_ID = P.LINE_ID                              
				WHERE P.TRACKING_POINT_FLAG=1
WITH NO ROW MOVEMENT;

COMMENT ON TABLE GALADM.HMIN_TRACKING_INVENTORY_REF_VW IS 'Tracking Inventory REF';

GRANT SELECT ON TABLE GALADM.HMIN_TRACKING_INVENTORY_REF_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_TRACKING_INVENTORY_REF_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_TRACKING_INVENTORY_VW
    (TRACKING_SITE_NAME, TRACKING_SITE_DESC,TRACKING_DIVISION_ID,TRACKING_DIVISION_NAME,
		TRACKING_DIVISION_STD_INV,TRACKING_DIVISION_DESC, TRACKING_PLANT_NAME,TRACKING_LINE_ID,
		TRACKING_LINE_NAME,TRACKING_LINE_DESC,TRACKING_PROCESS_POINT_ID, TRACKING_PROCESS_POINT_NAME,
		TRACKING_PROCESS_POINT_DESC, TRACKING_SEQ, STD_INVENTORY, MINIMUM_INVENTORY, MAXIMUM_INVENTORY,
		CURRENT_INVENTORY, DIFF, CURRENT_INV_STATUS, NEXT_TRACKING_LINE_ID, NEXT_TRACKING_LINE_NAME, NEXT_TRACKING_PP_NAME)
AS
SELECT 	TRACKING_SITE_NAME, TRACKING_SITE_DESC,TRACKING_DIVISION_ID,TRACKING_DIVISION_NAME,
		TRACKING_DIVISION_STD_INV,TRACKING_DIVISION_DESC, TRACKING_PLANT_NAME,TRACKING_LINE_ID,
		TRACKING_LINE_NAME,TRACKING_LINE_DESC,TRACKING_PROCESS_POINT_ID, TRACKING_PROCESS_POINT_NAME,
		TRACKING_PROCESS_POINT_DESC, TRACKING_SEQ, STD_INVENTORY, MINIMUM_INVENTORY, MAXIMUM_INVENTORY,
		CURRENT_INVENTORY, (CURRENT_INVENTORY - STD_INVENTORY) AS DIFF,
		CASE WHEN CURRENT_INVENTORY<MINIMUM_INVENTORY THEN -1
		WHEN CURRENT_INVENTORY>MAXIMUM_INVENTORY THEN 1
		ELSE 0 END AS CURRENT_INV_STATUS, NEXT_TRACKING_LINE_ID, 
		NEXT_TRACKING_LINE_NAME, NEXT_TRACKING_PP_NAME
	FROM GALADM.HMIN_TRACKING_INVENTORY_REF_VW
WITH NO ROW MOVEMENT;

COMMENT ON TABLE GALADM.HMIN_TRACKING_INVENTORY_VW IS 'Tracking Inventory';

GRANT SELECT ON TABLE GALADM.HMIN_TRACKING_INVENTORY_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_TRACKING_INVENTORY_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_OFF_PP_DIV_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION, PROCESS_POINT_ID, PP_SEQ_NUM)
AS
SELECT trim(T.SITE_NAME) AS SITE_NAME
,trim(T.PLANT_NAME) AS PLANT_NAME
,T.SEQUENCE_NUMBER AS DIV_SEQ_NUM
,trim(T.DIVISION_ID) AS DIVISION_ID
,trim(T.DIVISION_NAME) AS DIVISION_NAME
,trim(T.DIVISION_DESCRIPTION) AS DIVISION_DESCRIPTION
,GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC(T.DIVISION_ID) AS PROCESS_POINT_ID
,GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC(T.DIVISION_ID)) AS PP_SEQ_NUM
FROM GALADM.GAL128TBX T
WHERE GALADM.HMIN_GET_OFF_PP_DIV_FUNC(T.DIVISION_ID) IS NOT NULL;

COMMENT ON TABLE GALADM.HMIN_OFF_PP_DIV_VW IS 'The Off Process Points for the Division using the HMIN_GET_OFF_PP_DIV_FUNC';

GRANT SELECT ON TABLE GALADM.HMIN_OFF_PP_DIV_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_OFF_PP_DIV_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_PLAN_VW
    ( PROCESS_POINT_ID, TRACKING_POINT_FLAG, SCHEDULE_ID, PLAN_QTY, PLAN_QTY_NOW )
AS
SELECT P.PROCESS_POINT_ID, P.TRACKING_POINT_FLAG, S.SCHEDULE_ID
, GALADM.HMIN_CALC_PLAN_FUNC(P.PROCESS_POINT_ID,S.START_TIMESTAMP,S.END_TIMESTAMP) AS PLAN_QTY
, GALADM.HMIN_CALC_PLAN_NOW_FUNC(P.PROCESS_POINT_ID,S.START_TIMESTAMP,S.END_TIMESTAMP) AS PLAN_QTY_NOW
from galadm.GAL214TBX p left join galadm.GAL128TBX
d on p.DIVISION_ID=d.DIVISION_ID left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID left join galadm.GAL226TBX s on
g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION;

COMMENT ON TABLE GALADM.HMIN_PLAN_VW IS 'Plan_View';

GRANT SELECT ON TABLE GALADM.HMIN_PLAN_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_PLAN_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_PLAN_SHIFT_VW
    ( SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PP_SEQ_NUM, PROCESS_POINT_ID, PROCESS_POINT_NAME, PROCESS_POINT_DESCRIPTION
    , TRACKING_POINT_FLAG, PROCESS_POINT_TYPE, PRODUCTION_DATE, SHIFT, SHIFT_START_TIMESTAMP, SHIFT_END_TIMESTAMP, PLAN_QTY, PLAN_QTY_NOW )
AS
SELECT d.SITE_NAME, d.PLANT_NAME, d.SEQUENCE_NUMBER AS DIV_SEQ_NUM, d.DIVISION_ID, d.DIVISION_NAME, d.DIVISION_DESCRIPTION 
, GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(P.PROCESS_POINT_ID) AS PP_SEQ_NUM
, P.PROCESS_POINT_ID, P.PROCESS_POINT_NAME, P.PROCESS_POINT_DESCRIPTION
, P.TRACKING_POINT_FLAG, P.PROCESS_POINT_TYPE, S.PRODUCTION_DATE
, S.SHIFT,MIN(S.START_TIMESTAMP) AS SHIFT_START_TIMESTAMP,MAX(S.END_TIMESTAMP) AS SHIFT_END_TIMESTAMP
, GALADM.HMIN_CALC_PLAN_FUNC(P.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY
, GALADM.HMIN_CALC_PLAN_NOW_FUNC(P.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY_NOW
from galadm.GAL214TBX p left join galadm.GAL128TBX
d on p.DIVISION_ID=d.DIVISION_ID left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID left join galadm.GAL226TBX s on
g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
GROUP BY d.SITE_NAME, d.PLANT_NAME, d.SEQUENCE_NUMBER, d.DIVISION_ID, d.DIVISION_NAME, d.DIVISION_DESCRIPTION 
, P.PROCESS_POINT_ID, P.PROCESS_POINT_NAME, P.PROCESS_POINT_DESCRIPTION
, P.TRACKING_POINT_FLAG, P.PROCESS_POINT_TYPE, S.PRODUCTION_DATE, S.SHIFT;

COMMENT ON TABLE GALADM.HMIN_PLAN_SHIFT_VW IS 'All Process Points from GAL214TBX joined to all Production Date and Shifts in GAL226TBX with Plan and Plan Now calculated using function';

GRANT SELECT ON TABLE GALADM.HMIN_PLAN_SHIFT_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_PLAN_SHIFT_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_PLAN_DATE_VW
    (  SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PP_SEQ_NUM, PROCESS_POINT_ID, PROCESS_POINT_NAME, PROCESS_POINT_DESCRIPTION
    , TRACKING_POINT_FLAG, PROCESS_POINT_TYPE, PRODUCTION_DATE, DATE_START_TIMESTAMP, DATE_END_TIMESTAMP, PLAN_QTY, PLAN_QTY_NOW )
AS
SELECT d.SITE_NAME, d.PLANT_NAME, d.SEQUENCE_NUMBER AS DIV_SEQ_NUM, d.DIVISION_ID, d.DIVISION_NAME, d.DIVISION_DESCRIPTION 
, GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(P.PROCESS_POINT_ID) AS PP_SEQ_NUM
, P.PROCESS_POINT_ID, P.PROCESS_POINT_NAME, P.PROCESS_POINT_DESCRIPTION
, P.TRACKING_POINT_FLAG, P.PROCESS_POINT_TYPE, S.PRODUCTION_DATE
,MIN(S.START_TIMESTAMP) AS DATE_START_TIMESTAMP,MAX(S.END_TIMESTAMP) AS DATE_END_TIMESTAMP
, GALADM.HMIN_CALC_PLAN_FUNC(P.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY
, GALADM.HMIN_CALC_PLAN_NOW_FUNC(P.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY_NOW
from galadm.GAL214TBX p left join galadm.GAL128TBX
d on p.DIVISION_ID=d.DIVISION_ID left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID left join galadm.GAL226TBX s on
g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
GROUP BY d.SITE_NAME, d.PLANT_NAME, d.SEQUENCE_NUMBER, d.DIVISION_ID, d.DIVISION_NAME, d.DIVISION_DESCRIPTION 
, P.PROCESS_POINT_ID, P.PROCESS_POINT_NAME, P.PROCESS_POINT_DESCRIPTION
, P.TRACKING_POINT_FLAG, P.PROCESS_POINT_TYPE, S.PRODUCTION_DATE;

COMMENT ON TABLE GALADM.HMIN_PLAN_DATE_VW IS 'All Process Points from GAL214TBX joined to all Production Dates in GAL226TBX with Plan and Plan Now calculated using function';

GRANT SELECT ON TABLE GALADM.HMIN_PLAN_DATE_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_PLAN_DATE_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_PP_METRICS_SHIFT_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PP_SEQ_NUM, PROCESS_POINT_ID, PROCESS_POINT_NAME, PROCESS_POINT_DESCRIPTION
    , TRACKING_POINT_FLAG, PROCESS_POINT_TYPE
    , PRODUCTION_DATE, SHIFT, SHIFT_START_TIMESTAMP, SHIFT_END_TIMESTAMP 
    , PLAN_QTY, PLAN_QTY_NOW
    , PP_METRICS_ID, FIRST_PRODUCT_ID, LAST_PRODUCT_ID
    , INSPECTED, PLAN_ACTUAL_DIFF
    , DEFECTS_PRODUCT_ENTRY, DEFECTS_PRODUCT, DEFECTS_ENTRY, DEFECTS
    , OUTSTANDING_PRODUCT_ENTRY, OUTSTANDING_PRODUCT, REPAIRS_PRODUCT_ENTRY, SCRAP
    , DIRECT_PASSED, RPU_ENTRY, RPU, RSS_ENTRY, RSS, SS_ENTRY, SS)
AS
SELECT  PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION 
, PLAN.PP_SEQ_NUM, PLAN.PROCESS_POINT_ID, PLAN.PROCESS_POINT_NAME, PLAN.PROCESS_POINT_DESCRIPTION
, PLAN.TRACKING_POINT_FLAG, PLAN.PROCESS_POINT_TYPE
, PLAN.PRODUCTION_DATE, PLAN.SHIFT, PLAN.SHIFT_START_TIMESTAMP, PLAN.SHIFT_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
, COALESCE(METRICS.PP_METRICS_ID,0), COALESCE(METRICS.FIRST_PRODUCT_ID,''), COALESCE(METRICS.LAST_PRODUCT_ID,'')
, COALESCE(METRICS.INSPECTED,0), (COALESCE(METRICS.INSPECTED,0)-PLAN.PLAN_QTY_NOW) AS PLAN_ACTUAL_DIFF
, COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0), COALESCE(METRICS.DEFECTS_PRODUCT,0), COALESCE(METRICS.DEFECTS_ENTRY,0), COALESCE(METRICS.DEFECTS,0)
, COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0), COALESCE(METRICS.OUTSTANDING_PRODUCT,0)
, COALESCE(METRICS.REPAIRS_PRODUCT_ENTRY,0), COALESCE(METRICS.SCRAP,0)
, (COALESCE(METRICS.INSPECTED,0) - COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DIRECT_PASSED
, CASE WHEN METRICS.INSPECTED<>0 THEN (COALESCE(METRICS.DEFECTS_ENTRY,0) / METRICS.INSPECTED) ELSE 0 END AS RPU_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN (COALESCE(METRICS.DEFECTS,0) / METRICS.INSPECTED) ELSE 0 END AS RPU  
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) / METRICS.INSPECTED) ELSE 0 END AS RSS_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.DEFECTS_PRODUCT,0)) / METRICS.INSPECTED) ELSE 0 END AS RSS
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0)) / METRICS.INSPECTED) ELSE 0 END AS SS_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.OUTSTANDING_PRODUCT,0)) / METRICS.INSPECTED) ELSE 0 END AS SS
FROM GALADM.HMIN_PLAN_SHIFT_VW PLAN LEFT JOIN GALADM.HMIN_PP_METRICS_TBX METRICS ON PLAN.PROCESS_POINT_ID=METRICS.PROCESS_POINT_ID
AND PLAN.PRODUCTION_DATE=METRICS.PRODUCTION_DATE AND PLAN.SHIFT=METRICS.SHIFT
WITH NO ROW MOVEMENT;

COMMENT ON TABLE GALADM.HMIN_PP_METRICS_SHIFT_VW IS 'Plan, Actual and Quality Metrics calculated for all Process Points in GAL214TBX for all production dates and shifts in GAL226TBX';

GRANT SELECT ON TABLE GALADM.HMIN_PP_METRICS_SHIFT_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_PP_METRICS_SHIFT_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_PP_METRICS_DATE_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PP_SEQ_NUM, PROCESS_POINT_ID, PROCESS_POINT_NAME, PROCESS_POINT_DESCRIPTION
    , TRACKING_POINT_FLAG, PROCESS_POINT_TYPE
    , PRODUCTION_DATE, DATE_START_TIMESTAMP, DATE_END_TIMESTAMP 
    , PLAN_QTY, PLAN_QTY_NOW
    , INSPECTED, PLAN_ACTUAL_DIFF
    , DEFECTS_PRODUCT_ENTRY, DEFECTS_PRODUCT, DEFECTS_ENTRY, DEFECTS
    , OUTSTANDING_PRODUCT_ENTRY, OUTSTANDING_PRODUCT, REPAIRS_PRODUCT_ENTRY, SCRAP
    , DIRECT_PASSED, RPU_ENTRY, RPU, RSS_ENTRY, RSS, SS_ENTRY, SS)
AS
SELECT  PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION 
, PLAN.PP_SEQ_NUM, PLAN.PROCESS_POINT_ID, PLAN.PROCESS_POINT_NAME, PLAN.PROCESS_POINT_DESCRIPTION
, PLAN.TRACKING_POINT_FLAG, PLAN.PROCESS_POINT_TYPE
, PLAN.PRODUCTION_DATE, PLAN.DATE_START_TIMESTAMP, PLAN.DATE_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
, SUM(COALESCE(METRICS.INSPECTED,0)) AS INSPECTED, (SUM(COALESCE(METRICS.INSPECTED,0))-PLAN.PLAN_QTY_NOW) AS PLAN_ACTUAL_DIFF
, SUM(COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DEFECTS_PRODUCT_ENTRY, SUM(COALESCE(METRICS.DEFECTS_PRODUCT,0)) AS DEFECTS_PRODUCT, SUM(COALESCE(METRICS.DEFECTS_ENTRY,0)) AS DEFECTS_ENTRY, SUM(COALESCE(METRICS.DEFECTS,0)) AS DEFECTS
, SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0)) AS OUTSTANDING_PRODUCT_ENTRY, SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT,0)) AS OUTSTANDING_PRODUCT
, SUM(COALESCE(METRICS.REPAIRS_PRODUCT_ENTRY,0)) AS REPAIRS_PRODUCT_ENTRY, SUM(COALESCE(METRICS.SCRAP,0)) AS SCRAP
, SUM(COALESCE(METRICS.INSPECTED,0) - COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DIRECT_PASSED
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN (SUM(COALESCE(METRICS.DEFECTS_ENTRY,0)) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RPU_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN (SUM(COALESCE(METRICS.DEFECTS,0)) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RPU  
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RSS_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.DEFECTS_PRODUCT,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RSS
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS SS_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS SS
FROM GALADM.HMIN_PLAN_DATE_VW PLAN LEFT JOIN GALADM.HMIN_PP_METRICS_TBX METRICS ON PLAN.PROCESS_POINT_ID=METRICS.PROCESS_POINT_ID
AND PLAN.PRODUCTION_DATE=METRICS.PRODUCTION_DATE
GROUP BY PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION 
, PLAN.PP_SEQ_NUM, PLAN.PROCESS_POINT_ID, PLAN.PROCESS_POINT_NAME, PLAN.PROCESS_POINT_DESCRIPTION
, PLAN.TRACKING_POINT_FLAG, PLAN.PROCESS_POINT_TYPE, PLAN.PRODUCTION_DATE, PLAN.DATE_START_TIMESTAMP, PLAN.DATE_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
WITH NO ROW MOVEMENT;

COMMENT ON TABLE GALADM.HMIN_PP_METRICS_DATE_VW IS 'Plan, Actual and Quality Metrics calculated for all Process Points in GAL214TBX for all production dates in GAL226TBX';

GRANT SELECT ON TABLE GALADM.HMIN_PP_METRICS_DATE_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_PP_METRICS_DATE_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_DIV_PLAN_SHIFT_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PROCESS_POINT_ID, PP_SEQ_NUM, PRODUCTION_DATE, SHIFT, SHIFT_START_TIMESTAMP, SHIFT_END_TIMESTAMP, PLAN_QTY, PLAN_QTY_NOW )
AS
SELECT DIV.SITE_NAME, DIV.PLANT_NAME, DIV.DIV_SEQ_NUM, DIV.DIVISION_ID, DIV.DIVISION_NAME, DIV.DIVISION_DESCRIPTION
, DIV.PROCESS_POINT_ID, DIV.PP_SEQ_NUM, S.PRODUCTION_DATE
,S.SHIFT,MIN(S.START_TIMESTAMP) AS SHIFT_START_TIMESTAMP,MAX(S.END_TIMESTAMP) AS SHIFT_END_TIMESTAMP
, GALADM.HMIN_CALC_PLAN_FUNC(DIV.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY
, GALADM.HMIN_CALC_PLAN_NOW_FUNC(DIV.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY_NOW
from GALADM.HMIN_OFF_PP_DIV_VW DIV 
left join galadm.gal238tbx g on DIV.DIVISION_ID = g.DIVISION_ID left join galadm.GAL226TBX s on
g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
GROUP BY DIV.SITE_NAME, DIV.PLANT_NAME, DIV.DIV_SEQ_NUM, DIV.DIVISION_ID, DIV.DIVISION_NAME, DIV.DIVISION_DESCRIPTION
, DIV.PROCESS_POINT_ID,DIV.PP_SEQ_NUM,S.PRODUCTION_DATE, S.SHIFT;

COMMENT ON TABLE GALADM.HMIN_DIV_PLAN_SHIFT_VW IS 'Div OFF Process Points using HMIN_OFF_PP_DIV_VW joined to all Production Date and Shifts in GAL226TBX with Plan and Plan Now calculated using function';

GRANT SELECT ON TABLE GALADM.HMIN_DIV_PLAN_SHIFT_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_DIV_PLAN_SHIFT_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_DIV_PLAN_DATE_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PROCESS_POINT_ID, PP_SEQ_NUM, PRODUCTION_DATE, DATE_START_TIMESTAMP, DATE_END_TIMESTAMP, PLAN_QTY, PLAN_QTY_NOW )
AS
SELECT DIV.SITE_NAME, DIV.PLANT_NAME, DIV.DIV_SEQ_NUM, DIV.DIVISION_ID, DIV.DIVISION_NAME, DIV.DIVISION_DESCRIPTION
, DIV.PROCESS_POINT_ID, DIV.PP_SEQ_NUM, S.PRODUCTION_DATE
, MIN(S.START_TIMESTAMP) AS DATE_START_TIMESTAMP,MAX(S.END_TIMESTAMP) AS DATE_END_TIMESTAMP
, GALADM.HMIN_CALC_PLAN_FUNC(DIV.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY
, GALADM.HMIN_CALC_PLAN_NOW_FUNC(DIV.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY_NOW
from GALADM.HMIN_OFF_PP_DIV_VW DIV 
left join galadm.gal238tbx g on DIV.DIVISION_ID = g.DIVISION_ID left join galadm.GAL226TBX s on
g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
GROUP BY DIV.SITE_NAME, DIV.PLANT_NAME, DIV.DIV_SEQ_NUM, DIV.DIVISION_ID, DIV.DIVISION_NAME, DIV.DIVISION_DESCRIPTION
, DIV.PROCESS_POINT_ID,DIV.PP_SEQ_NUM,S.PRODUCTION_DATE;

COMMENT ON TABLE GALADM.HMIN_DIV_PLAN_DATE_VW IS 'Div OFF Process Points using HMIN_OFF_PP_DIV_VW joined to all Production Date in GAL226TBX with Plan and Plan Now calculated using function';

GRANT SELECT ON TABLE GALADM.HMIN_DIV_PLAN_DATE_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_DIV_PLAN_DATE_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_DIV_METRICS_SHIFT_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION , PROCESS_POINT_ID, PP_SEQ_NUM
    , PRODUCTION_DATE, SHIFT, SHIFT_START_TIMESTAMP, SHIFT_END_TIMESTAMP 
    , PLAN_QTY, PLAN_QTY_NOW, PP_METRICS_ID, FIRST_PRODUCTION_ID, LAST_PRODUCTION_ID
    , INSPECTED, PLAN_ACTUAL_DIFF
    , DEFECTS_PRODUCT_ENTRY, DEFECTS_PRODUCT, DEFECTS_ENTRY, DEFECTS
    , OUTSTANDING_PRODUCT_ENTRY, OUTSTANDING_PRODUCT, REPAIRS_PRODUCT_ENTRY, SCRAP
    , DIRECT_PASSED, RPU_ENTRY, RPU, RSS_ENTRY, RSS, SS_ENTRY, SS)
AS
SELECT PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION
, PLAN.PROCESS_POINT_ID, PLAN.PP_SEQ_NUM, PLAN.PRODUCTION_DATE, PLAN.SHIFT, PLAN.SHIFT_START_TIMESTAMP, PLAN.SHIFT_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
, COALESCE(METRICS.PP_METRICS_ID,0), COALESCE(METRICS.FIRST_PRODUCT_ID,''), COALESCE(METRICS.LAST_PRODUCT_ID,'')
, COALESCE(METRICS.INSPECTED,0), (COALESCE(METRICS.INSPECTED,0)-PLAN.PLAN_QTY_NOW) AS PLAN_ACTUAL_DIFF
, COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0), COALESCE(METRICS.DEFECTS_PRODUCT,0), COALESCE(METRICS.DEFECTS_ENTRY,0), COALESCE(METRICS.DEFECTS,0)
, COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0), COALESCE(METRICS.OUTSTANDING_PRODUCT,0)
, COALESCE(METRICS.REPAIRS_PRODUCT_ENTRY,0), COALESCE(METRICS.SCRAP,0)
, (COALESCE(METRICS.INSPECTED,0) - COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DIRECT_PASSED
, CASE WHEN METRICS.INSPECTED<>0 THEN (COALESCE(METRICS.DEFECTS_ENTRY,0) / METRICS.INSPECTED) ELSE 0 END AS RPU_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN (COALESCE(METRICS.DEFECTS_ENTRY,0) / METRICS.INSPECTED) ELSE 0 END AS RPU  
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) / METRICS.INSPECTED) ELSE 0 END AS RSS_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.DEFECTS_PRODUCT,0)) / METRICS.INSPECTED) ELSE 0 END AS RSS
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0)) / METRICS.INSPECTED) ELSE 0 END AS SS_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.OUTSTANDING_PRODUCT,0)) / METRICS.INSPECTED) ELSE 0 END AS SS
FROM GALADM.HMIN_DIV_PLAN_SHIFT_VW PLAN LEFT JOIN GALADM.HMIN_PP_METRICS_TBX METRICS ON PLAN.PROCESS_POINT_ID=METRICS.PROCESS_POINT_ID
AND PLAN.PRODUCTION_DATE=METRICS.PRODUCTION_DATE AND PLAN.SHIFT=METRICS.SHIFT
WITH NO ROW MOVEMENT;

COMMENT ON TABLE GALADM.HMIN_DIV_METRICS_SHIFT_VW IS 'Plan, Actual and Quality Metrics calculated for all Process Points in GAL214TBX for all production dates in GAL226TBX';

GRANT SELECT ON TABLE GALADM.HMIN_DIV_METRICS_SHIFT_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_DIV_METRICS_SHIFT_VW TO GROUP GALQQA_A;

CREATE VIEW GALADM.HMIN_DIV_METRICS_DATE_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION , PROCESS_POINT_ID, PP_SEQ_NUM
    , PRODUCTION_DATE, DATE_START_TIMESTAMP, DATE_END_TIMESTAMP 
    , PLAN_QTY, PLAN_QTY_NOW
    , INSPECTED, PLAN_ACTUAL_DIFF
    , DEFECTS_PRODUCT_ENTRY, DEFECTS_PRODUCT, DEFECTS_ENTRY, DEFECTS
    , OUTSTANDING_PRODUCT_ENTRY, OUTSTANDING_PRODUCT, REPAIRS_PRODUCT_ENTRY, SCRAP
    , DIRECT_PASSED, RPU_ENTRY, RPU, RSS_ENTRY, RSS, SS_ENTRY, SS)
AS
SELECT  PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION, PLAN.PROCESS_POINT_ID, PLAN.PP_SEQ_NUM
, PLAN.PRODUCTION_DATE, PLAN.DATE_START_TIMESTAMP, PLAN.DATE_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
, SUM(COALESCE(METRICS.INSPECTED,0)) AS INSPECTED, (SUM(COALESCE(METRICS.INSPECTED,0))-PLAN.PLAN_QTY_NOW) AS PLAN_ACTUAL_DIFF
, SUM(COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DEFECTS_PRODUCT_ENTRY, SUM(COALESCE(METRICS.DEFECTS_PRODUCT,0)) AS DEFECTS_PRODUCT, SUM(COALESCE(METRICS.DEFECTS_ENTRY,0)) AS DEFECTS_ENTRY, SUM(COALESCE(METRICS.DEFECTS,0)) AS DEFECTS
, SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0)) AS OUTSTANDING_PRODUCT_ENTRY, SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT,0)) AS OUTSTANDING_PRODUCT
, SUM(COALESCE(METRICS.REPAIRS_PRODUCT_ENTRY,0)) AS REPAIRS_PRODUCT_ENTRY, SUM(COALESCE(METRICS.SCRAP,0)) AS SCRAP
, SUM(COALESCE(METRICS.INSPECTED,0) - COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DIRECT_PASSED
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN (SUM(COALESCE(METRICS.DEFECTS_ENTRY,0)) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RPU_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN (SUM(COALESCE(METRICS.DEFECTS_ENTRY,0)) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RPU  
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RSS_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.DEFECTS_PRODUCT,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RSS
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS SS_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS SS
FROM GALADM.HMIN_DIV_PLAN_DATE_VW PLAN LEFT JOIN GALADM.HMIN_PP_METRICS_TBX METRICS ON PLAN.PROCESS_POINT_ID=METRICS.PROCESS_POINT_ID
AND PLAN.PRODUCTION_DATE=METRICS.PRODUCTION_DATE
GROUP BY PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION, PLAN.PROCESS_POINT_ID, PLAN.PP_SEQ_NUM
, PLAN.PRODUCTION_DATE, PLAN.DATE_START_TIMESTAMP, PLAN.DATE_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
WITH NO ROW MOVEMENT;

COMMENT ON TABLE GALADM.HMIN_DIV_METRICS_DATE_VW IS 'Plan, Actual and Quality Metrics calculated for all Divisions and production dates in HMIN_DIV_PLAN_DATE_VW';

GRANT SELECT ON TABLE GALADM.HMIN_DIV_METRICS_DATE_VW TO GROUP GALQQA_S;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_DIV_METRICS_DATE_VW TO GROUP GALQQA_A;

DROP FUNCTION GALADM.HMIN_GET_AF_OFF_VQ_SHIP_INV_FUNC;

CREATE FUNCTION GALADM.HMIN_GET_AF_OFF_VQ_SHIP_INV_FUNC(
	END_IN TIMESTAMP  )
	RETURNS BIGINT
	SPECIFIC HMIN_GET_AF_OFF_VQ_SHIP_INV_FUNC
	NO EXTERNAL ACTION
------------------------------------------------------------------------
-- SQL Function HMIN_GET_AF_OFF_VQ_SHIP_INV_FUNC
	
-- This function is to determine the number of VINS between AF_OFF and VQ_SHIP
-- as of the END_IN date

-- Alan Study
-- 20080606	
-- Initial Creation
-- This function has LINE57, LINE58, PP10088, PP10096 HARD CODED!!!!
-- Need to figure out a way to remove this hard coding.

------------------------------------------------------------------------	
BEGIN ATOMIC
	DECLARE INV BIGINT;

	SET INV = (select
				count(distinct Product.product_id) as AF_OFF_VQ_SHIP_INV
				from
				GALADM.gal215tbx ProduCt 
				INNER JOIN GALADM.gal143tbx Frame 
				 ON Product.product_id = Frame.product_id
				LEFT JOIN GALADM.GAL177TBX Repair
				 ON Frame.PRODUCT_ID=Repair.PRODUCT_ID
				where Frame.tracking_status != 'LINE57'
				  and Frame.tracking_status != 'LINE58'
				  and Product.process_point_id = 'PP10088'
				  and Product.product_id in
			    (select AF_OFF.product_id
			      from GALADM.gal215tbx AF_OFF
			      where AF_OFF.process_point_id = 'PP10088'
					 AND AF_OFF.ACTUAL_TIMESTAMP <= END_IN
			      except
			      select VQ_SHIP.product_id
			      from GALADM.gal215tbx VQ_SHIP
			      where process_point_id = 'PP10096'
					 AND VQ_SHIP.ACTUAL_TIMESTAMP <= END_IN));				
	RETURN INV;
END;

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_AF_OFF_VQ_SHIP_INV_FUNC TO GROUP GALQQA_A;
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_AF_OFF_VQ_SHIP_INV_FUNC TO GROUP GALQQA_S;
