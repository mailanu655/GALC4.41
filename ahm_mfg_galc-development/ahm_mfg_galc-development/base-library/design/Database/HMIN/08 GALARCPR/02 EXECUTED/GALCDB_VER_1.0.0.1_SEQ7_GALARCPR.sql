-- <ScriptOptions statementTerminator="@" />
DROP PROCEDURE GALADM.HMIN_SWAT_TRANSFER_PROC@
DROP TRIGGER GALADM.HMIN_MEAS_TR4@
DROP PROCEDURE GALADM.HMIN_SWAT_U_PROC@
DROP PROCEDURE GALADM.HMIN_SWAT_I_PROC@

CREATE PROCEDURE GALADM.HMIN_SWAT_I_PROC (
	IN COLLECT_TIMESTAMP_IN TIMESTAMP,
	IN PLANT_CODE_IN VARCHAR(3),
	IN MACHINE_NO_IN VARCHAR(1),
	IN VIN_IN VARCHAR(17),
	OUT SWAT_ID_OUT BIGINT)
	 SPECIFIC HMIN_SWAT_I_PROC
     RESULT SETS 0
     LANGUAGE SQL
		 MODIFIES SQL DATA
------------------------------------------------------------------------
-- SQL Stored Procedure HMIN_SWAT_I_PROC
	-- COLLECT_TIMESTAMP_IN 
	-- PLANT_CODE_IN
	-- MACHINE_NO_IN
	-- VIN_IN
	-- SWAT_ID_OUT

-- This function is to make sure that a record exists in the HMIN_SWAT_TBX
-- For the given COLLECT_TIMESTAMP AND VIN and returns the ID of that record

-- Alan Study
-- 20080923	
-- Initial Creation

------------------------------------------------------------------------
P1: BEGIN
	IF (COLLECT_TIMESTAMP_IN IS NULL OR PLANT_CODE_IN IS NULL OR MACHINE_NO_IN IS NULL OR VIN_IN IS NULL) THEN
		-- If any input parameters are null then just exit
		RETURN;--
	END IF;--
	
	-- Find the record for this vin and timestamp
  	SELECT T.SWAT_ID
		INTO SWAT_ID_OUT
		FROM GALADM.HMIN_SWAT_TBX T
		WHERE T.COLLECT_TIMESTAMP = COLLECT_TIMESTAMP_IN
		 AND T.VIN = VIN_IN
		WITH RR;--
		 		 	
	IF SWAT_ID_OUT IS NULL THEN 
		-- If no record found then get new id and create record
		SET SWAT_ID_OUT = GALADM.HMIN_ID_FUNC();--								
		INSERT INTO GALADM.HMIN_SWAT_TBX
			(SWAT_ID,COLLECT_TIMESTAMP,PLANT_CODE,MACHINE_NO,VIN)
		VALUES
			(SWAT_ID_OUT,COLLECT_TIMESTAMP_IN,PLANT_CODE_IN,MACHINE_NO_IN,VIN_IN);--
	END IF;--
END P1@

COMMENT ON SPECIFIC PROCEDURE GALADM.HMIN_SWAT_I_PROC IS 'Makes sure a record exists in the HMIN_SWAT_TBX for the given COLLECT_TIMESTAMP AND VIN and returns the ID of that record'@

GRANT EXECUTE ON PROCEDURE GALADM.HMIN_SWAT_I_PROC TO GROUP GALAPR_A@
GRANT EXECUTE ON PROCEDURE GALADM.HMIN_SWAT_I_PROC TO GROUP GALAPR_S@

CREATE PROCEDURE GALADM.HMIN_SWAT_U_PROC (
	IN PRODUCT_ID_IN VARCHAR(17),
	IN PART_NAME_IN VARCHAR(32),
	IN MEASUREMENT_VALUE_IN DOUBLE,
	IN MEASUREMENT_STATUS_IN INTEGER,
	IN ACTUAL_TIMESTAMP_IN TIMESTAMP)
	 SPECIFIC HMIN_SWAT_U_PROC
	 RESULT SETS 0
     LANGUAGE SQL
		 MODIFIES SQL DATA
------------------------------------------------------------------------
-- SQL Stored Procedure HMIN_SWAT_U_PROC
	-- PRODUCT_ID_IN
	-- PART_NAME_IN
	-- MEASUREMENT_VALUE_IN
	-- ACTUAL_TIMESTAMP_IN
	
-- This function is to updated the HMIN_SWAT_TBX
-- for every measurement attempt that is a SWAT Part per the GAL489TBX Property Table with Component_ID=SWAT

-- Alan Study
-- 20081009	
-- Initial Creation

------------------------------------------------------------------------
P1: BEGIN
	DECLARE SQLCODE INTEGER;--	
	DECLARE SWAT_COLUMN_V VARCHAR(256);--
	DECLARE SWAT_TYPE_V VARCHAR(64);--
	DECLARE MACHINE_NO_V VARCHAR(1);--
	DECLARE PLANT_CODE_V VARCHAR(3);--
	DECLARE SWAT_ID_V BIGINT;--
	DECLARE COLUMNS_UPDATED_V INTEGER;--
	DECLARE NEED_UPDATED_V INTEGER;--
	DECLARE UPDATE_SQL VARCHAR(4000);--
	DECLARE SQL_STATEMENT STATEMENT;--
	
	-- Check to see if this part is a SWAT part
	SELECT P.PROPERTY_VALUE,P.DESCRIPTION
		INTO SWAT_COLUMN_V, SWAT_TYPE_V
		FROM GALADM.GAL489TBX P
		WHERE P.COMPONENT_ID='SWAT' AND P.PROPERTY_KEY=TRIM(PART_NAME_IN);--	
	IF SWAT_COLUMN_V IS NULL THEN
		--This Part is not a SWAT part so exit
		RETURN;--
	END IF;--
	
	-- Get the Plant Code from the property file
	SELECT LEFT(P.PROPERTY_VALUE,3)
		INTO PLANT_CODE_V
		FROM GALADM.GAL489TBX P
		WHERE P.COMPONENT_ID='SWAT' AND P.PROPERTY_KEY='PLANT_CODE';--	
	IF (PLANT_CODE_V IS NULL) THEN
		-- Exit if the Plant Code is not defined
		RETURN;--
	END IF;--
	
	-- Get the Default Machine No from the property file since it can not be null 
	-- This should be updated from the HMIN_MEASUREMENT_ATTEMPTTBX when part name = NCAT NUMBER
	SELECT LEFT(P.PROPERTY_VALUE,1)
		INTO MACHINE_NO_V
		FROM GALADM.GAL489TBX P
		WHERE P.COMPONENT_ID='SWAT' AND P.PROPERTY_KEY='MACHINE_NO';--	
	IF (MACHINE_NO_V IS NULL) THEN
		-- Exit if the Machine No is not defined
		RETURN;--
	END IF;--

	--Get the Number of Columns that need updated
	SELECT COUNT(*)
		INTO NEED_UPDATED_V
		FROM GALADM.GAL489TBX P
		WHERE P.COMPONENT_ID='SWAT' AND P.PROPERTY_KEY NOT IN ('PLANT_CODE','MACHINE_NO');--
		
	-- Create or Get the HMIN_SWAT_TBX Record
	CALL GALADM.HMIN_SWAT_I_PROC(ACTUAL_TIMESTAMP_IN,PLANT_CODE_V,MACHINE_NO_V,PRODUCT_ID_IN,SWAT_ID_V);--
	
	-- Update the SWAT Column with the Measurement Value for the SWAT ID and update the Collect Status if all columns updated
	SET UPDATE_SQL = 'UPDATE GALADM.HMIN_SWAT_TBX';--
	IF (SWAT_COLUMN_V='MACHINE_NO') THEN
		--MACHINE_NO is the only column that is a character
		SET UPDATE_SQL = UPDATE_SQL||' SET '||SWAT_COLUMN_V||' = CAST(CAST(? AS DOUBLE) AS CHAR(1))';--
	ELSE
		--Update the column to the measurement value
		SET UPDATE_SQL = UPDATE_SQL||' SET '||SWAT_COLUMN_V||' = CAST(? AS DOUBLE)';--
	END IF;--
	IF (SWAT_TYPE_V='HEADLIGHT' OR SWAT_TYPE_V='ALIGNMENT') THEN
		--Use the GAL489TBX Description to determine if this is a HEADLIGHT or ALIGNMENT part so 
		--it can update the correct status
		--if judgement is 0 then do not change else update to measurement status (All parts must be 1 for overall judgement to be 1)
		SET UPDATE_SQL = UPDATE_SQL
			||' , '||SWAT_TYPE_V||'_JUDGEMENT = (CASE WHEN '||SWAT_TYPE_V||'_JUDGEMENT = ''0'' THEN ''0'' ELSE CAST(CAST(? AS INTEGER) AS CHAR(1)) END) ';--
	END IF;--
	-- Increment Columns Updated
	-- Set Collect Status to READY if all columns updated
	SET UPDATE_SQL = UPDATE_SQL
		||' , COLUMNS_UPDATED = COALESCE(COLUMNS_UPDATED,0)+1'
		||' , COLLECT_STATUS = (CASE WHEN (COALESCE(COLUMNS_UPDATED,0)+1)>=CAST(? AS INTEGER) THEN ''READY'' ELSE ''UPDATING'' END)'
		||' WHERE SWAT_ID=CAST(? AS BIGINT)';--
	PREPARE SQL_STATEMENT FROM UPDATE_SQL;--
	IF (SWAT_TYPE_V='HEADLIGHT' OR SWAT_TYPE_V='ALIGNMENT') THEN
		--Need to pass in measurement status for HEADLIGHT and ALIGNMENT parts
		EXECUTE SQL_STATEMENT USING MEASUREMENT_VALUE_IN, MEASUREMENT_STATUS_IN, NEED_UPDATED_V, SWAT_ID_V;--
	ELSE
		EXECUTE SQL_STATEMENT USING MEASUREMENT_VALUE_IN, NEED_UPDATED_V, SWAT_ID_V;--
	END IF;--		 
END P1@

COMMENT ON SPECIFIC PROCEDURE GALADM.HMIN_SWAT_U_PROC IS 'Update the HMIN_SWAT_TBX for every measurement attempt that is a SWAT Part per the GAL489TBX Property Table with Component_ID=SWAT'@

GRANT EXECUTE ON PROCEDURE GALADM.HMIN_SWAT_U_PROC TO GROUP GALAPR_S@
GRANT EXECUTE ON PROCEDURE GALADM.HMIN_SWAT_U_PROC TO GROUP GALAPR_A@

CREATE TRIGGER GALADM.HMIN_MEAS_TR4
 AFTER INSERT ON GALADM.HMIN_MEASUREMENT_ATTEMPTTBX
 REFERENCING NEW AS N
 FOR EACH ROW
 BEGIN ATOMIC
 	CALL GALADM.HMIN_SWAT_U_PROC(N.PRODUCT_ID,N.PART_NAME,N.MEASUREMENT_VALUE,N.MEASUREMENT_STATUS,N.ACTUAL_TIMESTAMP);--
 END@
 
 CREATE PROCEDURE GALADM.HMIN_SWAT_TRANSFER_PROC (
	IN START_TIMESTAMP_IN TIMESTAMP,
	IN END_TIMESTAMP_IN TIMESTAMP)
	 SPECIFIC HMIN_SWAT_TRANSFER_PROC
     RESULT SETS 0
     LANGUAGE SQL
		 MODIFIES SQL DATA
------------------------------------------------------------------------
-- SQL Stored Procedure HMIN_SWAT_TRANSFER_PROC
	-- START_TIMESTAMP_IN 
	-- END_TIMESTAMP_IN

-- This function is to force records in the HMIN_SWAT_TBX
-- from HMIN_MEASUREMENT_ATTEMPTTBX using ACTUAL_TIMESTAMP

-- Alan Study
-- 20081015	
-- Initial Creation

------------------------------------------------------------------------
P1: BEGIN
	DECLARE SQLCODE INTEGER;--
	DECLARE PRODUCT_ID_V VARCHAR(17);--
	DECLARE PART_NAME_V VARCHAR(32);--
	DECLARE MEASUREMENT_VALUE_V DOUBLE;--
	DECLARE MEASUREMENT_STATUS_V INTEGER;--
	DECLARE ACTUAL_TIMESTAMP_V TIMESTAMP;--
	DECLARE SQL_TXT VARCHAR(2000);--
	DECLARE SQL_STATEMENT STATEMENT;--
	DECLARE SQL_CURSOR CURSOR FOR SQL_STATEMENT;--
	
	-- Get the SWAT measurements from HMIN_MEASUREMENT_ATTEMPTTBX between the start and end timestamp
	SET SQL_TXT = 'SELECT M.PRODUCT_ID,M.PART_NAME,M.MEASUREMENT_VALUE,M.MEASUREMENT_STATUS,M.ACTUAL_TIMESTAMP'||
		' FROM GALADM.HMIN_MEASUREMENT_ATTEMPTTBX M'||
		' INNER JOIN GALADM.GAL489TBX P ON M.PART_NAME=P.PROPERTY_KEY AND P.COMPONENT_ID=''SWAT'''||
		' WHERE M.ACTUAL_TIMESTAMP>=CAST(? AS TIMESTAMP) AND M.ACTUAL_TIMESTAMP<=CAST(? AS TIMESTAMP)'||
		' ORDER BY M.MEASUREMENT_ATTEMPT_ID';--
	PREPARE SQL_STATEMENT FROM SQL_TXT;--
	
	OPEN SQL_CURSOR USING START_TIMESTAMP_IN, END_TIMESTAMP_IN;--
	FETCH SQL_CURSOR INTO PRODUCT_ID_V, PART_NAME_V, MEASUREMENT_VALUE_V, MEASUREMENT_STATUS_V, ACTUAL_TIMESTAMP_V;--
	WHILE (SQLCODE = 0) DO
		--For each SWAT measurement call the procedure to update the HMIN_SWAT_TBX
		CALL GALADM.HMIN_SWAT_U_PROC(PRODUCT_ID_V, PART_NAME_V, MEASUREMENT_VALUE_V, MEASUREMENT_STATUS_V, ACTUAL_TIMESTAMP_V);--
		FETCH SQL_CURSOR INTO PRODUCT_ID_V, PART_NAME_V, MEASUREMENT_VALUE_V, MEASUREMENT_STATUS_V, ACTUAL_TIMESTAMP_V;--
	END WHILE;--
	CLOSE SQL_CURSOR;--
	
END P1@

COMMENT ON SPECIFIC PROCEDURE GALADM.HMIN_SWAT_TRANSFER_PROC IS 'Force records in the HMIN_SWAT_TBX from HMIN_MEASUREMENT_ATTEMPTTBX using ACTUAL_TIMESTAMP'@

GRANT EXECUTE ON PROCEDURE GALADM.HMIN_SWAT_TRANSFER_PROC TO GROUP GALAPR_A@
GRANT EXECUTE ON PROCEDURE GALADM.HMIN_SWAT_TRANSFER_PROC TO GROUP GALAPR_S@
 