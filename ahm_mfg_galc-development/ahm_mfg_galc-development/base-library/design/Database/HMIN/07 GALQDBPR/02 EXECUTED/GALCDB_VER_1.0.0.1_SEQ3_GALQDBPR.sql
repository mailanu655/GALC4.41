-- <ScriptOptions statementTerminator="@" />
--Need to rebuild dependent objects that were invalidated by the alters

DROP VIEW GALADM.HMIN_DIV_METRICS_DATE_VW@
DROP VIEW GALADM.HMIN_DIV_METRICS_SHIFT_VW@
DROP VIEW GALADM.HMIN_DIV_PLAN_DATE_VW@
DROP VIEW GALADM.HMIN_DIV_PLAN_SHIFT_VW@
DROP VIEW GALADM.HMIN_PP_METRICS_DATE_VW@
DROP VIEW GALADM.HMIN_PP_METRICS_SHIFT_VW@
DROP VIEW GALADM.HMIN_PLAN_DATE_VW@
DROP VIEW GALADM.HMIN_PLAN_SHIFT_VW@
DROP VIEW GALADM.HMIN_PLAN_VW@
DROP VIEW GALADM.HMIN_OFF_PP_DIV_VW@
DROP VIEW GALADM.HMIN_TRACKING_INVENTORY_VW@
DROP VIEW GALADM.HMIN_TRACKING_INVENTORY_REF_VW@
DROP FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC@
DROP FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_PP_FUNC@
--Note some of the functions had system generated names so to be safe will attempt to drop both system and regular name of function (One will fail)
DROP FUNCTION GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC@
DROP SPECIFIC FUNCTION GALADM.SQL080706080958100@
DROP FUNCTION GALADM.HMIN_GET_QUALITY_PP_LINE_FUNC@
DROP SPECIFIC FUNCTION GALADM.SQL080706080958101@

DROP FUNCTION GALADM.HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC@
DROP FUNCTION GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC@
DROP SPECIFIC FUNCTION GALADM.SQL080714222510801@
DROP FUNCTION GALADM.HMIN_GET_OFF_PP_DIV_FUNC@
DROP FUNCTION GALADM.HMIN_CALC_PLAN_FUNC@
DROP SPECIFIC FUNCTION GALADM.SQL080918184654700@
DROP FUNCTION GALADM.HMIN_CALC_PLAN_NOW_FUNC@
DROP SPECIFIC FUNCTION GALADM.SQL080918184616800@

CREATE FUNCTION GALADM.HMIN_CALC_PLAN_NOW_FUNC(
	PROCESS_POINT_ID_IN VARCHAR(16),
  START_IN TIMESTAMP,
	END_IN TIMESTAMP)
	RETURNS DOUBLE
	SPECIFIC HMIN_CALC_PLAN_NOW_FUNC
	NO EXTERNAL ACTION
------------------------------------------------------------------------
-- SQL Function HMIN_CALC_PLAN_NOW_FUNC
	-- PROCESS_POINT_ID_IN 
	-- START_IN 
	-- END_IN
	
-- This function is to calculate the Plan Qty Now for this process point (On or Off Type)
-- between the start and end timestamps
	
-- Alan Study
-- 20080918	
-- Initial Creation

------------------------------------------------------------------------
F1: BEGIN ATOMIC
	DECLARE PROCESS_POINT_TYPE_V INTEGER;--
	DECLARE PLAN_V DOUBLE;--

	--Get the process point type to determine how to calculate the plan
	SET PROCESS_POINT_TYPE_V = (SELECT PROCESS_POINT_TYPE
		FROM GALADM.GAL214TBX P
		WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN);--
	
	--Process Point Type
	--1 = ON Process Point
	--2 = OFF Process Point
	--8 = OFF QICS Process Point
	--9 = ON QICS Process Point

	IF (PROCESS_POINT_TYPE_V=1 OR PROCESS_POINT_TYPE_V=9) THEN
		SET PLAN_V = (SELECT sum(
			case when S.PLAN = 'Y' 
				and S.START_TIMESTAMP <= current_timestamp 
				and current_timestamp >= S.END_TIMESTAMP 
			then S.CAPACITY_ON 
			when S.PLAN = 'Y' 
				and current timestamp >= S.START_TIMESTAMP 
				and current timestamp <= S.END_TIMESTAMP 
			then timestampdiff(2, char(current timestamp - S.START_TIMESTAMP)) * 
				(decimal(S.CAPACITY_ON,20,15) /
				(TIMESTAMPDIFF(2,char(S.END_TIMESTAMP-S.START_TIMESTAMP )))) 
			else 0 
			end) AS PLAN_QTY_NOW
			FROM galadm.GAL214TBX p left join galadm.GAL128TBX d on p.DIVISION_ID=d.DIVISION_ID 
				left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID 
				left join galadm.GAL226TBX s 
				on g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE 
					and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
			WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN 
			and S.START_TIMESTAMP >= START_IN 
			AND S.END_TIMESTAMP <= END_IN);--
	END IF;--
	IF (PROCESS_POINT_TYPE_V=2 OR PROCESS_POINT_TYPE_V=8) THEN
		SET PLAN_V = (SELECT sum( 
			case when S.PLAN = 'Y' 
				and S.START_TIMESTAMP <= current_timestamp 
				and current_timestamp >= S.END_TIMESTAMP 
			then S.CAPACITY 
			when S.PLAN = 'Y' 
				and current timestamp >= S.START_TIMESTAMP 
				and current timestamp <= S.END_TIMESTAMP 
			then timestampdiff(2, char(current timestamp - S.START_TIMESTAMP)) * 
				(decimal(S.CAPACITY,20,15) /
				(TIMESTAMPDIFF(2,char(S.END_TIMESTAMP-S.START_TIMESTAMP )))) 
			else 0 
			end) AS PLAN_QTY_NOW			
			FROM galadm.GAL214TBX p left join galadm.GAL128TBX d on p.DIVISION_ID=d.DIVISION_ID 
				left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID 
				left join galadm.GAL226TBX s 
				on g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE 
					and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
			WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN 
			and S.START_TIMESTAMP >= START_IN 
			AND S.END_TIMESTAMP <= END_IN);--
	END IF;--
	
	SET PLAN_V = COALESCE(PLAN_V,0);--
	RETURN PLAN_V;--
END@

COMMENT ON FUNCTION GALADM.HMIN_CALC_PLAN_NOW_FUNC IS
'Given a Process Point ID and start and end timestamp return the Plan as of the current time from the GAL226TBX'@

GRANT EXECUTE ON FUNCTION GALADM.HMIN_CALC_PLAN_NOW_FUNC TO GROUP GALQPR_A@
GRANT EXECUTE ON FUNCTION GALADM.HMIN_CALC_PLAN_NOW_FUNC TO GROUP GALQPR_S@

CREATE FUNCTION GALADM.HMIN_CALC_PLAN_FUNC(
	PROCESS_POINT_ID_IN VARCHAR(16),
  START_IN TIMESTAMP,
	END_IN TIMESTAMP)
	RETURNS DOUBLE
	SPECIFIC HMIN_CALC_PLAN_FUNC
	NO EXTERNAL ACTION
------------------------------------------------------------------------
-- SQL Function HMIN_CALC_PLAN_FUNC
	-- PROCESS_POINT_ID_IN 
	-- START_IN 
	-- END_IN
	
-- This function is to calculate the Plan Qty for this process point (On or Off Type)
-- between the start and end timestamps
	
-- Alan Study
-- 20080918	
-- Initial Creation

------------------------------------------------------------------------
F1: BEGIN ATOMIC
	DECLARE PROCESS_POINT_TYPE_V INTEGER;--
	DECLARE PLAN_V DOUBLE;--

	--Get the process point type to determine how to calculate the plan
	SET PROCESS_POINT_TYPE_V = (SELECT PROCESS_POINT_TYPE
		FROM GALADM.GAL214TBX P
		WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN);--
	
	--Process Point Type
	--1 = ON Process Point
	--2 = OFF Process Point
	--8 = OFF QICS Process Point
	--9 = ON QICS Process Point

	IF (PROCESS_POINT_TYPE_V=1 OR PROCESS_POINT_TYPE_V=9) THEN
		SET PLAN_V = (SELECT sum(s.CAPACITY_ON) AS PLAN_QTY
			FROM galadm.GAL214TBX p left join galadm.GAL128TBX d on p.DIVISION_ID=d.DIVISION_ID 
				left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID 
				left join galadm.GAL226TBX s 
				on g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE 
					and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
			WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN 
			and S.START_TIMESTAMP >= START_IN 
			AND S.END_TIMESTAMP <= END_IN);--
	END IF;--
	IF (PROCESS_POINT_TYPE_V=2 OR PROCESS_POINT_TYPE_V=8) THEN
		SET PLAN_V = (SELECT sum(s.CAPACITY) AS PLAN_QTY
			FROM galadm.GAL214TBX p left join galadm.GAL128TBX d on p.DIVISION_ID=d.DIVISION_ID 
				left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID 
				left join galadm.GAL226TBX s 
				on g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE 
					and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
			WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN 
			and S.START_TIMESTAMP >= START_IN 
			AND S.END_TIMESTAMP <= END_IN);--
	END IF;--
	
	SET PLAN_V = COALESCE(PLAN_V,0);--
	RETURN PLAN_V;--
END@

COMMENT ON FUNCTION GALADM.HMIN_CALC_PLAN_FUNC IS
'Given a Process Point ID and start and end timestamp return the Plan from the GAL226TBX'@

GRANT EXECUTE ON FUNCTION GALADM.HMIN_CALC_PLAN_FUNC TO GROUP GALQPR_A@
GRANT EXECUTE ON FUNCTION GALADM.HMIN_CALC_PLAN_FUNC TO GROUP GALQPR_S@

CREATE FUNCTION GALADM.HMIN_GET_OFF_PP_DIV_FUNC( 
	DIVISION_ID_IN VARCHAR(16) )
	RETURNS VARCHAR(16)
	SPECIFIC HMIN_GET_OFF_PP_DIV_FUNC
	NO EXTERNAL ACTION
	DETERMINISTIC
------------------------------------------------------------------------
-- SQL Function HMIN_GET_OFF_PP_DIV_FUNC
	
-- This function is to determine the process point id for Division OFF

-- Alan Study
-- 20080602	
-- Initial Creation

------------------------------------------------------------------------	
BEGIN ATOMIC
	DECLARE COMPONENT_ID_V VARCHAR(40);-- 
	DECLARE PROPERTY_KEY_V VARCHAR(40);--
	DECLARE PROPERTY_VALUE_V VARCHAR(256);--
	DECLARE PROCESS_POINT_ID_V VARCHAR(16);--
	
	SET PROPERTY_KEY_V = 'OFF_PP_' || DIVISION_ID_IN;--
	SET PROPERTY_VALUE_V = 'TRUE';--
	--Get the First Record that matches in the property table
	SET COMPONENT_ID_V = (SELECT P.COMPONENT_ID 
		FROM GALADM.GAL489TBX P
		WHERE P.PROPERTY_KEY=PROPERTY_KEY_V
		AND UPPER(P.PROPERTY_VALUE)=UPPER(PROPERTY_VALUE_V)
		ORDER BY P.COMPONENT_ID
		FETCH FIRST 1 ROWS ONLY);--
	IF (LENGTH(COMPONENT_ID_V)>5) THEN
		--Some process points have properties that start with prop_ so remove it
		IF (SUBSTR(COMPONENT_ID_V,1,5)='prop_') then
			SET COMPONENT_ID_V = RIGHT(COMPONENT_ID_V,LENGTH(COMPONENT_ID_V)-5);--
		END IF;--
	END IF;--
	
	--Only return if it is a valid Process Point
	SET PROCESS_POINT_ID_V = (SELECT P.PROCESS_POINT_ID 
		FROM GALADM.GAL214TBX P 
		WHERE P.PROCESS_POINT_ID=COMPONENT_ID_V);--
	
	RETURN PROCESS_POINT_ID_V;--
END@

COMMENT ON FUNCTION GALADM.HMIN_GET_OFF_PP_DIV_FUNC IS 'Determine the process point id for Division OFF using GAL489TBX Property Key = OFF_PP_[DIVISION_ID_IN] and PROPERTY_VALUE = TRUE'@

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_OFF_PP_DIV_FUNC TO GROUP GALQPR_A@
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_OFF_PP_DIV_FUNC TO GROUP GALQPR_S@

CREATE FUNCTION GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC ( PROCESS_POINT_ID_IN VARCHAR(16) )
  RETURNS DOUBLE
  SPECIFIC HMIN_GET_PP_ALL_SEQ_NUM_FUNC
  LANGUAGE SQL
  DETERMINISTIC
  NO EXTERNAL ACTION
  READS SQL DATA
  INHERIT SPECIAL REGISTERS
F1: BEGIN ATOMIC
   RETURN select (coalesce(d.SEQUENCE_NUMBER,0)+1)*1000000+(coalesce(l.LINE_SEQUENCE_NUMBER,0)+1)*1000+(coalesce(p.SEQUENCE_NUMBER,0)+1) ALL_SEQ_NUM
 from galadm.gal214tbx p
 left join galadm.gal195tbx l
 on p.LINE_ID=l.LINE_ID
 left JOIN GALADM.GAL128TBX D
 ON L.DIVISION_ID=D.DIVISION_ID
 left JOIN GALADM.GAL117TBX S
 ON D.SITE_NAME=S.SITE_NAME
 WHERE P.PROCESS_POINT_ID=PROCESS_POINT_ID_IN;--   

END@

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC TO GROUP GALQPR_S@
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC TO GROUP GALQPR_A@

CREATE FUNCTION GALADM.HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC (
    LOCATION_LEVEL_ID_IN	VARCHAR(16),
    SECONDS_HOLD_IN	INTEGER )
  RETURNS VARCHAR(16)
  SPECIFIC HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC
  LANGUAGE SQL
  NOT DETERMINISTIC
  EXTERNAL ACTION
  READS SQL DATA
  CALLED ON NULL INPUT
  INHERIT SPECIAL REGISTERS
BEGIN ATOMIC
	RETURN (select t.PROCESS_POINT_ID from 
(select row_number() over (order by galadm.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(m.PROCESS_POINT_ID),M.PROCESS_POINT_ID) rownum, m.PROCESS_POINT_ID 
from GALADM.GAL214TBX m
where m.tracking_point_flag=1 and m.DIVISION_ID=CAST(LOCATION_LEVEL_ID_IN AS VARCHAR(16))
order by galadm.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(m.PROCESS_POINT_ID),M.PROCESS_POINT_ID) t
where t.rownum=(1+mod(int(MIDNIGHT_SECONDS(current_timestamp)/SECONDS_HOLD_IN),
(select count(*) from galadm.gal214tbx p where p.tracking_point_flag=1 and p.DIVISION_ID=CAST(LOCATION_LEVEL_ID_IN AS VARCHAR(16))))));--
END@

COMMENT ON FUNCTION GALADM.HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC IS 'Return a Process Point ID for SECONDS_HOLD for every tracking point in the LOCATION_LEVEL_ID (It varies over time)'@

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC TO GROUP GALQPR_S@
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_TRACKING_PP_BY_SEQ_TIME_FUNC TO GROUP GALQPR_A@

CREATE FUNCTION GALADM.HMIN_GET_QUALITY_PP_LINE_FUNC ( LINE_ID_IN VARCHAR(16) )
  RETURNS VARCHAR(16)
  SPECIFIC HMIN_GET_QUALITY_PP_LINE_FUNC
  LANGUAGE SQL
  NOT DETERMINISTIC
  EXTERNAL ACTION
  READS SQL DATA
  INHERIT SPECIAL REGISTERS
BEGIN ATOMIC
	DECLARE COMPONENT_ID_V VARCHAR(40);--
	DECLARE PROPERTY_KEY_V VARCHAR(40);--
	DECLARE PROPERTY_VALUE_V VARCHAR(256);--
	DECLARE PROCESS_POINT_ID_V VARCHAR(16);--
	
	SET PROPERTY_KEY_V = 'QUALITY_PP_' || LINE_ID_IN;--
	SET PROPERTY_VALUE_V = 'TRUE';--
		SET COMPONENT_ID_V = (SELECT P.COMPONENT_ID 
		FROM GALADM.GAL489TBX P
		WHERE P.PROPERTY_KEY=PROPERTY_KEY_V
		AND UPPER(P.PROPERTY_VALUE)=UPPER(PROPERTY_VALUE_V)
		ORDER BY P.COMPONENT_ID
		FETCH FIRST 1 ROWS ONLY);--
	IF (LENGTH(COMPONENT_ID_V)>5) THEN
				IF (SUBSTR(COMPONENT_ID_V,1,5)='prop_') then
			SET COMPONENT_ID_V = RIGHT(COMPONENT_ID_V,LENGTH(COMPONENT_ID_V)-5);--
		END IF;--
	END IF;--
	
		SET PROCESS_POINT_ID_V = (SELECT P.PROCESS_POINT_ID 
		FROM GALADM.GAL214TBX P 
		WHERE P.PROCESS_POINT_ID=COMPONENT_ID_V);--
	
	RETURN PROCESS_POINT_ID_V;--
END@

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_QUALITY_PP_LINE_FUNC TO GROUP GALQPR_S@
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_QUALITY_PP_LINE_FUNC TO GROUP GALQPR_A@

CREATE FUNCTION GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC ( DIVISION_ID_IN VARCHAR(16) )
  RETURNS VARCHAR(16)
  SPECIFIC HMIN_GET_QUALITY_PP_DIV_FUNC
  LANGUAGE SQL
  NOT DETERMINISTIC
  EXTERNAL ACTION
  READS SQL DATA
  INHERIT SPECIAL REGISTERS
BEGIN ATOMIC
	DECLARE COMPONENT_ID_V VARCHAR(40);--
	DECLARE PROPERTY_KEY_V VARCHAR(40);--
	DECLARE PROPERTY_VALUE_V VARCHAR(256);--
	DECLARE PROCESS_POINT_ID_V VARCHAR(16);--
	
	SET PROPERTY_KEY_V = 'QUALITY_PP_' || DIVISION_ID_IN;--
	SET PROPERTY_VALUE_V = 'TRUE';--
		SET COMPONENT_ID_V = (SELECT P.COMPONENT_ID 
		FROM GALADM.GAL489TBX P
		WHERE P.PROPERTY_KEY=PROPERTY_KEY_V
		AND UPPER(P.PROPERTY_VALUE)=UPPER(PROPERTY_VALUE_V)
		ORDER BY P.COMPONENT_ID
		FETCH FIRST 1 ROWS ONLY);--
	IF (LENGTH(COMPONENT_ID_V)>5) THEN
		IF (SUBSTR(COMPONENT_ID_V,1,5)='prop_') then
			SET COMPONENT_ID_V = RIGHT(COMPONENT_ID_V,LENGTH(COMPONENT_ID_V)-5);--
		END IF;--
	END IF;--
	
	SET PROCESS_POINT_ID_V = (SELECT P.PROCESS_POINT_ID 
		FROM GALADM.GAL214TBX P 
		WHERE P.PROCESS_POINT_ID=COMPONENT_ID_V);--
	
	RETURN PROCESS_POINT_ID_V;--
END@

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC TO GROUP GALQPR_S@
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC TO GROUP GALQPR_A@

CREATE FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_PP_FUNC(
	DIVISION_ID_IN VARCHAR(16), 
	PP_ID_IN VARCHAR(16))
	RETURNS VARCHAR(16)
	SPECIFIC HMIN_GET_NEXT_TRACKING_PP_FUNC
	NO EXTERNAL ACTION
	DETERMINISTIC
------------------------------------------------------------------------
-- SQL Function HMIN_GET_NEXT_TRACKING_PP_FUNC
	
-- This function is to determine the next process point id that is a tracking point
-- This will loop for the division

-- Alan Study
-- 20090731	
-- Initial Creation

------------------------------------------------------------------------	
BEGIN ATOMIC
	DECLARE NEXT_PP_V VARCHAR(16);--
	SET NEXT_PP_V = (select p.PROCESS_POINT_ID from galadm.gal214tbx p
			where p.tracking_point_flag=1 and p.DIVISION_ID=DIVISION_ID_IN
				and GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(p.PROCESS_POINT_ID)>(
					select GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(p.PROCESS_POINT_ID)
	 					from galadm.gal214tbx p
	 					where p.PROCESS_POINT_ID=PP_ID_IN)
			order by GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(p.PROCESS_POINT_ID)
			FETCH FIRST 1 ROWS ONLY
	);--
	IF (NEXT_PP_V IS NULL) THEN
		SET NEXT_PP_V = (select p.PROCESS_POINT_ID from galadm.gal214tbx p
			where p.tracking_point_flag=1 and p.DIVISION_ID=DIVISION_ID_IN
			order by GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(p.PROCESS_POINT_ID)
			fetch first 1 rows only);--
	END IF;--
	RETURN NEXT_PP_V;-- 
END@

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_PP_FUNC TO GROUP GALQPR_A@
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_PP_FUNC TO GROUP GALQPR_S@

CREATE FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC(
	LINE_ID_IN VARCHAR(16))
	RETURNS VARCHAR(16)
	SPECIFIC HMIN_GET_NEXT_TRACKING_LINE_FUNC
	NO EXTERNAL ACTION
	DETERMINISTIC
------------------------------------------------------------------------
-- SQL Function HMIN_GET_NEXT_TRACKING_LINE_FUNC
	
-- This function is to determine the next line id that has a tracking point

-- Alan Study
-- 20080819	
-- Initial Creation

------------------------------------------------------------------------	
BEGIN ATOMIC
	RETURN (SELECT L.LINE_ID 
			FROM GALADM.GAL195TBX L
			WHERE GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(L.ENTRY_PROCESS_POINT_ID)>(
 				SELECT GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(P.ENTRY_PROCESS_POINT_ID)
 				FROM GALADM.GAL195TBX P
 				WHERE P.LINE_ID=LINE_ID_IN) AND (L.ENTRY_PROCESS_POINT_ID <>'' and L.ENTRY_PROCESS_POINT_ID IS NOT NULL)
			ORDER BY GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(L.ENTRY_PROCESS_POINT_ID)
			FETCH FIRST 1 ROWS ONLY
	);--
END@

GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC TO GROUP GALQPR_A@
GRANT EXECUTE ON FUNCTION GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC TO GROUP GALQPR_S@

CREATE VIEW GALADM.HMIN_TRACKING_INVENTORY_REF_VW
    (TRACKING_SITE_NAME, TRACKING_SITE_DESC,TRACKING_DIVISION_ID,TRACKING_DIVISION_NAME,
		TRACKING_DIVISION_STD_INV,TRACKING_DIVISION_DESC, TRACKING_PLANT_NAME,TRACKING_LINE_ID,
		TRACKING_LINE_NAME,TRACKING_LINE_DESC,TRACKING_PROCESS_POINT_ID, TRACKING_PROCESS_POINT_NAME,
		TRACKING_PROCESS_POINT_DESC, TRACKING_SEQ, STD_INVENTORY, MINIMUM_INVENTORY, MAXIMUM_INVENTORY,
		CURRENT_INVENTORY, NEXT_TRACKING_LINE_ID, NEXT_TRACKING_LINE_NAME, NEXT_TRACKING_PP_NAME)
AS
SELECT 	trim(S.SITE_NAME), trim(S.SITE_DESCRIPTION),trim(D.DIVISION_ID), trim(D.DIVISION_NAME), 
				(select sum(LINE.std_inventory) from galadm.gal195tbx line where line.DIVISION_ID=d.DIVISION_ID AND LINE.ENTRY_PROCESS_POINT_ID IS NOT NULL AND LINE.ENTRY_PROCESS_POINT_ID <> ''),
				trim(D.DIVISION_DESCRIPTION), trim(D.PLANT_NAME),
				TRIM(L.LINE_ID), TRIM(L.LINE_NAME),	TRIM(L.LINE_DESCRIPTION), 
				TRIM(P.PROCESS_POINT_ID), TRIM(P.PROCESS_POINT_NAME),
				TRIM(P.PROCESS_POINT_DESCRIPTION),
				galadm.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(p.PROCESS_POINT_ID),
				L.STD_INVENTORY, L.MINIMUM_INVENTORY, L.MAXIMUM_INVENTORY,
				COALESCE((SELECT COUNT(DISTINCT F.PRODUCT_ID) FROM GALADM.GAL143TBX F WHERE F.TRACKING_STATUS=L.LINE_ID GROUP BY F.TRACKING_STATUS),0),
				GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC(L.LINE_ID),
				(SELECT N.LINE_NAME FROM GALADM.GAL195TBX N WHERE N.LINE_ID=GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC(L.LINE_ID)),
				(SELECT P.PROCESS_POINT_NAME FROM GALADM.GAL195TBX N LEFT JOIN GALADM.GAL214TBX P ON N.ENTRY_PROCESS_POINT_ID=P.PROCESS_POINT_ID 
				WHERE N.LINE_ID=GALADM.HMIN_GET_NEXT_TRACKING_LINE_FUNC(L.LINE_ID))
				FROM GALADM.GAL117TBX S left join GALADM.GAL128TBX D on S.SITE_NAME = D.SITE_NAME
				left join GALADM.GAL195TBX L on D.DIVISION_ID = L.DIVISION_ID
				left join GALADM.GAL214TBX P on L.LINE_ID = P.LINE_ID                              
				WHERE P.TRACKING_POINT_FLAG=1
WITH NO ROW MOVEMENT@

COMMENT ON TABLE GALADM.HMIN_TRACKING_INVENTORY_REF_VW IS 'Tracking Inventory REF'@

GRANT SELECT ON TABLE GALADM.HMIN_TRACKING_INVENTORY_REF_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_TRACKING_INVENTORY_REF_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_TRACKING_INVENTORY_VW
    (TRACKING_SITE_NAME, TRACKING_SITE_DESC,TRACKING_DIVISION_ID,TRACKING_DIVISION_NAME,
		TRACKING_DIVISION_STD_INV,TRACKING_DIVISION_DESC, TRACKING_PLANT_NAME,TRACKING_LINE_ID,
		TRACKING_LINE_NAME,TRACKING_LINE_DESC,TRACKING_PROCESS_POINT_ID, TRACKING_PROCESS_POINT_NAME,
		TRACKING_PROCESS_POINT_DESC, TRACKING_SEQ, STD_INVENTORY, MINIMUM_INVENTORY, MAXIMUM_INVENTORY,
		CURRENT_INVENTORY, DIFF, CURRENT_INV_STATUS, NEXT_TRACKING_LINE_ID, NEXT_TRACKING_LINE_NAME, NEXT_TRACKING_PP_NAME)
AS
SELECT 	TRACKING_SITE_NAME, TRACKING_SITE_DESC,TRACKING_DIVISION_ID,TRACKING_DIVISION_NAME,
		TRACKING_DIVISION_STD_INV,TRACKING_DIVISION_DESC, TRACKING_PLANT_NAME,TRACKING_LINE_ID,
		TRACKING_LINE_NAME,TRACKING_LINE_DESC,TRACKING_PROCESS_POINT_ID, TRACKING_PROCESS_POINT_NAME,
		TRACKING_PROCESS_POINT_DESC, TRACKING_SEQ, STD_INVENTORY, MINIMUM_INVENTORY, MAXIMUM_INVENTORY,
		CURRENT_INVENTORY, (CURRENT_INVENTORY - STD_INVENTORY) AS DIFF,
		CASE WHEN CURRENT_INVENTORY<MINIMUM_INVENTORY THEN -1
		WHEN CURRENT_INVENTORY>MAXIMUM_INVENTORY THEN 1
		ELSE 0 END AS CURRENT_INV_STATUS, NEXT_TRACKING_LINE_ID, 
		NEXT_TRACKING_LINE_NAME, NEXT_TRACKING_PP_NAME
	FROM GALADM.HMIN_TRACKING_INVENTORY_REF_VW
WITH NO ROW MOVEMENT@

COMMENT ON TABLE GALADM.HMIN_TRACKING_INVENTORY_VW IS 'Tracking Inventory'@

GRANT SELECT ON TABLE GALADM.HMIN_TRACKING_INVENTORY_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_TRACKING_INVENTORY_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_OFF_PP_DIV_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION, PROCESS_POINT_ID, PP_SEQ_NUM)
AS
SELECT trim(T.SITE_NAME) AS SITE_NAME
,trim(T.PLANT_NAME) AS PLANT_NAME
,T.SEQUENCE_NUMBER AS DIV_SEQ_NUM
,trim(T.DIVISION_ID) AS DIVISION_ID
,trim(T.DIVISION_NAME) AS DIVISION_NAME
,trim(T.DIVISION_DESCRIPTION) AS DIVISION_DESCRIPTION
,GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC(T.DIVISION_ID) AS PROCESS_POINT_ID
,GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(GALADM.HMIN_GET_QUALITY_PP_DIV_FUNC(T.DIVISION_ID)) AS PP_SEQ_NUM
FROM GALADM.GAL128TBX T
WHERE GALADM.HMIN_GET_OFF_PP_DIV_FUNC(T.DIVISION_ID) IS NOT NULL@

COMMENT ON TABLE GALADM.HMIN_OFF_PP_DIV_VW IS 'The Off Process Points for the Division using the HMIN_GET_OFF_PP_DIV_FUNC'@

GRANT SELECT ON TABLE GALADM.HMIN_OFF_PP_DIV_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_OFF_PP_DIV_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_PLAN_VW
    ( PROCESS_POINT_ID, TRACKING_POINT_FLAG, SCHEDULE_ID, PLAN_QTY, PLAN_QTY_NOW )
AS
SELECT P.PROCESS_POINT_ID, P.TRACKING_POINT_FLAG, S.SCHEDULE_ID
, GALADM.HMIN_CALC_PLAN_FUNC(P.PROCESS_POINT_ID,S.START_TIMESTAMP,S.END_TIMESTAMP) AS PLAN_QTY
, GALADM.HMIN_CALC_PLAN_NOW_FUNC(P.PROCESS_POINT_ID,S.START_TIMESTAMP,S.END_TIMESTAMP) AS PLAN_QTY_NOW
from galadm.GAL214TBX p left join galadm.GAL128TBX
d on p.DIVISION_ID=d.DIVISION_ID left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID left join galadm.GAL226TBX s on
g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION@

COMMENT ON TABLE GALADM.HMIN_PLAN_VW IS 'Plan_View'@

GRANT SELECT ON TABLE GALADM.HMIN_PLAN_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_PLAN_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_PLAN_SHIFT_VW
    ( SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PP_SEQ_NUM, PROCESS_POINT_ID, PROCESS_POINT_NAME, PROCESS_POINT_DESCRIPTION
    , TRACKING_POINT_FLAG, PROCESS_POINT_TYPE, PRODUCTION_DATE, SHIFT, SHIFT_START_TIMESTAMP, SHIFT_END_TIMESTAMP, PLAN_QTY, PLAN_QTY_NOW )
AS
SELECT d.SITE_NAME, d.PLANT_NAME, d.SEQUENCE_NUMBER AS DIV_SEQ_NUM, d.DIVISION_ID, d.DIVISION_NAME, d.DIVISION_DESCRIPTION 
, GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(P.PROCESS_POINT_ID) AS PP_SEQ_NUM
, P.PROCESS_POINT_ID, P.PROCESS_POINT_NAME, P.PROCESS_POINT_DESCRIPTION
, P.TRACKING_POINT_FLAG, P.PROCESS_POINT_TYPE, S.PRODUCTION_DATE
, S.SHIFT,MIN(S.START_TIMESTAMP) AS SHIFT_START_TIMESTAMP,MAX(S.END_TIMESTAMP) AS SHIFT_END_TIMESTAMP
, GALADM.HMIN_CALC_PLAN_FUNC(P.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY
, GALADM.HMIN_CALC_PLAN_NOW_FUNC(P.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY_NOW
from galadm.GAL214TBX p left join galadm.GAL128TBX
d on p.DIVISION_ID=d.DIVISION_ID left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID left join galadm.GAL226TBX s on
g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
GROUP BY d.SITE_NAME, d.PLANT_NAME, d.SEQUENCE_NUMBER, d.DIVISION_ID, d.DIVISION_NAME, d.DIVISION_DESCRIPTION 
, P.PROCESS_POINT_ID, P.PROCESS_POINT_NAME, P.PROCESS_POINT_DESCRIPTION
, P.TRACKING_POINT_FLAG, P.PROCESS_POINT_TYPE, S.PRODUCTION_DATE, S.SHIFT@

COMMENT ON TABLE GALADM.HMIN_PLAN_SHIFT_VW IS 'All Process Points from GAL214TBX joined to all Production Date and Shifts in GAL226TBX with Plan and Plan Now calculated using function'@

GRANT SELECT ON TABLE GALADM.HMIN_PLAN_SHIFT_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_PLAN_SHIFT_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_PLAN_DATE_VW
    (  SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PP_SEQ_NUM, PROCESS_POINT_ID, PROCESS_POINT_NAME, PROCESS_POINT_DESCRIPTION
    , TRACKING_POINT_FLAG, PROCESS_POINT_TYPE, PRODUCTION_DATE, DATE_START_TIMESTAMP, DATE_END_TIMESTAMP, PLAN_QTY, PLAN_QTY_NOW )
AS
SELECT d.SITE_NAME, d.PLANT_NAME, d.SEQUENCE_NUMBER AS DIV_SEQ_NUM, d.DIVISION_ID, d.DIVISION_NAME, d.DIVISION_DESCRIPTION 
, GALADM.HMIN_GET_PP_ALL_SEQ_NUM_FUNC(P.PROCESS_POINT_ID) AS PP_SEQ_NUM
, P.PROCESS_POINT_ID, P.PROCESS_POINT_NAME, P.PROCESS_POINT_DESCRIPTION
, P.TRACKING_POINT_FLAG, P.PROCESS_POINT_TYPE, S.PRODUCTION_DATE
,MIN(S.START_TIMESTAMP) AS DATE_START_TIMESTAMP,MAX(S.END_TIMESTAMP) AS DATE_END_TIMESTAMP
, GALADM.HMIN_CALC_PLAN_FUNC(P.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY
, GALADM.HMIN_CALC_PLAN_NOW_FUNC(P.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY_NOW
from galadm.GAL214TBX p left join galadm.GAL128TBX
d on p.DIVISION_ID=d.DIVISION_ID left join galadm.gal238tbx g on d.DIVISION_ID = g.DIVISION_ID left join galadm.GAL226TBX s on
g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
GROUP BY d.SITE_NAME, d.PLANT_NAME, d.SEQUENCE_NUMBER, d.DIVISION_ID, d.DIVISION_NAME, d.DIVISION_DESCRIPTION 
, P.PROCESS_POINT_ID, P.PROCESS_POINT_NAME, P.PROCESS_POINT_DESCRIPTION
, P.TRACKING_POINT_FLAG, P.PROCESS_POINT_TYPE, S.PRODUCTION_DATE@

COMMENT ON TABLE GALADM.HMIN_PLAN_DATE_VW IS 'All Process Points from GAL214TBX joined to all Production Dates in GAL226TBX with Plan and Plan Now calculated using function'@

GRANT SELECT ON TABLE GALADM.HMIN_PLAN_DATE_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_PLAN_DATE_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_PP_METRICS_SHIFT_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PP_SEQ_NUM, PROCESS_POINT_ID, PROCESS_POINT_NAME, PROCESS_POINT_DESCRIPTION
    , TRACKING_POINT_FLAG, PROCESS_POINT_TYPE
    , PRODUCTION_DATE, SHIFT, SHIFT_START_TIMESTAMP, SHIFT_END_TIMESTAMP 
    , PLAN_QTY, PLAN_QTY_NOW
    , PP_METRICS_ID, FIRST_PRODUCT_ID, LAST_PRODUCT_ID
    , INSPECTED, PLAN_ACTUAL_DIFF
    , DEFECTS_PRODUCT_ENTRY, DEFECTS_PRODUCT, DEFECTS_ENTRY, DEFECTS
    , OUTSTANDING_PRODUCT_ENTRY, OUTSTANDING_PRODUCT, REPAIRS_PRODUCT_ENTRY, SCRAP
    , DIRECT_PASSED, RPU_ENTRY, RPU, RSS_ENTRY, RSS, SS_ENTRY, SS)
AS
SELECT  PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION 
, PLAN.PP_SEQ_NUM, PLAN.PROCESS_POINT_ID, PLAN.PROCESS_POINT_NAME, PLAN.PROCESS_POINT_DESCRIPTION
, PLAN.TRACKING_POINT_FLAG, PLAN.PROCESS_POINT_TYPE
, PLAN.PRODUCTION_DATE, PLAN.SHIFT, PLAN.SHIFT_START_TIMESTAMP, PLAN.SHIFT_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
, COALESCE(METRICS.PP_METRICS_ID,0), COALESCE(METRICS.FIRST_PRODUCT_ID,''), COALESCE(METRICS.LAST_PRODUCT_ID,'')
, COALESCE(METRICS.INSPECTED,0), (COALESCE(METRICS.INSPECTED,0)-PLAN.PLAN_QTY_NOW) AS PLAN_ACTUAL_DIFF
, COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0), COALESCE(METRICS.DEFECTS_PRODUCT,0), COALESCE(METRICS.DEFECTS_ENTRY,0), COALESCE(METRICS.DEFECTS,0)
, COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0), COALESCE(METRICS.OUTSTANDING_PRODUCT,0)
, COALESCE(METRICS.REPAIRS_PRODUCT_ENTRY,0), COALESCE(METRICS.SCRAP,0)
, (COALESCE(METRICS.INSPECTED,0) - COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DIRECT_PASSED
, CASE WHEN METRICS.INSPECTED<>0 THEN (COALESCE(METRICS.DEFECTS_ENTRY,0) / METRICS.INSPECTED) ELSE 0 END AS RPU_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN (COALESCE(METRICS.DEFECTS,0) / METRICS.INSPECTED) ELSE 0 END AS RPU  
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) / METRICS.INSPECTED) ELSE 0 END AS RSS_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.DEFECTS_PRODUCT,0)) / METRICS.INSPECTED) ELSE 0 END AS RSS
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0)) / METRICS.INSPECTED) ELSE 0 END AS SS_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.OUTSTANDING_PRODUCT,0)) / METRICS.INSPECTED) ELSE 0 END AS SS
FROM GALADM.HMIN_PLAN_SHIFT_VW PLAN LEFT JOIN GALADM.HMIN_PP_METRICS_TBX METRICS ON PLAN.PROCESS_POINT_ID=METRICS.PROCESS_POINT_ID
AND PLAN.PRODUCTION_DATE=METRICS.PRODUCTION_DATE AND PLAN.SHIFT=METRICS.SHIFT
WITH NO ROW MOVEMENT@

COMMENT ON TABLE GALADM.HMIN_PP_METRICS_SHIFT_VW IS 'Plan, Actual and Quality Metrics calculated for all Process Points in GAL214TBX for all production dates and shifts in GAL226TBX'@

GRANT SELECT ON TABLE GALADM.HMIN_PP_METRICS_SHIFT_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_PP_METRICS_SHIFT_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_PP_METRICS_DATE_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PP_SEQ_NUM, PROCESS_POINT_ID, PROCESS_POINT_NAME, PROCESS_POINT_DESCRIPTION
    , TRACKING_POINT_FLAG, PROCESS_POINT_TYPE
    , PRODUCTION_DATE, DATE_START_TIMESTAMP, DATE_END_TIMESTAMP 
    , PLAN_QTY, PLAN_QTY_NOW
    , INSPECTED, PLAN_ACTUAL_DIFF
    , DEFECTS_PRODUCT_ENTRY, DEFECTS_PRODUCT, DEFECTS_ENTRY, DEFECTS
    , OUTSTANDING_PRODUCT_ENTRY, OUTSTANDING_PRODUCT, REPAIRS_PRODUCT_ENTRY, SCRAP
    , DIRECT_PASSED, RPU_ENTRY, RPU, RSS_ENTRY, RSS, SS_ENTRY, SS)
AS
SELECT  PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION 
, PLAN.PP_SEQ_NUM, PLAN.PROCESS_POINT_ID, PLAN.PROCESS_POINT_NAME, PLAN.PROCESS_POINT_DESCRIPTION
, PLAN.TRACKING_POINT_FLAG, PLAN.PROCESS_POINT_TYPE
, PLAN.PRODUCTION_DATE, PLAN.DATE_START_TIMESTAMP, PLAN.DATE_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
, SUM(COALESCE(METRICS.INSPECTED,0)) AS INSPECTED, (SUM(COALESCE(METRICS.INSPECTED,0))-PLAN.PLAN_QTY_NOW) AS PLAN_ACTUAL_DIFF
, SUM(COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DEFECTS_PRODUCT_ENTRY, SUM(COALESCE(METRICS.DEFECTS_PRODUCT,0)) AS DEFECTS_PRODUCT, SUM(COALESCE(METRICS.DEFECTS_ENTRY,0)) AS DEFECTS_ENTRY, SUM(COALESCE(METRICS.DEFECTS,0)) AS DEFECTS
, SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0)) AS OUTSTANDING_PRODUCT_ENTRY, SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT,0)) AS OUTSTANDING_PRODUCT
, SUM(COALESCE(METRICS.REPAIRS_PRODUCT_ENTRY,0)) AS REPAIRS_PRODUCT_ENTRY, SUM(COALESCE(METRICS.SCRAP,0)) AS SCRAP
, SUM(COALESCE(METRICS.INSPECTED,0) - COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DIRECT_PASSED
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN (SUM(COALESCE(METRICS.DEFECTS_ENTRY,0)) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RPU_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN (SUM(COALESCE(METRICS.DEFECTS,0)) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RPU  
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RSS_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.DEFECTS_PRODUCT,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RSS
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS SS_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS SS
FROM GALADM.HMIN_PLAN_DATE_VW PLAN LEFT JOIN GALADM.HMIN_PP_METRICS_TBX METRICS ON PLAN.PROCESS_POINT_ID=METRICS.PROCESS_POINT_ID
AND PLAN.PRODUCTION_DATE=METRICS.PRODUCTION_DATE
GROUP BY PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION 
, PLAN.PP_SEQ_NUM, PLAN.PROCESS_POINT_ID, PLAN.PROCESS_POINT_NAME, PLAN.PROCESS_POINT_DESCRIPTION
, PLAN.TRACKING_POINT_FLAG, PLAN.PROCESS_POINT_TYPE, PLAN.PRODUCTION_DATE, PLAN.DATE_START_TIMESTAMP, PLAN.DATE_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
WITH NO ROW MOVEMENT@

COMMENT ON TABLE GALADM.HMIN_PP_METRICS_DATE_VW IS 'Plan, Actual and Quality Metrics calculated for all Process Points in GAL214TBX for all production dates in GAL226TBX'@

GRANT SELECT ON TABLE GALADM.HMIN_PP_METRICS_DATE_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_PP_METRICS_DATE_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_DIV_PLAN_SHIFT_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PROCESS_POINT_ID, PP_SEQ_NUM, PRODUCTION_DATE, SHIFT, SHIFT_START_TIMESTAMP, SHIFT_END_TIMESTAMP, PLAN_QTY, PLAN_QTY_NOW )
AS
SELECT DIV.SITE_NAME, DIV.PLANT_NAME, DIV.DIV_SEQ_NUM, DIV.DIVISION_ID, DIV.DIVISION_NAME, DIV.DIVISION_DESCRIPTION
, DIV.PROCESS_POINT_ID, DIV.PP_SEQ_NUM, S.PRODUCTION_DATE
,S.SHIFT,MIN(S.START_TIMESTAMP) AS SHIFT_START_TIMESTAMP,MAX(S.END_TIMESTAMP) AS SHIFT_END_TIMESTAMP
, GALADM.HMIN_CALC_PLAN_FUNC(DIV.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY
, GALADM.HMIN_CALC_PLAN_NOW_FUNC(DIV.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY_NOW
from GALADM.HMIN_OFF_PP_DIV_VW DIV 
left join galadm.gal238tbx g on DIV.DIVISION_ID = g.DIVISION_ID left join galadm.GAL226TBX s on
g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
GROUP BY DIV.SITE_NAME, DIV.PLANT_NAME, DIV.DIV_SEQ_NUM, DIV.DIVISION_ID, DIV.DIVISION_NAME, DIV.DIVISION_DESCRIPTION
, DIV.PROCESS_POINT_ID,DIV.PP_SEQ_NUM,S.PRODUCTION_DATE, S.SHIFT@

COMMENT ON TABLE GALADM.HMIN_DIV_PLAN_SHIFT_VW IS 'Div OFF Process Points using HMIN_OFF_PP_DIV_VW joined to all Production Date and Shifts in GAL226TBX with Plan and Plan Now calculated using function'@

GRANT SELECT ON TABLE GALADM.HMIN_DIV_PLAN_SHIFT_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_DIV_PLAN_SHIFT_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_DIV_PLAN_DATE_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION 
    , PROCESS_POINT_ID, PP_SEQ_NUM, PRODUCTION_DATE, DATE_START_TIMESTAMP, DATE_END_TIMESTAMP, PLAN_QTY, PLAN_QTY_NOW )
AS
SELECT DIV.SITE_NAME, DIV.PLANT_NAME, DIV.DIV_SEQ_NUM, DIV.DIVISION_ID, DIV.DIVISION_NAME, DIV.DIVISION_DESCRIPTION
, DIV.PROCESS_POINT_ID, DIV.PP_SEQ_NUM, S.PRODUCTION_DATE
, MIN(S.START_TIMESTAMP) AS DATE_START_TIMESTAMP,MAX(S.END_TIMESTAMP) AS DATE_END_TIMESTAMP
, GALADM.HMIN_CALC_PLAN_FUNC(DIV.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY
, GALADM.HMIN_CALC_PLAN_NOW_FUNC(DIV.PROCESS_POINT_ID,MIN(S.START_TIMESTAMP),MAX(S.END_TIMESTAMP)) AS PLAN_QTY_NOW
from GALADM.HMIN_OFF_PP_DIV_VW DIV 
left join galadm.gal238tbx g on DIV.DIVISION_ID = g.DIVISION_ID left join galadm.GAL226TBX s on
g.GPCS_LINE_NO=s.LINE_NO and g.GPCS_PLANT_CODE=s.PLANT_CODE and g.GPCS_PROCESS_LOCATION=s.PROCESS_LOCATION
GROUP BY DIV.SITE_NAME, DIV.PLANT_NAME, DIV.DIV_SEQ_NUM, DIV.DIVISION_ID, DIV.DIVISION_NAME, DIV.DIVISION_DESCRIPTION
, DIV.PROCESS_POINT_ID,DIV.PP_SEQ_NUM,S.PRODUCTION_DATE@

COMMENT ON TABLE GALADM.HMIN_DIV_PLAN_DATE_VW IS 'Div OFF Process Points using HMIN_OFF_PP_DIV_VW joined to all Production Date in GAL226TBX with Plan and Plan Now calculated using function'@

GRANT SELECT ON TABLE GALADM.HMIN_DIV_PLAN_DATE_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_DIV_PLAN_DATE_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_DIV_METRICS_SHIFT_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION , PROCESS_POINT_ID, PP_SEQ_NUM
    , PRODUCTION_DATE, SHIFT, SHIFT_START_TIMESTAMP, SHIFT_END_TIMESTAMP 
    , PLAN_QTY, PLAN_QTY_NOW, PP_METRICS_ID, FIRST_PRODUCTION_ID, LAST_PRODUCTION_ID
    , INSPECTED, PLAN_ACTUAL_DIFF
    , DEFECTS_PRODUCT_ENTRY, DEFECTS_PRODUCT, DEFECTS_ENTRY, DEFECTS
    , OUTSTANDING_PRODUCT_ENTRY, OUTSTANDING_PRODUCT, REPAIRS_PRODUCT_ENTRY, SCRAP
    , DIRECT_PASSED, RPU_ENTRY, RPU, RSS_ENTRY, RSS, SS_ENTRY, SS)
AS
SELECT PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION
, PLAN.PROCESS_POINT_ID, PLAN.PP_SEQ_NUM, PLAN.PRODUCTION_DATE, PLAN.SHIFT, PLAN.SHIFT_START_TIMESTAMP, PLAN.SHIFT_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
, COALESCE(METRICS.PP_METRICS_ID,0), COALESCE(METRICS.FIRST_PRODUCT_ID,''), COALESCE(METRICS.LAST_PRODUCT_ID,'')
, COALESCE(METRICS.INSPECTED,0), (COALESCE(METRICS.INSPECTED,0)-PLAN.PLAN_QTY_NOW) AS PLAN_ACTUAL_DIFF
, COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0), COALESCE(METRICS.DEFECTS_PRODUCT,0), COALESCE(METRICS.DEFECTS_ENTRY,0), COALESCE(METRICS.DEFECTS,0)
, COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0), COALESCE(METRICS.OUTSTANDING_PRODUCT,0)
, COALESCE(METRICS.REPAIRS_PRODUCT_ENTRY,0), COALESCE(METRICS.SCRAP,0)
, (COALESCE(METRICS.INSPECTED,0) - COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DIRECT_PASSED
, CASE WHEN METRICS.INSPECTED<>0 THEN (COALESCE(METRICS.DEFECTS_ENTRY,0) / METRICS.INSPECTED) ELSE 0 END AS RPU_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN (COALESCE(METRICS.DEFECTS_ENTRY,0) / METRICS.INSPECTED) ELSE 0 END AS RPU  
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) / METRICS.INSPECTED) ELSE 0 END AS RSS_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.DEFECTS_PRODUCT,0)) / METRICS.INSPECTED) ELSE 0 END AS RSS
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0)) / METRICS.INSPECTED) ELSE 0 END AS SS_ENTRY
, CASE WHEN METRICS.INSPECTED<>0 THEN ((COALESCE(METRICS.INSPECTED,0)-COALESCE(METRICS.OUTSTANDING_PRODUCT,0)) / METRICS.INSPECTED) ELSE 0 END AS SS
FROM GALADM.HMIN_DIV_PLAN_SHIFT_VW PLAN LEFT JOIN GALADM.HMIN_PP_METRICS_TBX METRICS ON PLAN.PROCESS_POINT_ID=METRICS.PROCESS_POINT_ID
AND PLAN.PRODUCTION_DATE=METRICS.PRODUCTION_DATE AND PLAN.SHIFT=METRICS.SHIFT
WITH NO ROW MOVEMENT@

COMMENT ON TABLE GALADM.HMIN_DIV_METRICS_SHIFT_VW IS 'Plan, Actual and Quality Metrics calculated for all Process Points in GAL214TBX for all production dates in GAL226TBX'@

GRANT SELECT ON TABLE GALADM.HMIN_DIV_METRICS_SHIFT_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_DIV_METRICS_SHIFT_VW TO GROUP GALQPR_A@

CREATE VIEW GALADM.HMIN_DIV_METRICS_DATE_VW
    (SITE_NAME, PLANT_NAME, DIV_SEQ_NUM, DIVISION_ID, DIVISION_NAME, DIVISION_DESCRIPTION , PROCESS_POINT_ID, PP_SEQ_NUM
    , PRODUCTION_DATE, DATE_START_TIMESTAMP, DATE_END_TIMESTAMP 
    , PLAN_QTY, PLAN_QTY_NOW
    , INSPECTED, PLAN_ACTUAL_DIFF
    , DEFECTS_PRODUCT_ENTRY, DEFECTS_PRODUCT, DEFECTS_ENTRY, DEFECTS
    , OUTSTANDING_PRODUCT_ENTRY, OUTSTANDING_PRODUCT, REPAIRS_PRODUCT_ENTRY, SCRAP
    , DIRECT_PASSED, RPU_ENTRY, RPU, RSS_ENTRY, RSS, SS_ENTRY, SS)
AS
SELECT  PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION, PLAN.PROCESS_POINT_ID, PLAN.PP_SEQ_NUM
, PLAN.PRODUCTION_DATE, PLAN.DATE_START_TIMESTAMP, PLAN.DATE_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
, SUM(COALESCE(METRICS.INSPECTED,0)) AS INSPECTED, (SUM(COALESCE(METRICS.INSPECTED,0))-PLAN.PLAN_QTY_NOW) AS PLAN_ACTUAL_DIFF
, SUM(COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DEFECTS_PRODUCT_ENTRY, SUM(COALESCE(METRICS.DEFECTS_PRODUCT,0)) AS DEFECTS_PRODUCT, SUM(COALESCE(METRICS.DEFECTS_ENTRY,0)) AS DEFECTS_ENTRY, SUM(COALESCE(METRICS.DEFECTS,0)) AS DEFECTS
, SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0)) AS OUTSTANDING_PRODUCT_ENTRY, SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT,0)) AS OUTSTANDING_PRODUCT
, SUM(COALESCE(METRICS.REPAIRS_PRODUCT_ENTRY,0)) AS REPAIRS_PRODUCT_ENTRY, SUM(COALESCE(METRICS.SCRAP,0)) AS SCRAP
, SUM(COALESCE(METRICS.INSPECTED,0) - COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0)) AS DIRECT_PASSED
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN (SUM(COALESCE(METRICS.DEFECTS_ENTRY,0)) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RPU_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN (SUM(COALESCE(METRICS.DEFECTS_ENTRY,0)) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RPU  
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.DEFECTS_PRODUCT_ENTRY,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RSS_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.DEFECTS_PRODUCT,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS RSS
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT_ENTRY,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS SS_ENTRY
, CASE WHEN SUM(METRICS.INSPECTED)<>0 THEN ((SUM(COALESCE(METRICS.INSPECTED,0))-SUM(COALESCE(METRICS.OUTSTANDING_PRODUCT,0))) / SUM(METRICS.INSPECTED)) ELSE 0 END AS SS
FROM GALADM.HMIN_DIV_PLAN_DATE_VW PLAN LEFT JOIN GALADM.HMIN_PP_METRICS_TBX METRICS ON PLAN.PROCESS_POINT_ID=METRICS.PROCESS_POINT_ID
AND PLAN.PRODUCTION_DATE=METRICS.PRODUCTION_DATE
GROUP BY PLAN.SITE_NAME, PLAN.PLANT_NAME, PLAN.DIV_SEQ_NUM, PLAN.DIVISION_ID, PLAN.DIVISION_NAME, PLAN.DIVISION_DESCRIPTION, PLAN.PROCESS_POINT_ID, PLAN.PP_SEQ_NUM
, PLAN.PRODUCTION_DATE, PLAN.DATE_START_TIMESTAMP, PLAN.DATE_END_TIMESTAMP
, PLAN.PLAN_QTY, PLAN.PLAN_QTY_NOW
WITH NO ROW MOVEMENT@

COMMENT ON TABLE GALADM.HMIN_DIV_METRICS_DATE_VW IS 'Plan, Actual and Quality Metrics calculated for all Divisions and production dates in HMIN_DIV_PLAN_DATE_VW'@

GRANT SELECT ON TABLE GALADM.HMIN_DIV_METRICS_DATE_VW TO GROUP GALQPR_S@

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE GALADM.HMIN_DIV_METRICS_DATE_VW TO GROUP GALQPR_A@



