package com.honda.galc.qics.mobile.client.widgets.form;

import com.allen_sauer.gwt.log.client.Log;
import com.honda.galc.qics.mobile.client.widgets.MessageList;
import com.smartgwt.mobile.client.widgets.form.fields.events.BlurEvent;
import com.smartgwt.mobile.client.widgets.form.fields.events.BlurHandler;

/**
 * This class is the base class for verifiers.  Subclasses need only
 * implement the "validate()" method.  Verifiers are used to 
 * validate form entries.  The verify() method returns a true or false
 * indicating validity.  Additionally, the verify() method will add
 * or remove messages from a MessageList.  Verifiers work only on StringItems or 
 * subclasses of StringItems. Verification fires on blur events 
 * and on an explicit verify() calls.
 * 
 * @author vfc01346
 *
 */
public abstract class Verifier implements BlurHandler {
	

	/**
	 * This holds messages generated by the verifier.  It is 
	 * supplied to the verifier.  The messageList is not required, but
	 * under most cases it should be set by the time verify is called.
	 */
	private MessageList messageList;
	

	public Verifier() {
		
	}
	public Verifier( MessageList messageList ) {
		this.messageList = messageList;
	}
	
	/**
	 * Get this verifier.  This is provided to access the 
	 * verifier from event handlers.
	 * @return this verifier.
	 */
	public Verifier getVerifier() {
		return this;
	}
	
	
	/**
	 * Sets the message list.
	 *
	 * @param messageList the new message list
	 */
	public void setMessageList( MessageList messageList ) {
		this.messageList = messageList;
	}
	
	
	/**
	 * When the form field is exited, run the verifier.  This 
	 * implements the BlurHandler event
	 */
	@Override
	public void onBlur(BlurEvent event) {
    	if ( event.getItem() instanceof StringItem ) {
    		Verifiable stringItem = (Verifiable) event.getItem();
    		verify( stringItem );
        }
	}
	
	/** 
	 * Verify the correctness of this item by removing any
	 * previous messages added by this verifier and re-validating
	 * this item.
	 */
	public boolean verify( Verifiable stringAreaItem ) {
		assert stringAreaItem != null;
		// Clear messages for this field and verifier
		removeMessages( stringAreaItem );
    	return validate( stringAreaItem );
	}
	
	/**
	 * Removes all the messages for this item that were added by
	 * this verifier.
	 * 
	 * @param stringItem the StringItem this verifier is tied to.
	 */
	protected void removeMessages( Verifiable stringItem ) {
		assert stringItem != null;
		if ( messageList != null ) {
			messageList.removeMessage( stringItem.getTitle(), getVerifier() );
		} else {
			Log.warn("Warning messageList not set.");
		}
	}
	
	/**
	 * Add a messages associated with an item.
	 * 
	 * @param stringItem the StringItem this verifier is tied to.
	 * @param msg a message that will be put in the message list.  The
	 * items title will be prepended to the messaged.  
	 */
	protected void addMessage( Verifiable stringItem, String msg ) {
		assert stringItem != null;
		assert msg != null;
		if ( messageList != null ) {
			messageList.addMessage(stringItem.getTitle(),  getVerifier(),  msg );
		} else {
			Log.warn("Warning messageList not set.");
		}
	}
	
	/**
	 * Validate this item.  Add a message(s) if there is a validation error.
	 * 
	 * @param item to validate
	 * @return true if valid, false if invalid
	 */
	protected abstract boolean validate( Verifiable item ) ;

	
}
