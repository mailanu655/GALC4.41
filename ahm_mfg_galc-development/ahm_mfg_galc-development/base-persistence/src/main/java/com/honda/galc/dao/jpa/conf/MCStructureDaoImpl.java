
/**
 * 
 */
package com.honda.galc.dao.jpa.conf;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.springframework.transaction.annotation.Transactional;

import com.honda.galc.constant.Delimiter;
import com.honda.galc.constant.OperationType;
import com.honda.galc.constant.PartType;
import com.honda.galc.dao.conf.MCStructureDao;
import com.honda.galc.dao.jpa.BaseDaoImpl;
import com.honda.galc.dto.PddaUnitOfOperation;
import com.honda.galc.entity.conf.MCStructure;
import com.honda.galc.entity.conf.MCStructureId;
import com.honda.galc.service.Parameters;
import com.honda.galc.vios.dto.PddaPlatformDto;

/**
 * @author Subu Kathiresan
 * @date Feb 18, 2014
 * 
 * @author Fredrick Yessaian
 * @date May 06, 2014
 */
public class MCStructureDaoImpl extends BaseDaoImpl<MCStructure, MCStructureId> implements MCStructureDao {

	String CREATE_STRUCTURE = "WITH INPUT (IN_PLANT_NAME, IN_PRODUCT_SPEC_CODE, IN_STRUCTURE_REV, IN_SPEC_CODE_TYPE) "
			+ " AS (VALUES (CAST (?1 AS CHARACTER (16)), TRIM (CAST (?2 AS CHARACTER (30))), CAST (?3 AS BIGINT), CAST (?4 AS VARCHAR (32)))) "
			+ " SELECT OPS.PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE, OPS.STRUCTURE_REV AS STRUCTURE_REV, OPS.PROCESS_POINT_ID AS PROCESS_POINT_ID, "
			+ " OPS.OPERATION_NAME AS OPERATION_NAME, OPS.OP_REV AS OP_REV, OPS.PDDA_PROCESS_ID AS PDDA_PROCESS_ID, OPS.PROCESS_SEQ_NUM AS PROCESS_SEQ_NUM, "
			+ " COALESCE (PARTS.PART_ID, ' ') AS PART_ID, COALESCE (PARTS.PART_REV, 0) AS PART_REV "
			+ " FROM    (SELECT INPUT.IN_PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE, INPUT.IN_STRUCTURE_REV AS STRUCTURE_REV, PP.PROCESS_POINT_ID AS PROCESS_POINT_ID, "
			+ " OP_REV_PLAT.OPERATION_NAME AS OPERATION_NAME, OP_REV_PLAT.OP_REV AS OP_REV, MC_PDDA_PLAT.PDDA_PLATFORM_ID AS PDDA_PROCESS_ID, VIOS_MAST_PROC.PROCESS_SEQ_NUM  AS PROCESS_SEQ_NUM "
			+ " FROM INPUT, GALADM.MC_PDDA_PLATFORM_TBX MC_PDDA_PLAT "
			+ " INNER JOIN GALADM.MC_VIOS_MASTER_PLATFORM_TBX VIOS_MAST_PLAT ON MC_PDDA_PLAT.PLANT_LOC_CODE=VIOS_MAST_PLAT.PLANT_LOC_CODE AND MC_PDDA_PLAT.DEPT_CODE=VIOS_MAST_PLAT.DEPT_CODE AND MC_PDDA_PLAT.MODEL_YEAR_DATE=VIOS_MAST_PLAT.MODEL_YEAR_DATE AND MC_PDDA_PLAT.PROD_SCH_QTY=VIOS_MAST_PLAT.PROD_SCH_QTY AND MC_PDDA_PLAT.PROD_ASM_LINE_NO=VIOS_MAST_PLAT.PROD_ASM_LINE_NO AND MC_PDDA_PLAT.VEHICLE_MODEL_CODE=VIOS_MAST_PLAT.VEHICLE_MODEL_CODE AND VIOS_MAST_PLAT.ACTIVE=1 "
			+ " INNER JOIN GALADM.MC_VIOS_MASTER_ASM_PROC_TBX VIOS_MAST_PROC ON VIOS_MAST_PLAT.VIOS_PLATFORM_ID=VIOS_MAST_PROC.VIOS_PLATFORM_ID AND MC_PDDA_PLAT.ASM_PROC_NO=VIOS_MAST_PROC.ASM_PROC_NO "
			+ " INNER JOIN GALADM.GAL214TBX PP ON PP.PROCESS_POINT_ID=VIOS_MAST_PROC.PROCESS_POINT_ID "
			+ " INNER JOIN GALADM.MC_OP_REV_PLATFORM_TBX OP_REV_PLAT ON (MC_PDDA_PLAT.PDDA_PLATFORM_ID = OP_REV_PLAT.PDDA_PLATFORM_ID) "
			+ " INNER JOIN  GALADM.MC_OP_REV_TBX OP ON (    OP_REV_PLAT.OPERATION_NAME = OP.OPERATION_NAME AND OP_REV_PLAT.OP_REV = OP.OP_REV "
			+ " AND OP.APPROVED <= CURRENT_TIMESTAMP AND (   OP.DEPRECATED > CURRENT_TIMESTAMP OR OP.DEPRECATED IS NULL)) "
			+ " INNER JOIN GALADM.MC_OP_MATRIX_TBX OP_MATRIX ON (    OP_REV_PLAT.OPERATION_NAME =  OP_MATRIX.OPERATION_NAME "
			+ " AND OP_REV_PLAT.OP_REV = OP_MATRIX.OP_REV AND MC_PDDA_PLAT.PDDA_PLATFORM_ID = OP_MATRIX.PDDA_PLATFORM_ID) "
			+ " WHERE     PP.PLANT_NAME = INPUT.IN_PLANT_NAME AND ( (    OP_MATRIX.SPEC_CODE_TYPE = INPUT.IN_SPEC_CODE_TYPE "
			+ " AND LOCATE ( REPLACE (OP_MATRIX.SPEC_CODE_MASK, '*', ''), INPUT.IN_PRODUCT_SPEC_CODE) <> 0)) "
			+ " GROUP BY INPUT.IN_PRODUCT_SPEC_CODE, INPUT.IN_STRUCTURE_REV, PP.PROCESS_POINT_ID,OP_REV_PLAT.OPERATION_NAME, MC_PDDA_PLAT.PDDA_PLATFORM_ID, OP_REV_PLAT.OP_REV, VIOS_MAST_PROC.PROCESS_SEQ_NUM) OPS  "
			+ " LEFT JOIN (SELECT INPUT.IN_PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE, INPUT.IN_STRUCTURE_REV AS STRUCTURE_REV, OP_PART_REV.OPERATION_NAME AS OPERATION_NAME, "
			+ " OP_PART_REV.PART_ID,  OP_PART_REV.PART_REV FROM INPUT "
			+ " INNER JOIN GALADM.MC_OP_PART_REV_TBX OP_PART_REV ON (    OP_PART_REV.APPROVED <= CURRENT_TIMESTAMP AND (   OP_PART_REV.DEPRECATED > CURRENT_TIMESTAMP OR OP_PART_REV.DEPRECATED IS NULL)) "
			+ " INNER JOIN GALADM.MC_OP_PART_MATRIX_TBX PART_MATRIX  ON (    OP_PART_REV.OPERATION_NAME = PART_MATRIX.OPERATION_NAME AND OP_PART_REV.PART_ID = PART_MATRIX.PART_ID  AND OP_PART_REV.PART_REV = PART_MATRIX.PART_REV) "
			+ " WHERE ( (    PART_MATRIX.SPEC_CODE_TYPE = INPUT.IN_SPEC_CODE_TYPE  AND LOCATE (REPLACE (PART_MATRIX.SPEC_CODE_MASK, '*', ''), INPUT.IN_PRODUCT_SPEC_CODE) <> 0)) "
			+ " GROUP BY INPUT.IN_PRODUCT_SPEC_CODE, INPUT.IN_STRUCTURE_REV, OP_PART_REV.OPERATION_NAME, OP_PART_REV.PART_ID, OP_PART_REV.PART_REV) PARTS "
			+ " ON     OPS.PRODUCT_SPEC_CODE = PARTS.PRODUCT_SPEC_CODE AND OPS.STRUCTURE_REV = PARTS.STRUCTURE_REV AND OPS.OPERATION_NAME = PARTS.OPERATION_NAME";

	private static String LIST_OF_OPER_FOR_PP_AND_PRODUCT = "SELECT distinct PROD_STRU.PRODUCT_ID,STRUC.PRODUCT_SPEC_CODE , STRUC.OPERATION_NAME, UNIT.MAINTENANCE_ID, UNIT.UNIT_SEQ_NO, UNIT.BASE_PART_NO, UNIT.UNIT_CREATE_DATE, "
			+ " VARCHAR_FORMAT (UNIT.UNIT_CREATE_DATE, 'MM/DD/YYYY') AS CREATE_DATE, UNIT.UNIT_OP_DESC_TEXT, UNIT.WORK_PT_DESC_TEXT, UNIT.UNIT_TOT_TIME FROM GALADM.MC_STRUCTURE_TBX STRUC  "
			+ " JOIN GALADM.MC_PRODUCT_STRUCTURE_TBX PROD_STRU ON (STRUC.PRODUCT_SPEC_CODE = PROD_STRU.PRODUCT_SPEC_CODE AND STRUC.STRUCTURE_REV = PROD_STRU.STRUCTURE_REV) "
			+ " JOIN GALADM.MC_PDDA_UNIT_REV_TBX PDDA_UNIT_REV ON (STRUC.OPERATION_NAME = PDDA_UNIT_REV.OPERATION_NAME AND STRUC.OP_REV = PDDA_UNIT_REV.OP_REV "
			+ " AND STRUC.PDDA_PLATFORM_ID = PDDA_UNIT_REV.PDDA_PLATFORM_ID AND PDDA_UNIT_REV.PDDA_REPORT='PCF') "
			+ " JOIN VIOS.PVUMX1 UNIT ON (PDDA_UNIT_REV.APVD_UNIT_MAINT_ID = UNIT.MAINTENANCE_ID) "
			+ " WHERE PROD_STRU.PRODUCT_ID=?1  AND STRUC.PROCESS_POINT_ID=CAST (?2 AS CHARACTER(16)) "
			+ " ORDER BY UNIT.UNIT_SEQ_NO";

	private static String LIST_OF_OPER_FOR_PP_AND_PRODUCT_PROCESS_POINT_MODE = "SELECT distinct PROD_STRU.PRODUCT_ID,STRUC.PRODUCT_SPEC_CODE , STRUC.OPERATION_NAME, UNIT.MAINTENANCE_ID, UNIT.UNIT_SEQ_NO, UNIT.BASE_PART_NO, UNIT.UNIT_CREATE_DATE, "
			+ " VARCHAR_FORMAT (UNIT.UNIT_CREATE_DATE, 'MM/DD/YYYY') AS CREATE_DATE, UNIT.UNIT_OP_DESC_TEXT, UNIT.WORK_PT_DESC_TEXT, UNIT.UNIT_TOT_TIME FROM GALADM.MC_STRUCTURE_TBX STRUC  "
			+ " JOIN GALADM.MC_PRODUCT_STRU_FOR_PROCESS_POINT_TBX PROD_STRU ON (STRUC.PRODUCT_SPEC_CODE = PROD_STRU.PRODUCT_SPEC_CODE AND STRUC.STRUCTURE_REV = PROD_STRU.STRUCTURE_REV) "
			+ " JOIN GALADM.MC_PDDA_UNIT_REV_TBX PDDA_UNIT_REV ON (STRUC.OPERATION_NAME = PDDA_UNIT_REV.OPERATION_NAME AND STRUC.OP_REV = PDDA_UNIT_REV.OP_REV "
			+ " AND STRUC.PDDA_PLATFORM_ID = PDDA_UNIT_REV.PDDA_PLATFORM_ID AND PDDA_UNIT_REV.PDDA_REPORT='PCF') "
			+ " JOIN VIOS.PVUMX1 UNIT ON (PDDA_UNIT_REV.APVD_UNIT_MAINT_ID = UNIT.MAINTENANCE_ID) "
			+ " WHERE PROD_STRU.PRODUCT_ID=?1 AND STRUC.PROCESS_POINT_ID=CAST (?2 AS CHARACTER(16)) "
			+ " ORDER BY UNIT.UNIT_SEQ_NO";

	public final static String GET_MAX_REVISION = "SELECT MAX(STRUCTURE_REV) FROM MC_STRUCTURE_TBX";

	private final static String GET_STRUCTURE_FOR_MAX_STRU_REV = "SELECT STRU.PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE, STRU.STRUCTURE_REV AS STRUCTURE_REV,  STRU.PROCESS_POINT_ID AS PROCESS_POINT_ID,  "
			+ " STRU.OPERATION_NAME AS OPERATION_NAME, STRU.OP_REV AS OP_REV, STRU.PDDA_PLATFORM_ID AS PDDA_PLATFORM_ID, "
			+ " STRU.PART_ID AS PART_ID, STRU.PART_REV AS PART_REV FROM MC_STRUCTURE_TBX STRU "
			+ " WHERE     STRU.PRODUCT_SPEC_CODE = CAST(?1 AS CHARACTER(30))  AND STRU.STRUCTURE_REV = (SELECT MAX (STRUCTURE_REV) "
			+ " FROM MC_STRUCTURE_TBX MC_STRU WHERE MC_STRU.PRODUCT_SPEC_CODE = CAST(?1 AS CHARACTER(30)))";

	private final static String UNMAPPED_PROD_ID_FOR_ENGINES = " SELECT ENGINE.PRODUCT_ID,ENGINE.PRODUCT_SPEC_CODE FROM GALADM.GAL131TBX ENGINE "
			+ " LEFT JOIN GALADM.MC_PRODUCT_STRUCTURE_TBX MC_PROD_STRU ON (ENGINE.PRODUCT_ID = MC_PROD_STRU.PRODUCT_ID) "
			+ " WHERE MC_PROD_STRU.PRODUCT_ID IS NULL AND ENGINE.PRODUCT_SPEC_CODE= CAST(?1 AS CHARACTER(30))";

	private final static String UNMAPPED_PROD_ID_FOR_FRAMES = " SELECT FRAME.PRODUCT_ID, FRAME.PRODUCT_SPEC_CODE FROM GALADM.GAL143TBX FRAME "
			+ " LEFT JOIN GALADM.MC_PRODUCT_STRUCTURE_TBX MC_PROD_STRU ON (FRAME.PRODUCT_ID = MC_PROD_STRU.PRODUCT_ID) "
			+ " WHERE MC_PROD_STRU.PRODUCT_ID IS NULL AND FRAME.PRODUCT_SPEC_CODE= CAST(?1 AS CHARACTER(30))";

	private final static String UNMAPPED_PROD_ID_FOR_MBPN = "SELECT MBPN.PRODUCT_ID, MBPN.CURRENT_PRODUCT_SPEC_CODE FROM GALADM.MBPN_PRODUCT_TBX MBPN  "
			+ " LEFT JOIN GALADM.MC_PRODUCT_STRUCTURE_TBX MC_PROD_STRU ON (MBPN.PRODUCT_ID = MC_PROD_STRU.PRODUCT_ID)  "
			+ " WHERE MC_PROD_STRU.PRODUCT_ID IS NULL AND MBPN.CURRENT_PRODUCT_SPEC_CODE= CAST(?1 AS CHARACTER(30))";

	private final static String GET_STRUCTURE_FOR_PROD_SPEC_CODE_MASK = "SELECT STRU.PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE, STRU.STRUCTURE_REV AS STRUCTURE_REV,  STRU.PROCESS_POINT_ID AS PROCESS_POINT_ID,  "
			+ " STRU.OPERATION_NAME AS OPERATION_NAME, STRU.OP_REV AS OP_REV, STRU.PDDA_PLATFORM_ID AS PDDA_PLATFORM_ID, "
			+ " STRU.PART_ID AS PART_ID, STRU.PART_REV AS PART_REV FROM MC_STRUCTURE_TBX STRU "
			+ " WHERE STRU.PRODUCT_SPEC_CODE LIKE ?1";

	private final static String GET_STRUCTURE_ROW_COUNT = "SELECT COUNT(*) FROM MC_STRUCTURE_TBX STRU WHERE STRU.PRODUCT_SPEC_CODE LIKE ?1";

	private final static String GET_STRUCTURE_FOR_PROD_SPEC_CODE_MASK_PER_ROW_COUNT = "SELECT PRODUCT_SPEC_CODE, STRUCTURE_REV, PROCESS_POINT_ID, OPERATION_NAME, OP_REV, PDDA_PLATFORM_ID, PART_ID, PART_REV, DIVISION_ID "
			+ "FROM (SELECT ROW_NUMBER() OVER(ORDER BY PRODUCT_SPEC_CODE) AS rn, STRU.* FROM GALADM.MC_STRUCTURE_TBX STRU WHERE STRU.PRODUCT_SPEC_CODE LIKE TRIM (CAST (?1 AS CHARACTER (30)))) "
			+ "WHERE rn BETWEEN CAST (?2 AS BIGINT) AND CAST (?3 AS BIGINT)";

	private final static String CREATE_STRU_FOR_PRODSPEC_DIVID = "WITH INPUT (IN_PRODUCT_SPEC_CODE, IN_MATRIX_SPEC_CODE, IN_STRUCTURE_REV, IN_SPEC_CODE_TYPE, IN_DIVISION_ID)  "
			+ " AS (VALUES (TRIM (CAST (?1 AS CHARACTER (30))), (?2),  CAST (?3 AS BIGINT), CAST (?4 AS VARCHAR (32)), CAST (?5 AS CHARACTER (16)))) "
			+ " SELECT OPS.DIVISION_ID AS DIVISION_ID, OPS.PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE,  OPS.STRUCTURE_REV AS STRUCTURE_REV,  OPS.PROCESS_POINT_ID AS PROCESS_POINT_ID,  "
			+ " OPS.OPERATION_NAME AS OPERATION_NAME,  OPS.OP_REV AS OP_REV,  OPS.PDDA_PROCESS_ID AS PDDA_PROCESS_ID, OPS.PROCESS_SEQ_NUM AS PROCESS_SEQ_NUM, COALESCE (PARTS.PART_ID, ' ') AS PART_ID,  "
			+ " COALESCE (PARTS.PART_REV, 0) AS PART_REV   "
			+ " FROM    (SELECT PP.DIVISION_ID AS DIVISION_ID, INPUT.IN_PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE, INPUT.IN_STRUCTURE_REV AS STRUCTURE_REV,  "
			+ " PP.PROCESS_POINT_ID AS PROCESS_POINT_ID,  OP_REV_PLAT.OPERATION_NAME AS OPERATION_NAME, OP_REV_PLAT.OP_REV AS OP_REV,  MC_PDDA_PLAT.PDDA_PLATFORM_ID AS PDDA_PROCESS_ID, VIOS_MAST_PROC.PROCESS_SEQ_NUM  AS PROCESS_SEQ_NUM  "
			+ " FROM INPUT, " + " GALADM.MC_PDDA_PLATFORM_TBX MC_PDDA_PLAT "
			+ " INNER JOIN GALADM.MC_VIOS_MASTER_PLATFORM_TBX VIOS_MAST_PLAT ON MC_PDDA_PLAT.PLANT_LOC_CODE=VIOS_MAST_PLAT.PLANT_LOC_CODE AND MC_PDDA_PLAT.DEPT_CODE=VIOS_MAST_PLAT.DEPT_CODE AND MC_PDDA_PLAT.MODEL_YEAR_DATE=VIOS_MAST_PLAT.MODEL_YEAR_DATE AND MC_PDDA_PLAT.PROD_SCH_QTY=VIOS_MAST_PLAT.PROD_SCH_QTY AND MC_PDDA_PLAT.PROD_ASM_LINE_NO=VIOS_MAST_PLAT.PROD_ASM_LINE_NO AND MC_PDDA_PLAT.VEHICLE_MODEL_CODE=VIOS_MAST_PLAT.VEHICLE_MODEL_CODE AND VIOS_MAST_PLAT.ACTIVE=1 "
			+ " INNER JOIN GALADM.MC_VIOS_MASTER_ASM_PROC_TBX VIOS_MAST_PROC ON VIOS_MAST_PLAT.VIOS_PLATFORM_ID=VIOS_MAST_PROC.VIOS_PLATFORM_ID AND MC_PDDA_PLAT.ASM_PROC_NO=VIOS_MAST_PROC.ASM_PROC_NO "
			+ " INNER JOIN GALADM.GAL214TBX PP ON PP.PROCESS_POINT_ID=VIOS_MAST_PROC.PROCESS_POINT_ID "
			+ " INNER JOIN  GALADM.MC_OP_REV_PLATFORM_TBX OP_REV_PLAT  ON (MC_PDDA_PLAT.PDDA_PLATFORM_ID = OP_REV_PLAT.PDDA_PLATFORM_ID)  "
			+ " INNER JOIN  GALADM.MC_OP_REV_TBX OP  ON (    OP_REV_PLAT.OPERATION_NAME = OP.OPERATION_NAME AND OP_REV_PLAT.OP_REV = OP.OP_REV "
			+ " AND OP.APPROVED <= CURRENT_TIMESTAMP AND (   OP.DEPRECATED > CURRENT_TIMESTAMP   OR OP.DEPRECATED IS NULL))  "
			+ " WHERE     PP.DIVISION_ID = INPUT.IN_DIVISION_ID  "
			+ " AND EXISTS  (SELECT 1  FROM GALADM.MC_OP_MATRIX_TBX OP_MATRIX  WHERE     OP_REV_PLAT.OPERATION_NAME =  OP_MATRIX.OPERATION_NAME  "
			+ " AND OP_REV_PLAT.OP_REV = OP_MATRIX.OP_REV AND MC_PDDA_PLAT.PDDA_PLATFORM_ID =  OP_MATRIX.PDDA_PLATFORM_ID  "
			+ " AND (    OP_MATRIX.SPEC_CODE_TYPE = INPUT.IN_SPEC_CODE_TYPE AND ((VIOS_MAST_PLAT.DISCARD_YEAR <> 0 AND LOCATE(CONCAT('"
			+ Delimiter.VERTICAL_BAR
			+ "', REPLACE(SUBSTR(OP_MATRIX.SPEC_CODE_MASK, 2), '*','')), REPLACE(INPUT.IN_MATRIX_SPEC_CODE, CONCAT('"
			+ Delimiter.VERTICAL_BAR + "', SUBSTR(INPUT.IN_PRODUCT_SPEC_CODE,1,1)),'" + Delimiter.VERTICAL_BAR
			+ "')) <> 0) OR (COALESCE(VIOS_MAST_PLAT.DISCARD_YEAR,0) = 0 AND LOCATE (CONCAT('" + Delimiter.VERTICAL_BAR
			+ "', REPLACE ( OP_MATRIX.SPEC_CODE_MASK, '*','')),INPUT.IN_MATRIX_SPEC_CODE ) <> 0))))  "
			+ " AND NOT EXISTS (SELECT 1  FROM GALADM.MC_OP_MATRIX_TBX OP_MATRIX  WHERE     OP_REV_PLAT.OPERATION_NAME =  OP_MATRIX.OPERATION_NAME  "
			+ " AND OP_REV_PLAT.OP_REV =  OP_MATRIX.OP_REV AND MC_PDDA_PLAT.PDDA_PLATFORM_ID = OP_MATRIX.PDDA_PLATFORM_ID  "
			+ " AND OP_MATRIX.SPEC_CODE_TYPE = 'EXCLUDE' AND  ((VIOS_MAST_PLAT.DISCARD_YEAR <> 0 AND LOCATE(CONCAT('"
			+ Delimiter.VERTICAL_BAR
			+ "', REPLACE(SUBSTR(OP_MATRIX.SPEC_CODE_MASK, 2), '*','')), REPLACE(INPUT.IN_MATRIX_SPEC_CODE, CONCAT('"
			+ Delimiter.VERTICAL_BAR + "', SUBSTR(INPUT.IN_PRODUCT_SPEC_CODE,1,1)),'" + Delimiter.VERTICAL_BAR
			+ "')) <> 0) OR (COALESCE(VIOS_MAST_PLAT.DISCARD_YEAR,0)  = 0 AND LOCATE( CONCAT('" + Delimiter.VERTICAL_BAR
			+ "', REPLACE ( OP_MATRIX.SPEC_CODE_MASK, '*', '')),INPUT.IN_MATRIX_SPEC_CODE) <> 0)))  " + " %1$s "
			+ " GROUP BY PP.DIVISION_ID, INPUT.IN_PRODUCT_SPEC_CODE, INPUT.IN_STRUCTURE_REV, PP.PROCESS_POINT_ID, OP_REV_PLAT.OPERATION_NAME, MC_PDDA_PLAT.PDDA_PLATFORM_ID, OP_REV_PLAT.OP_REV, VIOS_MAST_PROC.PROCESS_SEQ_NUM) OPS  "
			+ " LEFT JOIN (SELECT INPUT.IN_PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE, INPUT.IN_STRUCTURE_REV AS STRUCTURE_REV,  OP_PART_REV.OPERATION_NAME AS OPERATION_NAME,  "
			+ " OP_PART_REV.PART_ID, OP_PART_REV.PART_REV FROM INPUT, " + " GALADM.MC_PDDA_PLATFORM_TBX MC_PDDA_PLAT "
			+ " INNER JOIN GALADM.MC_VIOS_MASTER_PLATFORM_TBX VIOS_MAST_PLAT ON MC_PDDA_PLAT.PLANT_LOC_CODE=VIOS_MAST_PLAT.PLANT_LOC_CODE AND MC_PDDA_PLAT.DEPT_CODE=VIOS_MAST_PLAT.DEPT_CODE AND MC_PDDA_PLAT.MODEL_YEAR_DATE=VIOS_MAST_PLAT.MODEL_YEAR_DATE AND MC_PDDA_PLAT.PROD_SCH_QTY=VIOS_MAST_PLAT.PROD_SCH_QTY AND MC_PDDA_PLAT.PROD_ASM_LINE_NO=VIOS_MAST_PLAT.PROD_ASM_LINE_NO AND MC_PDDA_PLAT.VEHICLE_MODEL_CODE=VIOS_MAST_PLAT.VEHICLE_MODEL_CODE AND VIOS_MAST_PLAT.ACTIVE=1 "
			+ " INNER JOIN GALADM.MC_VIOS_MASTER_ASM_PROC_TBX VIOS_MAST_PROC ON VIOS_MAST_PLAT.VIOS_PLATFORM_ID=VIOS_MAST_PROC.VIOS_PLATFORM_ID AND MC_PDDA_PLAT.ASM_PROC_NO=VIOS_MAST_PROC.ASM_PROC_NO "
			+ " INNER JOIN GALADM.GAL214TBX PROC_PT ON PROC_PT.PROCESS_POINT_ID=VIOS_MAST_PROC.PROCESS_POINT_ID "
			+ " INNER JOIN  GALADM.MC_OP_REV_PLATFORM_TBX OPREV_PLAT ON (MC_PDDA_PLAT.PDDA_PLATFORM_ID =  OPREV_PLAT.PDDA_PLATFORM_ID)  "
			+ " INNER JOIN GALADM.MC_OP_PART_REV_TBX OP_PART_REV ON (    OP_PART_REV.APPROVED <= CURRENT_TIMESTAMP AND (   OP_PART_REV.DEPRECATED > CURRENT_TIMESTAMP OR OP_PART_REV.DEPRECATED IS NULL)  "
			+ " AND (    OPREV_PLAT.OPERATION_NAME =  OP_PART_REV.OPERATION_NAME ))  "
			+ " WHERE     PROC_PT.DIVISION_ID = INPUT.IN_DIVISION_ID  "
			+ " AND EXISTS (SELECT 1  FROM GALADM.MC_OP_PART_MATRIX_TBX PART_MATRIX  WHERE     OP_PART_REV.OPERATION_NAME =  PART_MATRIX.OPERATION_NAME  "
			+ " AND OP_PART_REV.PART_ID = PART_MATRIX.PART_ID  AND OP_PART_REV.PART_REV = PART_MATRIX.PART_REV  "
			+ " AND PART_MATRIX.SPEC_CODE_TYPE = INPUT.IN_SPEC_CODE_TYPE AND ((VIOS_MAST_PLAT.DISCARD_YEAR <> 0 AND LOCATE(CONCAT('"
			+ Delimiter.VERTICAL_BAR
			+ "', REPLACE(SUBSTR(PART_MATRIX.SPEC_CODE_MASK, 2), '*','')), REPLACE(INPUT.IN_MATRIX_SPEC_CODE, CONCAT('"
			+ Delimiter.VERTICAL_BAR + "', SUBSTR(INPUT.IN_PRODUCT_SPEC_CODE,1,1)),'" + Delimiter.VERTICAL_BAR
			+ "')) <> 0) OR (COALESCE(VIOS_MAST_PLAT.DISCARD_YEAR,0) = 0 AND LOCATE(CONCAT('" + Delimiter.VERTICAL_BAR
			+ "', REPLACE (PART_MATRIX.SPEC_CODE_MASK,'*','')),INPUT.IN_MATRIX_SPEC_CODE) <> 0)))  "
			+ " AND NOT EXISTS (SELECT 1 FROM GALADM.MC_OP_PART_MATRIX_TBX PART_MATRIX WHERE     OP_PART_REV.OPERATION_NAME = PART_MATRIX.OPERATION_NAME  "
			+ " AND OP_PART_REV.PART_ID = PART_MATRIX.PART_ID AND OP_PART_REV.PART_REV = PART_MATRIX.PART_REV AND PART_MATRIX.SPEC_CODE_TYPE ='EXCLUDE'  "
			+ " AND  ((VIOS_MAST_PLAT.DISCARD_YEAR <> 0 AND LOCATE(CONCAT('" + Delimiter.VERTICAL_BAR
			+ "', REPLACE(SUBSTR(PART_MATRIX.SPEC_CODE_MASK, 2), '*','')), REPLACE(INPUT.IN_MATRIX_SPEC_CODE, CONCAT('"
			+ Delimiter.VERTICAL_BAR + "', SUBSTR(INPUT.IN_PRODUCT_SPEC_CODE,1,1)),'" + Delimiter.VERTICAL_BAR
			+ "')) <> 0) OR (COALESCE(VIOS_MAST_PLAT.DISCARD_YEAR,0) = 0 AND LOCATE(CONCAT('" + Delimiter.VERTICAL_BAR
			+ "', REPLACE ( PART_MATRIX.SPEC_CODE_MASK, '*','')), INPUT.IN_MATRIX_SPEC_CODE) <> 0)))  " + " %1$s "
			+ " GROUP BY INPUT.IN_PRODUCT_SPEC_CODE,  INPUT.IN_STRUCTURE_REV, OP_PART_REV.OPERATION_NAME, OP_PART_REV.PART_ID, OP_PART_REV.PART_REV) PARTS  "
			+ " ON     OPS.PRODUCT_SPEC_CODE = PARTS.PRODUCT_SPEC_CODE AND OPS.STRUCTURE_REV = PARTS.STRUCTURE_REV  "
			+ " AND OPS.OPERATION_NAME = PARTS.OPERATION_NAME";

	private final static String CREATE_STRU_FOR_PRODSPEC_PROCESS_PT = "WITH INPUT (IN_PRODUCT_SPEC_CODE, IN_MATRIX_SPEC_CODE, IN_STRUCTURE_REV, IN_SPEC_CODE_TYPE, IN_PROCESS_POINT_ID)  "
			+ " AS (VALUES (TRIM (CAST (?1 AS CHARACTER (30))), (?2),  CAST (?3 AS BIGINT), CAST (?4 AS VARCHAR (32)), CAST (?5 AS CHARACTER (16)))) "
			+ " SELECT OPS.DIVISION_ID AS DIVISION_ID, OPS.PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE,  OPS.STRUCTURE_REV AS STRUCTURE_REV,  OPS.PROCESS_POINT_ID AS PROCESS_POINT_ID,  "
			+ " OPS.OPERATION_NAME AS OPERATION_NAME,  OPS.OP_REV AS OP_REV,  OPS.PDDA_PROCESS_ID AS PDDA_PROCESS_ID, OPS.PROCESS_SEQ_NUM AS PROCESS_SEQ_NUM, COALESCE (PARTS.PART_ID, ' ') AS PART_ID,  "
			+ " COALESCE (PARTS.PART_REV, 0) AS PART_REV  "
			+ " FROM    (SELECT PP.DIVISION_ID AS DIVISION_ID, INPUT.IN_PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE, INPUT.IN_STRUCTURE_REV AS STRUCTURE_REV,  "
			+ " PP.PROCESS_POINT_ID AS PROCESS_POINT_ID,  OP_REV_PLAT.OPERATION_NAME AS OPERATION_NAME, OP_REV_PLAT.OP_REV AS OP_REV,  MC_PDDA_PLAT.PDDA_PLATFORM_ID AS PDDA_PROCESS_ID, VIOS_MAST_PROC.PROCESS_SEQ_NUM  AS PROCESS_SEQ_NUM  "
			+ " FROM INPUT,  "
			+ " GALADM.MC_PDDA_PLATFORM_TBX MC_PDDA_PLAT "
			+ " INNER JOIN GALADM.MC_VIOS_MASTER_PLATFORM_TBX VIOS_MAST_PLAT ON MC_PDDA_PLAT.PLANT_LOC_CODE=VIOS_MAST_PLAT.PLANT_LOC_CODE AND MC_PDDA_PLAT.DEPT_CODE=VIOS_MAST_PLAT.DEPT_CODE AND MC_PDDA_PLAT.MODEL_YEAR_DATE=VIOS_MAST_PLAT.MODEL_YEAR_DATE AND MC_PDDA_PLAT.PROD_SCH_QTY=VIOS_MAST_PLAT.PROD_SCH_QTY AND MC_PDDA_PLAT.PROD_ASM_LINE_NO=VIOS_MAST_PLAT.PROD_ASM_LINE_NO AND MC_PDDA_PLAT.VEHICLE_MODEL_CODE=VIOS_MAST_PLAT.VEHICLE_MODEL_CODE AND VIOS_MAST_PLAT.ACTIVE=1 "
			+ " INNER JOIN GALADM.MC_VIOS_MASTER_ASM_PROC_TBX VIOS_MAST_PROC ON VIOS_MAST_PLAT.VIOS_PLATFORM_ID=VIOS_MAST_PROC.VIOS_PLATFORM_ID AND MC_PDDA_PLAT.ASM_PROC_NO=VIOS_MAST_PROC.ASM_PROC_NO "
			+ " INNER JOIN GALADM.GAL214TBX PP ON PP.PROCESS_POINT_ID=VIOS_MAST_PROC.PROCESS_POINT_ID "
			+ " INNER JOIN  GALADM.MC_OP_REV_PLATFORM_TBX OP_REV_PLAT  ON (MC_PDDA_PLAT.PDDA_PLATFORM_ID = OP_REV_PLAT.PDDA_PLATFORM_ID)  "
			+ " INNER JOIN  GALADM.MC_OP_REV_TBX OP  ON (    OP_REV_PLAT.OPERATION_NAME = OP.OPERATION_NAME AND OP_REV_PLAT.OP_REV = OP.OP_REV "
			+ " AND OP.APPROVED <= CURRENT_TIMESTAMP AND (   OP.DEPRECATED > CURRENT_TIMESTAMP   OR OP.DEPRECATED IS NULL))  "
			+ " WHERE     PP.PROCESS_POINT_ID = INPUT.IN_PROCESS_POINT_ID "
			+ " AND EXISTS  (SELECT 1  FROM GALADM.MC_OP_MATRIX_TBX OP_MATRIX  WHERE     OP_REV_PLAT.OPERATION_NAME =  OP_MATRIX.OPERATION_NAME  "
			+ " AND OP_REV_PLAT.OP_REV = OP_MATRIX.OP_REV AND MC_PDDA_PLAT.PDDA_PLATFORM_ID =  OP_MATRIX.PDDA_PLATFORM_ID  "
			+ " AND (    OP_MATRIX.SPEC_CODE_TYPE = INPUT.IN_SPEC_CODE_TYPE  AND  LOCATE (CONCAT('"
			+ Delimiter.VERTICAL_BAR
			+ "', REPLACE ( OP_MATRIX.SPEC_CODE_MASK, '*','')),INPUT.IN_MATRIX_SPEC_CODE ) <> 0))  "
			+ " AND (    OP_MATRIX.SPEC_CODE_TYPE = INPUT.IN_SPEC_CODE_TYPE AND ((VIOS_MAST_PLAT.DISCARD_YEAR <> 0 AND LOCATE(CONCAT('"+Delimiter.VERTICAL_BAR+"', REPLACE(SUBSTR(OP_MATRIX.SPEC_CODE_MASK, 2), '*','')), REPLACE(INPUT.IN_MATRIX_SPEC_CODE, CONCAT('"+Delimiter.VERTICAL_BAR+"', SUBSTR(INPUT.IN_PRODUCT_SPEC_CODE,1,1)),'"+Delimiter.VERTICAL_BAR+"')) <> 0) OR (COALESCE(VIOS_MAST_PLAT.DISCARD_YEAR,0) = 0 AND LOCATE (CONCAT('"+Delimiter.VERTICAL_BAR+"', REPLACE ( OP_MATRIX.SPEC_CODE_MASK, '*','')),INPUT.IN_MATRIX_SPEC_CODE ) <> 0))))  "
			+ " AND NOT EXISTS (SELECT 1  FROM GALADM.MC_OP_MATRIX_TBX OP_MATRIX  WHERE     OP_REV_PLAT.OPERATION_NAME =  OP_MATRIX.OPERATION_NAME  "
			+ " AND OP_REV_PLAT.OP_REV =  OP_MATRIX.OP_REV AND MC_PDDA_PLAT.PDDA_PLATFORM_ID = OP_MATRIX.PDDA_PLATFORM_ID  "
			+ " AND OP_MATRIX.SPEC_CODE_TYPE = 'EXCLUDE' AND  LOCATE( CONCAT('"
			+ Delimiter.VERTICAL_BAR
			+ "', REPLACE ( OP_MATRIX.SPEC_CODE_MASK, '*', '')),INPUT.IN_MATRIX_SPEC_CODE) <> 0)  "
			+ " AND OP_MATRIX.SPEC_CODE_TYPE = 'EXCLUDE' AND  ((VIOS_MAST_PLAT.DISCARD_YEAR <> 0 AND LOCATE(CONCAT('"+Delimiter.VERTICAL_BAR+"', REPLACE(SUBSTR(OP_MATRIX.SPEC_CODE_MASK, 2), '*','')), REPLACE(INPUT.IN_MATRIX_SPEC_CODE, CONCAT('"+Delimiter.VERTICAL_BAR+"', SUBSTR(INPUT.IN_PRODUCT_SPEC_CODE,1,1)),'"+Delimiter.VERTICAL_BAR+"')) <> 0) OR (COALESCE(VIOS_MAST_PLAT.DISCARD_YEAR,0)  = 0 AND LOCATE( CONCAT('"+Delimiter.VERTICAL_BAR+"', REPLACE ( OP_MATRIX.SPEC_CODE_MASK, '*', '')),INPUT.IN_MATRIX_SPEC_CODE) <> 0)))  "
			+ " %1$s " 
			+ " GROUP BY PP.DIVISION_ID, INPUT.IN_PRODUCT_SPEC_CODE, INPUT.IN_STRUCTURE_REV, PP.PROCESS_POINT_ID, OP_REV_PLAT.OPERATION_NAME, MC_PDDA_PLAT.PDDA_PLATFORM_ID, OP_REV_PLAT.OP_REV, VIOS_MAST_PROC.PROCESS_SEQ_NUM) OPS  "
			+ " LEFT JOIN (SELECT INPUT.IN_PRODUCT_SPEC_CODE AS PRODUCT_SPEC_CODE, INPUT.IN_STRUCTURE_REV AS STRUCTURE_REV,  OP_PART_REV.OPERATION_NAME AS OPERATION_NAME,  "
			+ " OP_PART_REV.PART_ID, OP_PART_REV.PART_REV FROM INPUT, "
			+ " GALADM.MC_PDDA_PLATFORM_TBX MC_PDDA_PLAT "
			+ " INNER JOIN GALADM.MC_VIOS_MASTER_PLATFORM_TBX VIOS_MAST_PLAT ON MC_PDDA_PLAT.PLANT_LOC_CODE=VIOS_MAST_PLAT.PLANT_LOC_CODE AND MC_PDDA_PLAT.DEPT_CODE=VIOS_MAST_PLAT.DEPT_CODE AND MC_PDDA_PLAT.MODEL_YEAR_DATE=VIOS_MAST_PLAT.MODEL_YEAR_DATE AND MC_PDDA_PLAT.PROD_SCH_QTY=VIOS_MAST_PLAT.PROD_SCH_QTY AND MC_PDDA_PLAT.PROD_ASM_LINE_NO=VIOS_MAST_PLAT.PROD_ASM_LINE_NO AND MC_PDDA_PLAT.VEHICLE_MODEL_CODE=VIOS_MAST_PLAT.VEHICLE_MODEL_CODE AND VIOS_MAST_PLAT.ACTIVE=1 "
			+ " INNER JOIN GALADM.MC_VIOS_MASTER_ASM_PROC_TBX VIOS_MAST_PROC ON VIOS_MAST_PLAT.VIOS_PLATFORM_ID=VIOS_MAST_PROC.VIOS_PLATFORM_ID AND MC_PDDA_PLAT.ASM_PROC_NO=VIOS_MAST_PROC.ASM_PROC_NO " 
			+ " INNER JOIN GALADM.GAL214TBX PROC_PT ON PROC_PT.PROCESS_POINT_ID=VIOS_MAST_PROC.PROCESS_POINT_ID "
			+ " INNER JOIN  GALADM.MC_OP_REV_PLATFORM_TBX OPREV_PLAT ON (MC_PDDA_PLAT.PDDA_PLATFORM_ID =  OPREV_PLAT.PDDA_PLATFORM_ID)  "
			+ " INNER JOIN GALADM.MC_OP_PART_REV_TBX OP_PART_REV ON (    OP_PART_REV.APPROVED <= CURRENT_TIMESTAMP AND (   OP_PART_REV.DEPRECATED > CURRENT_TIMESTAMP OR OP_PART_REV.DEPRECATED IS NULL)  "
			+ " AND (    OPREV_PLAT.OPERATION_NAME =  OP_PART_REV.OPERATION_NAME ))  "
			+ " WHERE   PROC_PT.PROCESS_POINT_ID = INPUT.IN_PROCESS_POINT_ID "
			+ " AND EXISTS (SELECT 1  FROM GALADM.MC_OP_PART_MATRIX_TBX PART_MATRIX  WHERE     OP_PART_REV.OPERATION_NAME =  PART_MATRIX.OPERATION_NAME  "
			+ " AND OP_PART_REV.PART_ID = PART_MATRIX.PART_ID  AND OP_PART_REV.PART_REV = PART_MATRIX.PART_REV  "
			+ " AND PART_MATRIX.SPEC_CODE_TYPE = INPUT.IN_SPEC_CODE_TYPE AND  LOCATE(CONCAT('"
			+ Delimiter.VERTICAL_BAR
			+ "', REPLACE (PART_MATRIX.SPEC_CODE_MASK,'*','')),INPUT.IN_MATRIX_SPEC_CODE) <> 0)  "
			+ " AND PART_MATRIX.SPEC_CODE_TYPE = INPUT.IN_SPEC_CODE_TYPE AND ((VIOS_MAST_PLAT.DISCARD_YEAR <> 0 AND LOCATE(CONCAT('"+Delimiter.VERTICAL_BAR+"', REPLACE(SUBSTR(PART_MATRIX.SPEC_CODE_MASK, 2), '*','')), REPLACE(INPUT.IN_MATRIX_SPEC_CODE, CONCAT('"+Delimiter.VERTICAL_BAR+"', SUBSTR(INPUT.IN_PRODUCT_SPEC_CODE,1,1)),'"+Delimiter.VERTICAL_BAR+"')) <> 0) OR (COALESCE(VIOS_MAST_PLAT.DISCARD_YEAR,0) = 0 AND LOCATE(CONCAT('"+Delimiter.VERTICAL_BAR+"', REPLACE (PART_MATRIX.SPEC_CODE_MASK,'*','')),INPUT.IN_MATRIX_SPEC_CODE) <> 0)))  "
			+ " AND NOT EXISTS (SELECT 1 FROM GALADM.MC_OP_PART_MATRIX_TBX PART_MATRIX WHERE     OP_PART_REV.OPERATION_NAME = PART_MATRIX.OPERATION_NAME  "
			+ " AND OP_PART_REV.PART_ID = PART_MATRIX.PART_ID AND OP_PART_REV.PART_REV = PART_MATRIX.PART_REV AND PART_MATRIX.SPEC_CODE_TYPE ='EXCLUDE'  "
			+ " AND  LOCATE(CONCAT('"
			+ Delimiter.VERTICAL_BAR
			+ "', REPLACE ( PART_MATRIX.SPEC_CODE_MASK, '*','')), INPUT.IN_MATRIX_SPEC_CODE) <> 0)  "
			+ " AND  ((VIOS_MAST_PLAT.DISCARD_YEAR <> 0 AND LOCATE(CONCAT('"+Delimiter.VERTICAL_BAR+"', REPLACE(SUBSTR(PART_MATRIX.SPEC_CODE_MASK, 2), '*','')), REPLACE(INPUT.IN_MATRIX_SPEC_CODE, CONCAT('"+Delimiter.VERTICAL_BAR+"', SUBSTR(INPUT.IN_PRODUCT_SPEC_CODE,1,1)),'"+Delimiter.VERTICAL_BAR+"')) <> 0) OR (COALESCE(VIOS_MAST_PLAT.DISCARD_YEAR,0) = 0 AND LOCATE(CONCAT('"+Delimiter.VERTICAL_BAR+"', REPLACE ( PART_MATRIX.SPEC_CODE_MASK, '*','')), INPUT.IN_MATRIX_SPEC_CODE) <> 0)))  "
			+ " %1$s " 
			+ " GROUP BY INPUT.IN_PRODUCT_SPEC_CODE,  INPUT.IN_STRUCTURE_REV, OP_PART_REV.OPERATION_NAME, OP_PART_REV.PART_ID, OP_PART_REV.PART_REV) PARTS  "
			+ " ON     OPS.PRODUCT_SPEC_CODE = PARTS.PRODUCT_SPEC_CODE AND OPS.STRUCTURE_REV = PARTS.STRUCTURE_REV  "
			+ " AND OPS.OPERATION_NAME = PARTS.OPERATION_NAME";

	private final static String GET_MAX_STRUCTURE_FOR_SPECCODE_DIVID = "SELECT STRU.DIVISION_ID, STRU.PRODUCT_SPEC_CODE, STRU.STRUCTURE_REV, STRU.PROCESS_POINT_ID, STRU.OPERATION_NAME, "
			+ " STRU.OP_REV, STRU.PDDA_PLATFORM_ID, STRU.PROCESS_SEQ_NUM, STRU.PART_ID, STRU.PART_REV  "
			+ " FROM GALADM.MC_STRUCTURE_TBX STRU WHERE STRU.STRUCTURE_REV = (SELECT MAX (MC_STRU.STRUCTURE_REV)  FROM GALADM.MC_STRUCTURE_TBX MC_STRU   "
			+ " WHERE     MC_STRU.PRODUCT_SPEC_CODE = ?1 AND MC_STRU.DIVISION_ID = ?2)";

	private final static String GET_MAX_STRUCTURE_FOR_SPECCODE_PROCESSPT = "SELECT STRU.DIVISION_ID, STRU.PRODUCT_SPEC_CODE, STRU.STRUCTURE_REV, STRU.PROCESS_POINT_ID, "
			+ " STRU.OPERATION_NAME, STRU.OP_REV, STRU.PDDA_PLATFORM_ID, STRU.PROCESS_SEQ_NUM, STRU.PART_ID, STRU.PART_REV FROM GALADM.MC_STRUCTURE_TBX STRU "
			+ " WHERE STRU.STRUCTURE_REV = (SELECT MAX (MC_STRU.STRUCTURE_REV) FROM GALADM.MC_STRUCTURE_TBX MC_STRU   "
			+ " WHERE MC_STRU.PRODUCT_SPEC_CODE = ?1 AND MC_STRU.PROCESS_POINT_ID = ?2)";

	private final static String GET_MATCHING_FIF_SPEC_CODE = "WITH INPUT (PRODUCT_SPEC_CODE) AS (VALUES (CAST(?1 AS CHARACTER(30)))) "
			+ " SELECT CONCAT(BOM.MTC_MODEL, BOM.PDDA_FIF_TYPE) FROM INPUT, GALADM.BOM_TBX BOM "
			+ " WHERE     BOM.MTC_MODEL = SUBSTR (INPUT.PRODUCT_SPEC_CODE, 1, 4) "
			+ " AND BOM.MTC_TYPE = SUBSTR (INPUT.PRODUCT_SPEC_CODE, 5, 3) "
			+ " AND (   (BOM.MTC_OPTION = '' AND BOM.PART_BLOCK_CODE = '') OR BOM.MTC_OPTION = SUBSTR (INPUT.PRODUCT_SPEC_CODE, 8, 3)) "
			+ " AND (   BOM.MTC_COLOR = ''  OR BOM.MTC_COLOR = SUBSTR (INPUT.PRODUCT_SPEC_CODE, 11, 10)) "
			+ " AND (   BOM.INT_COLOR_CODE = '' OR BOM.INT_COLOR_CODE = SUBSTR (INPUT.PRODUCT_SPEC_CODE, 21, 2)) "
			+ " AND BOM.EFF_BEG_DATE < CURRENT_DATE " + " AND BOM.EFF_END_DATE > CURRENT_DATE "
			+ " AND BOM.PDDA_FIF_TYPE IS NOT NULL " + " GROUP BY BOM.MTC_MODEL, BOM.PDDA_FIF_TYPE";

	private final static String GET_MADE_FROM_PART_MASK = "SELECT P.PART_MASK FROM GALADM.MC_STRUCTURE_TBX S "
			+ "INNER JOIN GALADM.MC_OP_REV_TBX O ON O.OPERATION_NAME = S.OPERATION_NAME AND O.OP_REV = S.OP_REV "
			+ "INNER JOIN GALADM.MC_OP_PART_REV_TBX P ON P.OPERATION_NAME = S.OPERATION_NAME AND P.PART_ID = S.PART_ID AND P.PART_REV = S.PART_REV "
			+ "WHERE S.PRODUCT_SPEC_CODE = CAST(?1 AS CHARACTER(30)) " + "AND S.STRUCTURE_REV = CAST(?2 AS BIGINT) "
			+ "AND S.PROCESS_POINT_ID = CAST(?3 AS CHARACTER(16)) " + "AND O.OP_TYPE = CAST(?4 AS VARCHAR(32)) "
			+ "AND P.PART_TYPE = CAST(?5 AS VARCHAR(32))";

	private final static String FIND_ALL_PLATFORM_DETAILS_BY_STRUCTURE_REV = "select distinct p.PLANT_LOC_CODE, p.DEPT_CODE, p.MODEL_YEAR_DATE, p.PROD_SCH_QTY, p.PROD_ASM_LINE_NO, p.VEHICLE_MODEL_CODE "
			+ "from galadm.MC_STRUCTURE_TBX s join galadm.MC_PDDA_PLATFORM_TBX p on s.PDDA_PLATFORM_ID=p.PDDA_PLATFORM_ID "
			+ "where s.STRUCTURE_REV=?1";

	private final String FIRST_TIME_RUNNING_MODEL_AT_PROCESS_POINT = "SELECT COUNT(DISTINCT PRODUCT_ID) FROM GALADM.GAL215TBX "
			+ " WHERE PROCESS_POINT_ID = ?1 " + " AND SUBSTR(PRODUCT_SPEC_CODE,1,7) = ?2 "
			+ " AND CURRENT_TIMESTAMP < ACTUAL_TIMESTAMP+ ?3 days ";

	private static final String FIND_BY_OP_NAME_AND_OP_REV = "SELECT * FROM galadm.MC_STRUCTURE_TBX where OPERATION_NAME=?1 and OP_REV=?2";

	@Transactional
	public List<Object[]> createNewStructuresForProdSpec(String plantName, String productSpecCode, int structureRev,
			String specCodeType) {
		Parameters params = new Parameters();
		params.put("1", plantName);
		params.put("2", productSpecCode);
		params.put("3", structureRev);
		params.put("4", specCodeType);

		return findAllByNativeQuery(CREATE_STRUCTURE, params, Object[].class);

	}

	public List<MCStructure> getStructures(String productSpecCode, String processPointId, long revision) {
		Parameters params = Parameters.with("id.productSpecCode", productSpecCode)
				.put("id.processPointId", processPointId).put("id.revision", revision);
		return findAll(params);
	}

	public List<MCStructure> findAllByProductSpecCode(String productSpecCode) {
		Parameters params = Parameters.with("id.productSpecCode", productSpecCode);
		return findAll(params);
	}

	public List<MCStructure> findAllByStructureRevision(long revision) {
		Parameters params = Parameters.with("id.revision", revision);
		return findAll(params);
	}

	public List<MCStructure> findAllByProcessPointId(String processPointId) {
		Parameters params = Parameters.with("id.processPointId", processPointId);
		return findAll(params);
	}

	public List<MCStructure> findAllByOperationName(String operationName) {
		Parameters params = Parameters.with("id.operationName", operationName);
		return findAll(params);
	}

	public List<MCStructure> findAllByPartRevision(int partRevision) {
		Parameters params = Parameters.with("id.partRevision", partRevision);
		return findAll(params);
	}

	public List<MCStructure> findAllByOperationRevision(int operationRevision) {
		Parameters params = Parameters.with("id.operationRevision", operationRevision);
		return findAll(params);
	}

	@SuppressWarnings("unchecked")
	public List<PddaUnitOfOperation> getAllOperationsForProcessPointAndProduct(String productId, String processPoint) {

		ArrayList<PddaUnitOfOperation> operationLst = null;
		Parameters params = Parameters.with("1", productId);
		params.put("2", processPoint);

		List<Object[]> operationLstObjs = findResultListByNativeQuery(LIST_OF_OPER_FOR_PP_AND_PRODUCT, params);

		if (operationLstObjs.size() > 0)
			operationLst = new ArrayList<PddaUnitOfOperation>();

		for (Object[] operObj : operationLstObjs) {
			PddaUnitOfOperation pddaUnitOfOperation = new PddaUnitOfOperation();
			pddaUnitOfOperation.setProductId(operObj[0].toString());
			pddaUnitOfOperation.setProdSpecCode(operObj[1].toString());
			pddaUnitOfOperation.setOperationName(operObj[2].toString());
			pddaUnitOfOperation.setMaintenanceId(Integer.getInteger(operObj[3].toString()));
			pddaUnitOfOperation.setUnitSeqNo(Integer.getInteger(operObj[4].toString()));
			pddaUnitOfOperation.setBasePartNo(operObj[5].toString());
			pddaUnitOfOperation.setCreateDateStr(operObj[7].toString());
			pddaUnitOfOperation.setOperationDescTxt(operObj[8].toString());
			pddaUnitOfOperation.setWorkPtDescText(operObj[9].toString());
			pddaUnitOfOperation.setUnitTotalTime(Float.valueOf(operObj[10].toString()));

			operationLst.add(pddaUnitOfOperation);
		}

		return operationLst;
	}

	@SuppressWarnings("unchecked")
	public List<PddaUnitOfOperation> getAllOperationsForProcessPointAndProductPPMode(String productId,
			String processPoint) {

		ArrayList<PddaUnitOfOperation> operationLst = null;
		Parameters params = Parameters.with("1", productId);
		params.put("2", processPoint);

		List<Object[]> operationLstObjs = findResultListByNativeQuery(
				LIST_OF_OPER_FOR_PP_AND_PRODUCT_PROCESS_POINT_MODE, params);

		if (operationLstObjs.size() > 0)
			operationLst = new ArrayList<PddaUnitOfOperation>();

		for (Object[] operObj : operationLstObjs) {
			PddaUnitOfOperation pddaUnitOfOperation = new PddaUnitOfOperation();
			pddaUnitOfOperation.setProductId(operObj[0].toString());
			pddaUnitOfOperation.setProdSpecCode(operObj[1].toString());
			pddaUnitOfOperation.setOperationName(operObj[2].toString());
			pddaUnitOfOperation.setMaintenanceId(Integer.getInteger(operObj[3].toString()));
			pddaUnitOfOperation.setUnitSeqNo(Integer.getInteger(operObj[4].toString()));
			pddaUnitOfOperation.setBasePartNo(operObj[5].toString());
			pddaUnitOfOperation.setCreateDateStr(operObj[7].toString());
			pddaUnitOfOperation.setOperationDescTxt(operObj[8].toString());
			pddaUnitOfOperation.setWorkPtDescText(operObj[9].toString());
			pddaUnitOfOperation.setUnitTotalTime(Float.valueOf(operObj[10].toString()));

			operationLst.add(pddaUnitOfOperation);
		}

		return operationLst;
	}

	public List<MCStructure> findAllByStructureForProdSpecCodeAndRevision(String productSpecCode,
			long structureRevision) {
		Parameters params = Parameters.with("id.productSpecCode", productSpecCode);
		params.put("id.revision", structureRevision);
		return findAll(params);
	}

	public int getMaxRevision() {
		Integer count = findFirstByNativeQuery(GET_MAX_REVISION, null, Integer.class);
		return (count == null) ? 0 : count.intValue();
	}

	public int getStructureRowCount(String prodSpecCodeMask) {
		Integer count = findFirstByNativeQuery(GET_STRUCTURE_ROW_COUNT, Parameters.with("1", prodSpecCodeMask),
				Integer.class);
		return (count == null) ? 0 : count.intValue();
	}

	public List<MCStructure> getStructureForProdSpecCodeForMaxStruRev(String prodSpecCode) {
		Parameters params = Parameters.with("1", prodSpecCode);
		return findAllByNativeQuery(GET_STRUCTURE_FOR_MAX_STRU_REV, params);
	}

	public List<MCStructure> getStructureForProdSpecCodeMask(List<String> prodSpecCodeMasks) {
		List<MCStructure> structureList = new ArrayList<MCStructure>();
		if (prodSpecCodeMasks != null) {
			for (String prodSpecCodeMask : prodSpecCodeMasks) {
				Parameters params = Parameters.with("1", prodSpecCodeMask);
				structureList.addAll(findAllByNativeQuery(GET_STRUCTURE_FOR_PROD_SPEC_CODE_MASK, params));
			}
		}
		return structureList;
	}

	public List<MCStructure> getStructureForProdSpecCodeMaskPerPage(String prodSpecCodeMask, long startIndex,
			long endIndex) {
		Parameters params = Parameters.with("1", prodSpecCodeMask);
		params.put("2", startIndex);
		params.put("3", endIndex);
		return findAllByNativeQuery(GET_STRUCTURE_FOR_PROD_SPEC_CODE_MASK_PER_ROW_COUNT, params);
	}

	@SuppressWarnings("unchecked")
	public List<String[]> findAllUnmappedProductIdsForEngine(String productSpecCode) {
		Parameters params = Parameters.with("1", productSpecCode);
		return findResultListByNativeQuery(UNMAPPED_PROD_ID_FOR_ENGINES, params);
	}

	@SuppressWarnings("unchecked")
	public List<String[]> findAllUnmappedProductIdsForFrame(String productSpecCode) {
		Parameters params = Parameters.with("1", productSpecCode);
		return findResultListByNativeQuery(UNMAPPED_PROD_ID_FOR_FRAMES, params);
	}

	@SuppressWarnings("unchecked")
	public List<String[]> findAllUnmappedProductIdsForMBPN(String productSpecCode) {
		Parameters params = Parameters.with("1", productSpecCode);
		return findResultListByNativeQuery(UNMAPPED_PROD_ID_FOR_MBPN, params);
	}

	public Set<MCStructure> createStructureForProdSpecAndDivisionId(String productSpecCode, String opSpecCode,
			String divisionId, int strucRevId, String specCodeType, PddaPlatformDto pddaPlatform) {
		Parameters params = new Parameters();
		params.put("1", productSpecCode);
		params.put("2", opSpecCode);
		params.put("3", strucRevId);
		params.put("4", specCodeType);
		params.put("5", divisionId);
		List<Object[]> structureObjList = findAllByNativeQuery(String.format(CREATE_STRU_FOR_PRODSPEC_DIVID,
				getNativeSqlClauseForPlatform(pddaPlatform, "MC_PDDA_PLAT")), params, Object[].class);
		Set<MCStructure> structureList = constructMCStructure(structureObjList);
		return structureList;
	}

	public Set<MCStructure> createStructureForProdSpecAndProcessPoint(String productSpecCode, String opSpecCode,
			int strucRevId, String specCodeType, String processPt, PddaPlatformDto pddaPlatform) {

		Parameters params = new Parameters();
		params.put("1", productSpecCode);
		params.put("2", opSpecCode);
		params.put("3", strucRevId);
		params.put("4", specCodeType);
		params.put("5", processPt);
		List<Object[]> structureObjList = findAllByNativeQuery(String.format(CREATE_STRU_FOR_PRODSPEC_PROCESS_PT,
				getNativeSqlClauseForPlatform(pddaPlatform, "MC_PDDA_PLAT")), params, Object[].class);
		Set<MCStructure> structureList = constructMCStructure(structureObjList);

		return structureList;
	}

	private String getNativeSqlClauseForPlatform(PddaPlatformDto pddaPlatform, String alias) {
		StringBuilder clause = new StringBuilder("");
		if (pddaPlatform != null) {
			if (StringUtils.isNotBlank(pddaPlatform.getPlantLocCode())) {
				clause.append(" AND " + alias + ".PLANT_LOC_CODE = '"
						+ StringUtils.stripEnd(pddaPlatform.getPlantLocCode(), null) + "'");
			}
			if (StringUtils.isNotBlank(pddaPlatform.getDeptCode())) {
				clause.append(" AND " + alias + ".DEPT_CODE = '"
						+ StringUtils.stripEnd(pddaPlatform.getDeptCode(), null) + "'");
			}
			if (pddaPlatform.getModelYearDate() > 0.0) {
				clause.append(" AND " + alias + ".MODEL_YEAR_DATE = " + pddaPlatform.getModelYearDate());
			}
			if (pddaPlatform.getProdSchQty() > 0.0) {
				clause.append(" AND " + alias + ".PROD_SCH_QTY = " + pddaPlatform.getProdSchQty());
			}
			if (StringUtils.isNotBlank(pddaPlatform.getProdAsmLineNo())) {
				clause.append(" AND " + alias + ".PROD_ASM_LINE_NO = '"
						+ StringUtils.stripEnd(pddaPlatform.getProdAsmLineNo(), null) + "'");
			}
			if (StringUtils.isNotBlank(pddaPlatform.getVehicleModelCode())) {
				clause.append(" AND " + alias + ".VEHICLE_MODEL_CODE = '"
						+ StringUtils.stripEnd(pddaPlatform.getVehicleModelCode(), null) + "'");
			}
		}
		return clause.toString();
	}

	public Set<MCStructure> getMaxRevStrucForSpecCodeAndDivId(String prodSpecCode, String divisionId) {
		Parameters params = new Parameters();
		params.put("1", prodSpecCode);
		params.put("2", divisionId);
		List<Object[]> structureAsObjects = findAllByNativeQuery(GET_MAX_STRUCTURE_FOR_SPECCODE_DIVID, params,
				Object[].class);
		Set<MCStructure> structureList = constructMCStructure(structureAsObjects);
		return structureList;
	}

	public Set<MCStructure> getMaxRevStrucForSpecCodeAndProcessPointId(String prodSpecCode, String processPointId) {
		Parameters params = new Parameters();
		params.put("1", prodSpecCode);
		params.put("2", processPointId);
		List<Object[]> structureAsObjects = findAllByNativeQuery(GET_MAX_STRUCTURE_FOR_SPECCODE_PROCESSPT, params,
				Object[].class);
		Set<MCStructure> structureList = constructMCStructure(structureAsObjects);
		return structureList;
	}

	public List<String> getMatchingFIFSpecCode(String prodSpecCode) {
		List<String> fifSpecCodeLst = null;
		Parameters params = Parameters.with("1", prodSpecCode);
		List<Object[]> matchingFifSpecCode = findAllByNativeQuery(GET_MATCHING_FIF_SPEC_CODE, params, Object[].class);
		for (Object[] fifCodes : matchingFifSpecCode) {
			if (fifSpecCodeLst == null)
				fifSpecCodeLst = new ArrayList<String>();

			fifSpecCodeLst.add(new String(fifCodes[0].toString()));
		}
		return fifSpecCodeLst;
	}

	public List<MCStructure> getAllStructureForPlatFormId(int platFormId) {
		Parameters params = Parameters.with("id.pddaPlatformId", platFormId);
		return findAll(params);
	}

	public List<String> findMadeFromPartMask(String productSpecCode, long StructureRev, String processPoint) {
		Parameters params = Parameters.with("1", productSpecCode);
		params.put("2", StructureRev);
		params.put("3", processPoint);
		params.put("4", OperationType.GALC_MADE_FROM.name());
		params.put("5", PartType.MFG.name());
		return findAllByNativeQuery(GET_MADE_FROM_PART_MASK, params, String.class);
	}

	public List<MCStructure> getStructuresByDivision(String productSpecCode, String divId, long structureRevision) {
		Parameters params = Parameters.with("id.productSpecCode", productSpecCode).put("id.divisionId", divId)
				.put("id.revision", structureRevision);
		return findAll(params);
	}

	private Set<MCStructure> constructMCStructure(List<Object[]> structureObjList) {

		if (structureObjList != null && structureObjList.size() == 0)
			return null;

		Set<MCStructure> mcStructureList = new HashSet<MCStructure>();
		for (Object[] mcStru : structureObjList) {
			MCStructure mcStructure = new MCStructure();
			MCStructureId mcStructureId = new MCStructureId();

			mcStructureId.setDivisionId(mcStru[0].toString());
			mcStructureId.setProductSpecCode(mcStru[1].toString());
			mcStructureId.setRevision((Long) mcStru[2]);
			mcStructureId.setProcessPointId(mcStru[3].toString());
			mcStructureId.setOperationName(mcStru[4].toString());
			mcStructureId.setOperationRevision((Integer) mcStru[5]);
			mcStructureId.setPddaPlatformId((Integer) mcStru[6]);
			mcStructure.setProcessSeqNum((Integer) mcStru[7]);
			mcStructureId.setPartId(mcStru[8].toString());
			mcStructureId.setPartRevision((Integer) mcStru[9]);

			mcStructure.setId(mcStructureId);

			mcStructureList.add(mcStructure);
		}
		return mcStructureList;
	}

	@Transactional
	public void deleteStructureBySpecCodeDivIdAndStructureRev(String productSpecCode, String divId,
			long structureRevision) {
		Parameters params = Parameters.with("id.productSpecCode", productSpecCode).put("id.divisionId", divId)
				.put("id.revision", structureRevision);
		delete(params);
	}

	@Override
	public List<PddaPlatformDto> findAllPlatformDetailsByStructureRev(long structureRevision) {
		Parameters params = Parameters.with("1", structureRevision);
		return findAllByNativeQuery(FIND_ALL_PLATFORM_DETAILS_BY_STRUCTURE_REV, params, PddaPlatformDto.class);
	}

	@Override
	public Boolean isFirstTimeRunningModelAtProcessPoint(String processPoint, String productSpecCode, int noOfDays) {
		Parameters params = Parameters.with("1", processPoint);
		params.put("2", StringUtils.substring(productSpecCode, 0, 7));
		params.put("3", noOfDays);

		return (findFirstByNativeQuery(FIRST_TIME_RUNNING_MODEL_AT_PROCESS_POINT, params, Integer.class) <= 0);

	}

	@Override
	public MCStructure findByOpNameAndOpRev(String operationName, int operationRev) {
		Parameters params = Parameters.with("1", operationName);
		params.put("2", operationRev);
		return findFirstByNativeQuery(FIND_BY_OP_NAME_AND_OP_REV, params);
	}

	@Override
	public MCStructure findByOpNameAndPart(String operationName, String partId, int partRev) {
		Parameters params = Parameters.with("id.operationName", operationName).put("id.partId", partId)
				.put("id.partRevision", partRev);
		return findFirst(params);
	}
}
