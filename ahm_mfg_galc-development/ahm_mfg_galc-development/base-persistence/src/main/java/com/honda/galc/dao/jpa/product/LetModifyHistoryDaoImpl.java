package com.honda.galc.dao.jpa.product;

import java.util.List;

import com.honda.galc.dao.jpa.BaseDaoImpl;
import com.honda.galc.dao.product.LetModifyHistoryDao;
import com.honda.galc.entity.product.LetModifyHistory;
import com.honda.galc.entity.product.LetModifyHistoryId;
import com.honda.galc.service.Parameters;

/**
 * 
 * @author Gangadhararao Gadde
 * @date Sept 16, 2013
 */
public class LetModifyHistoryDaoImpl extends BaseDaoImpl<LetModifyHistory, LetModifyHistoryId> implements LetModifyHistoryDao {
	
	private static String GET_DISTINCT_LET_MODIFY_HISTORY_PROGRAM_BY_PRODUCTID = "SELECT DISTINCT C.INSPECTION_PGM_NAME, B.INSPECTION_PGM_ID FROM (SELECT PRODUCT_ID, HISTORY_SEQ FROM GAL709TBX WHERE PRODUCT_ID = @PRODUCT_ID@ ) A INNER JOIN GAL713TBX B ON   A.PRODUCT_ID = B.PRODUCT_ID AND   A.HISTORY_SEQ = B.HISTORY_SEQ     LEFT JOIN GAL714TBX C ON   B.INSPECTION_PGM_ID = C.INSPECTION_PGM_ID UNION  SELECT DISTINCT C.INSPECTION_PGM_NAME, D.INSPECTION_PGM_ID FROM (SELECT PRODUCT_ID, HISTORY_SEQ FROM GAL709TBX WHERE PRODUCT_ID = @PRODUCT_ID@ ) A INNER JOIN GAL712TBX D ON   A.PRODUCT_ID = D.PRODUCT_ID AND   A.HISTORY_SEQ = D.HISTORY_SEQ     LEFT JOIN GAL714TBX C ON   D.INSPECTION_PGM_ID = C.INSPECTION_PGM_ID ORDER BY INSPECTION_PGM_NAME FOR READ ONLY";
	private static String GET_LET_MODIFY_RESULT_HISTORY_BY_PRODUCTID = "SELECT A.PRODUCT_ID FROM (SELECT PRODUCT_ID, HISTORY_SEQ FROM GAL709TBX WHERE PRODUCT_ID = ?1) A INNER JOIN GAL710TBX B ON A.PRODUCT_ID = B.PRODUCT_ID AND A.HISTORY_SEQ = B.HISTORY_SEQ FOR READ ONLY";
	private static String GET_INPECTION_DETAILS = "SELECT A.TEST_SEQ, T709.USER_ID, T709.MODIFY_TIMESTAMP, COALESCE(A.INSPECTION_PGM_STATUS, '') AS INSPECTION_PGM_STATUS, T709.HISTORY_SEQ, COALESCE(A.INSPECTION_PARAM_VALUE, '') AS INSPECTION_PARAM_VALUE, COALESCE(A.INSPECTION_PARAM_TYPE, '') AS INSPECTION_PARAM_TYPE, COALESCE(T715.INSPECTION_PARAM_NAME, '') AS INSPECTION_PARAM_NAME, T709.PRODUCT_ID, A.INSPECTION_PGM_ID, COALESCE(A.PRODUCTION, '') AS PRODUCTION, T709.MODIFY_TYPE FROM GAL709TBX T709 INNER JOIN (SELECT COALESCE(T710.PRODUCT_ID, T712.PRODUCT_ID, T713.PRODUCT_ID ) AS PRODUCT_ID, COALESCE(T710.HISTORY_SEQ, T712.HISTORY_SEQ, T713.HISTORY_SEQ ) AS HISTORY_SEQ, COALESCE(T710.TEST_SEQ, T712.TEST_SEQ, T713.TEST_SEQ ) AS TEST_SEQ, COALESCE(T712.INSPECTION_PGM_ID, T713.INSPECTION_PGM_ID, 0 ) AS INSPECTION_PGM_ID, T710.PRODUCTION, T712.INSPECTION_PGM_STATUS, T713.INSPECTION_PARAM_ID, T713.INSPECTION_PARAM_VALUE, T713.INSPECTION_PARAM_TYPE FROM (SELECT PRODUCT_ID, HISTORY_SEQ, TEST_SEQ, PRODUCTION FROM GAL710TBX WHERE PRODUCT_ID = @PRODUCT_ID@ ) T710 FULL JOIN (SELECT PRODUCT_ID, HISTORY_SEQ, TEST_SEQ, INSPECTION_PGM_ID, INSPECTION_PGM_STATUS FROM GAL712TBX WHERE PRODUCT_ID = @PRODUCT_ID@ AND INSPECTION_PGM_ID = @PROGRAM_ID@ ) T712 ON T710.PRODUCT_ID = T712.PRODUCT_ID AND T710.HISTORY_SEQ = T712.HISTORY_SEQ AND T710.TEST_SEQ = T712.TEST_SEQ FULL JOIN (SELECT PRODUCT_ID, HISTORY_SEQ, TEST_SEQ, INSPECTION_PGM_ID, INSPECTION_PARAM_ID, INSPECTION_PARAM_VALUE, INSPECTION_PARAM_TYPE FROM GAL713TBX WHERE PRODUCT_ID = @PRODUCT_ID@ AND INSPECTION_PGM_ID = @PROGRAM_ID@ ) T713 ON (T710.PRODUCT_ID = T713.PRODUCT_ID AND T710.HISTORY_SEQ = T713.HISTORY_SEQ AND T710.TEST_SEQ = T713.TEST_SEQ) OR (T712.PRODUCT_ID = T713.PRODUCT_ID AND T712.HISTORY_SEQ = T713.HISTORY_SEQ AND T712.TEST_SEQ = T713.TEST_SEQ AND T712.INSPECTION_PGM_ID = T713.INSPECTION_PGM_ID) ) AS A ON T709.PRODUCT_ID = A.PRODUCT_ID AND T709.HISTORY_SEQ = A.HISTORY_SEQ LEFT JOIN GAL715TBX T715 ON A.INSPECTION_PARAM_ID = T715.INSPECTION_PARAM_ID WHERE T709.PRODUCT_ID = @PRODUCT_ID@ ORDER BY T709.HISTORY_SEQ, A.TEST_SEQ, T715.INSPECTION_PARAM_NAME FOR READ ONLY";

	public List<Object[]> findDistinctLetMdfyHstryPgmByProductId(String productId) {
		String qry = GET_DISTINCT_LET_MODIFY_HISTORY_PROGRAM_BY_PRODUCTID.replace("@PRODUCT_ID@", "'" + productId.trim() + "'");
		return findAllByNativeQuery(qry, null, Object[].class);
	}
	
	public List<Object[]> findLetModifyResultHistoryByProductId(String productId) {
		Parameters params = Parameters.with("1", productId);
		return findAllByNativeQuery(GET_LET_MODIFY_RESULT_HISTORY_BY_PRODUCTID, params, Object[].class);
	}
	
	public List<Object[]> getInpsectionDetails(String productId, Integer programId) {
		String qry = GET_INPECTION_DETAILS.replace("@PRODUCT_ID@", "'" + productId.trim() + "'");
		qry = qry.replace("@PROGRAM_ID@", programId.toString());
		return findAllByNativeQuery(qry, null, Object[].class);
	}
	
	public Integer getMaxHistorySeq(String productId) {
		Parameters params = Parameters.with("id.productId", productId);
		Integer maxSeq = max("id.historySeq", Integer.class, params);
		return maxSeq == null ? 1 : maxSeq + 1;
	}
}
