// decls.h
// AutoMod 12.3.1 Generated File
// Build: 2152.80
// Model name:	base
// Applied/AutoMod Licensee Confidential
// NO DISTRIBUTION OR REPRODUCTION RIGHTS GRANTED!
// Copyright (c) 1988-2010 Applied Materials All rights reserved.
//
// All Rights Reserved.  Reproduction or transmission in whole or
// in part, in any form or by any means, electronic, mechanical or
// otherwise, is prohibited without the prior written consent of
// copyright owner.
//
// Licensed Material - Property of Applied Materials, Inc.
//
// Applied Materials, Inc.
// 3050 Bowers Drive
// P.O. Box 58039
// Santa Clara, CA 95054-3299
// U.S.A.
//


#ifndef __DECLS_H__
#define __DECLS_H__

#include "user.h"
struct model_pf_ohc_struct {
	System* $sys;
	LocHead* am_W18;
	LocHead* am_ST152;
	LocHead* am_W37;
	LocHead* am_ST161;
	LocHead* am_W28;
	LocHead* am_ST_B2;
	LocHead* am_ST12_8;
	LocHead* am_W19;
	LocHead* am_STN_30;
	LocHead* am_ST_B1;
	LocHead* am_ST134;
	LocHead* am_W29;
	LocHead* am_W36;
	LocHead* am_ST_B3;
	LocHead* am_W35;
	LocHead* am_ST12_9;
	LocHead* am_ST153;
	LocHead* am_nostop;
	LocHead* am_ST154;
	LocHead* am_ST_B4;
	LocHead* am_W24;
	LocHead* am_ST110;
	LocHead* am_W15;
	LocHead* am_W25;
	LocHead* am_ST_B5;
	LocHead* am_W16;
	LocHead* am_ST155;
	LocHead* am_W26;
	LocHead* am_W27;
	LocHead* am_ST5_1;
	LocHead* am_ST12_4;
	LocHead* am_W30;
	LocHead* am_ST8_4;
	LocHead* am_W21;
	LocHead* am_ST101;
	LocHead* am_ST113;
	LocHead* am_ST6_3;
	LocHead* am_ST4_2;
	LocHead* am_ST9_4;
	LocHead* am_ST4_1;
	LocHead* am_W22;
	LocHead* am_ST7_3;
	LocHead* am_ST5_2;
	LocHead* am_W23;
	LocHead* am_ST8_5;
	LocHead* am_ST12_5;
	LocHead* am_W13;
	LocHead* am_ST4_3;
	LocHead* am_ST6_2;
	LocHead* am_ST112;
	LocHead* am_ST6_1;
	LocHead* am_ST122;
	LocHead* am_ST5_3;
	LocHead* am_ST7_2;
	LocHead* am_ST115;
	LocHead* am_ST12_6;
	LocHead* am_ST9_1;
	LocHead* am_ST8_2;
	LocHead* am_W33;
	LocHead* am_ST8_1;
	LocHead* am_ST5_4;
	LocHead* am_ST9_2;
	LocHead* am_W32;
	LocHead* am_ST6_4;
	LocHead* am_ST12_7;
	LocHead* am_ST8_3;
	LocHead* am_ST7_4;
	LocHead* am_W31;
	LocHead* am_ST5_5;
	LocHead* am_W20;
	LocHead* am_ST124;
	LocHead* am_ST9_3;
	LocHead* am_ST10;
	VehSegSpec* am_OHC_CarrierSeg;
	LocHead* am_ST12_35;
	LocHead* am_ST12_24;
	LocHead* am_ST12_1;
	LocHead* am_ST12_13;
	LocHead* am_ST12;
	LocHead* am_W34_2;
	LocHead* am_ST11;
	LocHead* am_ST12_14;
	LocHead* am_W34_1;
	LocHead* am_ST12_23;
	LocHead* am_ST_LiftDown;
	LocHead* am_ST12_2;
	LocHead* am_ST12_26;
	LocHead* am_ST12_15;
	LocHead* am_ST12_33;
	LocHead* am_Start;
	LocHead* am_ST12_3;
	LocHead* am_ST12_16;
	LocHead* am_ST12_25;
	LocHead* am_ST12_34;
	LocHead* am_ST3;
	LocHead* am_ST16;
	ConvMotor* am_M_chain8;
	LocHead* am_ST15;
	LocHead* am_ST12_27;
	Photoeye* am_LS_13;
	LocHead* am_ST35;
	ConvMotor* am_M_chain9;
	LocHead* am_ST12_17;
	Photoeye* am_LS_24;
	LocHead* am_ST13;
	LocHead* am_ST12_29;
	LocHead* am_ST12_18;
	LocHead* am_ST8;
	LocHead* am_ST12_19;
	LocHead* am_ST12_28;
	LocHead* am_ST14;
	ConvMotor* am_M_chain5;
	ConvStationType* am_StopStation;
	LocHead* am_ST5_11;
	Photoeye* am_LS_17;
	ConvMotor* am_M_chain6;
	ConvPhotoeyeType* am_RowEnd;
	LocHead* am_ST5_12;
	LocHead* am_ST5_7a;
	LocHead* am_Par2;
	VehType* am_OHC_Carrier;
	LocHead* am_ST_B30;
	ContainerDef* am_TCF;
	LocHead* am_Par1;
	LocHead* am_ST5_13;
	ConvMotor* am_M_chain7;
	LocHead* am_ST_B10;
	LocHead* am_ST_B20;
	ConvPhotoeyeType* am_WEBufferReceived;
	LocHead* am_ST12_32;
	LocHead* am_ST_B11;
	LocHead* am_ST12_21;
	LocHead* am_ST_B21;
	LocHead* am_Par4;
	LocHead* am_ST12_10;
	LocHead* am_Par3;
	LocHead* am_ST12_11;
	ConvMotor* am_M_chain3;
	LocHead* am_ST_B12;
	LocHead* am_ST12_20;
	LocHead* am_ST_B22;
	Photoeye* am_LS_10442;
	Photoeye* am_peLiftClear;
	LocHead* am_ST12_12;
	LocHead* am_ST_B13;
	LocHead* am_ST12_30;
	LocHead* am_ST_B23;
	ConvMotor* am_M_chain4;
	LocHead* am_ST12_22;
	LocHead* am_Par6;
	LocHead* am_ST12_31;
	Photoeye* am_LS_10275;
	LocHead* am_ST5_10;
	LocHead* am_Par5;
	ConvMotor* am_M_chain10;
	LocHead* am_ST127;
	LocHead* am_ST7_7;
	LocHead* am_ST_B24;
	System* am_parentsys;
	LocHead* am_ST5_6;
	LocHead* am_ST_B14;
	LocHead* am_ST_B25;
	LocHead* am_ST5_7;
	LocHead* am_ST7_6;
	LocHead* am_ST_B15;
	LocHead* am_ST7_9;
	LocHead* am_ST_B26;
	LocHead* am_ST5_8;
	ConvMotor* am_M_chain1;
	LocHead* am_ST108;
	LocHead* am_ST_B16;
	ConvStationType* am_StorageRows;
	LocHead* am_ST119;
	LocHead* am_ST109;
	LocHead* am_ST128;
	LocHead* am_ST5_9;
	LocHead* am_ST_B27;
	LocHead* am_ST7_8;
	ConvMotor* am_M_chain2;
	LocHead* am_ST_B17;
	LocHead* am_ST118;
	LocHead* am_ST_B28;
	LocHead* am_ST_B6;
	LocHead* am_ST156;
	LocHead* am_ST138;
	LocHead* am_ST_B18;
	LocHead* am_ST_B29;
	LocHead* am_ST_B19;
	LocHead* am_ST_B7;
	ConvPhotoeyeType* am_RowSwitch;
	LocHead* am_ST136;
	LocHead* am_ST_B8;
	LocHead* am_ST158;
	LocHead* am_ST146;
	LocHead* am_ST159;
	LocHead* am_ST_B9;
};
struct model_C_Press_struct {
	System* $sys;
	LocHead* am_sta8;
	LocHead* am_sta10;
	LocHead* am_sta9;
	LocHead* am_sta1;
	LocHead* am_sta2;
	LocHead* am_sta4;
	LocHead* am_sta3;
	LocHead* am_sta7;
	LocHead* am_sta5;
	LocHead* am_sta6;
	System* am_parentsys;
};
struct model_K_RBT_struct {
	System* $sys;
	LocHead* am_Rob1Work2;
	LocHead* am_Rob1Clear3;
	LocHead* am_Rob2Work2;
	LocHead* am_Rob2Clear3;
	LocHead* am_Rob2Clear1;
	LocHead* am_Rob1Clear1;
	LocHead* am_Rob1Clear2;
	LocHead* am_Rob2Work3;
	LocHead* am_Rob2Clear2;
	LocHead* am_Rob1Work3;
	LocHead* am_Rob5Clear3;
	LocHead* am_Rob3Work3;
	LocHead* am_Rob5Work2;
	LocHead* am_Rob4Clear1;
	LocHead* am_Rob3Clear2;
	LocHead* am_Rob6Clear3;
	LocHead* am_Rob6Work2;
	LocHead* am_Rob3Clear1;
	LocHead* am_Rob4Clear2;
	LocHead* am_Rob4Work3;
	LocHead* am_Rob6Work3;
	LocHead* am_Rob5Clear2;
	LocHead* am_Rob3Work2;
	LocHead* am_Rob5Work3;
	LocHead* am_Rob6Clear2;
	LocHead* am_Rob3Clear3;
	LocHead* am_Rob4Work2;
	LocHead* am_Rob4Clear3;
	LocHead* am_Rob6Clear1;
	LocHead* am_Rob5Clear1;
	VehSegSpec* am_RobotSeg;
	LocHead* am_Rob4Pounce1;
	LocHead* am_Rob2Home;
	LocHead* am_Rob5Pounce2;
	LocHead* am_Rob1Home;
	LocHead* am_Rob6Pounce2;
	LocHead* am_Rob3Pounce1;
	LocHead* am_Rob4Pounce2;
	ContainerDef* am_LoadGoesHere;
	LocHead* am_Rob1Pounce3;
	LocHead* am_Rob2Pounce3;
	LocHead* am_Rob5Pounce1;
	LocHead* am_Rob6Pounce1;
	LocHead* am_Rob3Pounce2;
	LocHead* am_Rob4Pounce3;
	LocHead* am_Rob1Pounce2;
	LocHead* am_Rob6Home;
	LocHead* am_Rob2Pounce2;
	LocHead* am_Rob5Home;
	LocHead* am_Rob3Pounce3;
	LocHead* am_Rob3Home;
	LocHead* am_Rob1Pounce1;
	LocHead* am_Rob2Pounce1;
	LocHead* am_Rob5Pounce3;
	LocHead* am_Rob6Pounce3;
	LocHead* am_Rob4Home;
	System* am_parentsys;
	LocHead* am_Rob4Work1;
	LocHead* am_Rob3Work1;
	VehType* am_Robot;
	LocHead* am_Rob6Work1;
	LocHead* am_Rob5Work1;
	LocHead* am_Rob2Work1;
	LocHead* am_Rob1Work1;
};
struct model_S_Legend_struct {
	System* $sys;
	System* am_parentsys;
};
struct model_S_3DTrack_struct {
	System* $sys;
	System* am_parentsys;
};
struct model_sNewLayout_struct {
	System* $sys;
	System* am_parentsys;
};
struct model_sNewPress_struct {
	System* $sys;
	System* am_parentsys;
};
struct model_sNewPress2_struct {
	System* $sys;
	System* am_parentsys;
};
struct model_sNewPress3_struct {
	System* $sys;
	System* am_parentsys;
};
struct model_kLift_struct {
	System* $sys;
	LocHead* am_staDown;
	VehSegSpec* am_DefSeg;
	LocHead* am_staUp;
	VehType* am_kLift;
	System* am_parentsys;
	ContainerDef* am_Container1;
};
extern iofile* ffp_base_arc_RESULTS_StoreIn_out;	/* 'base.arc/RESULTS/StoreIn.out */
extern iofile* ffp_base_arc_RESULTS_StoreOut1_out;	/* 'base.arc/RESULTS/StoreOut1.out */
extern iofile* ffp_base_arc_RESULTS_StoreOut2_out;	/* 'base.arc/RESULTS/StoreOut2.out */
extern iofile* ffp_base_arc_DATA_general_dat;	/* 'base.arc/DATA/general.dat */
extern iofile* ffp_base_arc_DATA_modellist_dat;	/* 'base.arc/DATA/modellist.dat */
extern iofile* ffp_base_arc_DATA_down_dat;	/* 'base.arc/DATA/down.dat */
extern iofile* ffp_base_arc_DATA_stpshift_dat;	/* 'base.arc/DATA/stpshift.dat */
extern iofile* ffp_base_arc_DATA_wldshift_dat;	/* 'base.arc/DATA/wldshift.dat */
extern iofile* ffp_base_arc_DATA_variations_dat;	/* 'base.arc/DATA/variations.dat */
extern iofile* ffp_base_arc_RESULTS_out_dat;	/* 'base.arc/RESULTS/out.dat */
extern iofile* ffp_base_arc_RESULTS_avg_out;	/* 'base.arc/RESULTS/avg.out */
extern iofile* ffp_base_arc_RESULTS_JSON_out;	/* 'base.arc/RESULTS/JSON.out */
char* Acceleration_valstrfunc(void*);
Acceleration Acceleration_strvalfunc(char*);
char* BlockPtr_valstrfunc(void*);
block* BlockPtr_strvalfunc(char*);
char* BlockList_valstrfunc(void*);
char* Color_valstrfunc(void*);
ASI_Color Color_strvalfunc(char*);
char* ContainerPtr_valstrfunc(void*);
Container* ContainerPtr_strvalfunc(char*);
char* ContainerList_valstrfunc(void*);
char* CounterPtr_valstrfunc(void*);
counter* CounterPtr_strvalfunc(char*);
char* Distance_valstrfunc(void*);
Distance Distance_strvalfunc(char*);
char* FilePtr_valstrfunc(void*);
iofile* FilePtr_strvalfunc(char*);
char* GraphPtr_valstrfunc(void*);
bgraph* GraphPtr_strvalfunc(char*);
char* Integer_valstrfunc(void*);
int32 Integer_strvalfunc(char*);
char* LabelPtr_valstrfunc(void*);
label* LabelPtr_strvalfunc(char*);
char* LoadPtr_valstrfunc(void*);
load* LoadPtr_strvalfunc(char*);
char* LoadList_valstrfunc(void*);
char* LoadTypePtr_valstrfunc(void*);
loadtype* LoadTypePtr_strvalfunc(char*);
char* Location_valstrfunc(void*);
simloc* Location_strvalfunc(char*);
char* LocationList_valstrfunc(void*);
char* MonitorPtr_valstrfunc(void*);
State_machine* MonitorPtr_strvalfunc(char*);
char* MotorPtr_valstrfunc(void*);
ConvMotor* MotorPtr_strvalfunc(char*);
char* OrderListPtr_valstrfunc(void*);
ordlist* OrderListPtr_strvalfunc(char*);
char* PathPtr_valstrfunc(void*);
Path* PathPtr_strvalfunc(char*);
char* PathList_valstrfunc(void*);
char* PhotoeyePtr_valstrfunc(void*);
Photoeye* PhotoeyePtr_strvalfunc(char*);
char* ProcessPtr_valstrfunc(void*);
process* ProcessPtr_strvalfunc(char*);
char* QueuePtr_valstrfunc(void*);
queue* QueuePtr_strvalfunc(char*);
char* Rate_valstrfunc(void*);
Rate Rate_strvalfunc(char*);
char* Real_valstrfunc(void*);
double Real_strvalfunc(char*);
char* ResourcePtr_valstrfunc(void*);
resource* ResourcePtr_strvalfunc(char*);
char* SchedJobPtr_valstrfunc(void*);
SchedJob* SchedJobPtr_strvalfunc(char*);
char* SchedJobList_valstrfunc(void*);
char* SectionPtr_valstrfunc(void*);
ConvSection* SectionPtr_strvalfunc(char*);
char* SocketPtr_valstrfunc(void*);
amSocket* SocketPtr_strvalfunc(char*);
char* StatePtr_valstrfunc(void*);
States* StatePtr_strvalfunc(char*);
char* StreamPtr_valstrfunc(void*);
rnstream* StreamPtr_strvalfunc(char*);
char* String_valstrfunc(void*);
char* String_strvalfunc(char*);
char* StringList_valstrfunc(void*);
char* SystemPtr_valstrfunc(void*);
System* SystemPtr_strvalfunc(char*);
char* TablePtr_valstrfunc(void*);
table* TablePtr_strvalfunc(char*);
char* Time_valstrfunc(void*);
ASITime Time_strvalfunc(char*);
char* TransferPtr_valstrfunc(void*);
ConvTransfer* TransferPtr_strvalfunc(char*);
char* VehiclePtr_valstrfunc(void*);
vehicle* VehiclePtr_strvalfunc(char*);
char* VehicleList_valstrfunc(void*);
char* VehSegPtr_valstrfunc(void*);
VehSeg* VehSegPtr_strvalfunc(char*);
char* VehSegList_valstrfunc(void*);
char* Velocity_valstrfunc(void*);
Velocity Velocity_strvalfunc(char*);
char* LocationListList_valstrfunc(void*);
char* IntegerList_valstrfunc(void*);
char* Ptr2Socket_valstrfunc(void*);
struct Ptr2Socket* Ptr2Socket_strvalfunc(char*);
char* Ptr2JSON_valstrfunc(void*);
struct cJSON* Ptr2JSON_strvalfunc(char*);
struct model_struct {
	System* $sys;
	ContainerDef* am_TCF27;
	process* am_P_SPO_Process;
	variable* am_Vs_junk$var;
	char* am_Vs_junk;
	variable* am_viABayCleanUp$var;
	int32 am_viABayCleanUp;
	resource* am_R_Weld;
	attribute* am_Ai_CarQty$att;
	table* am_T_CarWait;
	resource* am_rStampingShift;
	variable* am_Vldptr_Partial$var;
	load* *am_Vldptr_Partial;
	rnstream* am_stream77;
	subrtn* am_Sr_WriteJSONFile$sub;
	int32 (*am_Sr_WriteJSONFile)(load*, int32, void*);
	variable* am_Vo_RBT$var;
	ordlist* (*am_Vo_RBT)[4];
	rnstream* am_stream103;
	variable* am_vsTemp$var;
	char* am_vsTemp;
	variable* am_Vi_CheckQty$var;
	int32 *am_Vi_CheckQty;
	rnstream* am_stream34;
	variable* am_Vi_Down$var;
	int32 *am_Vi_Down;
	variable* am_viZoneLaneMax$var;
	int32 *am_viZoneLaneMax;
	variable* am_Vi_shiftProd$var;
	int32 *am_Vi_shiftProd;
	ContainerDef* am_TCF17;
	States* am_Blocked;
	variable* am_Vld_EmptyLoop$var;
	load* am_Vld_EmptyLoop;
	rnstream* am_stream_R_Weld_1;
	ContainerDef* am_TCF16;
	ordlist* am_olSpaceAvail;
	variable* am_vjsonStruct$var;
	struct cJSON* am_vjsonStruct;
	resource* am_R_Line;
	variable* am_vsockSocket$var;
	struct Ptr2Socket* am_vsockSocket;
	variable* am_Vld_MixedPart$var;
	load* am_Vld_MixedPart;
	variable* am_Vi_Seq$var;
	int32 am_Vi_Seq;
	variable* am_vldPrevHolder$var;
	load* am_vldPrevHolder;
	attribute* am_Ai_StampingPriority$att;
	variable* am_viWeldDay$var;
	int32 *am_viWeldDay;
	variable* am_viInitQtyV$var;
	int32 *am_viInitQtyV;
	variable* am_viBlocked$var;
	int32 (*am_viBlocked)[3];
	variable* am_Vld_SPO_Release$var;
	load* *am_Vld_SPO_Release;
	ContainerDef* am_TCF26;
	variable* am_viSTRunOutQty$var;
	int32 *am_viSTRunOutQty;
	resource* am_rCLine;
	variable* am_vi_NumType2$var;
	int32 am_vi_NumType2;
	rnstream* am_stream44;
	variable* am_vlocptrSTLoad$var;
	simloc* (*am_vlocptrSTLoad)[5][3];
	variable* am_Vi_CarrierQtyAutostat$var;
	int32 am_Vi_CarrierQtyAutostat;
	variable* am_Vs_arrstr$var;
	char* *am_Vs_arrstr;
	counter* am_C_CarrierCount;
	ordlist* am_O_WE2BufferLH;
	rnstream* am_stream102;
	process* am_die;
	variable* am_vrStyleCT$var;
	double (*am_vrStyleCT)[3][3];
	table* am_tRecircCount;
	variable* am_vlptrLoadGraphic$var;
	load* (*am_vlptrLoadGraphic)[3];
	attribute* am_As_CurrentLocation$att;
	rnstream* am_stream43;
	variable* am_vsWeldStatus$var;
	char* am_vsWeldStatus;
	rnstream* am_stream_R_WeldComplete_1;
	ContainerDef* am_TCF29;
	variable* am_Vflptr_WeldSched$var;
	iofile* *am_Vflptr_WeldSched;
	function* am_F_getID$func;
	int32 (*am_F_getID)(void);
	ContainerDef* am_TCF19;
	variable* am_vldlstLanes$var;
	AMLoadList* (*am_vldlstLanes)[21];
	variable* am_viInitQty2$var;
	int32 *am_viInitQty2;
	rnstream* am_stream76;
	variable* am_viTotalStorageParts$var;
	int32 *am_viTotalStorageParts;
	variable* am_viPrevLotNo$var;
	int32 am_viPrevLotNo;
	variable* am_vrStopTime$var;
	double *am_vrStopTime;
	ContainerDef* am_TCF28;
	rnstream* am_stream33;
	rnstream* am_stream75;
	ordlist* am_O_SPO_ReleaseComplete;
	attribute* am_As_NextLocation$att;
	variable* am_Vldptr_Unload$var;
	load* *am_Vldptr_Unload;
	variable* am_Vstrm_DT$var;
	rnstream* *am_Vstrm_DT;
	variable* am_vsStyle2$var;
	char* *am_vsStyle2;
	resource* am_rBLineTravel;
	variable* am_Vr_SPOCycleTime$var;
	double *am_Vr_SPOCycleTime;
	variable* am_Vi_ZoneMix$var;
	int32 (*am_Vi_ZoneMix)[21];
	ContainerDef* am_TCF18;
	ordlist* am_oCarrierInit;
	variable* am_Vi_EmptyReq$var;
	int32 am_Vi_EmptyReq;
	variable* am_vsStation$var;
	char* (*am_vsStation)[21];
	variable* am_vrDieChangeTime$var;
	double *am_vrDieChangeTime;
	attribute* am_Ai_Row$att;
	ordlist* am_O_WaitForPartialRelease;
	ordlist* am_O_RBT;
	rnstream* am_stream47;
	variable* am_Vi_InclDT$var;
	int32 *am_Vi_InclDT;
	rnstream* am_stream28;
	counter* am_C_Error;
	variable* am_vsStyle$var;
	char* *am_vsStyle;
	variable* am_viTriggerQtyAS2$var;
	int32 am_viTriggerQtyAS2;
	variable* am_Vi_CarQty$var;
	int32 am_Vi_CarQty;
	variable* am_viMinShotSize2$var;
	int32 (*am_viMinShotSize2)[3];
	variable* am_vmMotor$var;
	ConvMotor* *am_vmMotor;
	counter* am_C_SPOControl;
	ordlist* am_olPartKill;
	ordlist* am_oST5_13;
	variable* am_vphoLanes$var;
	Photoeye* (*am_vphoLanes)[21];
	States* am_Down;
	rnstream* am_stream_R_Dummy_1;
	struct model_C_Press_struct am_C_Press;
	variable* am_Vi_ZoneSpace$var;
	int32 (*am_Vi_ZoneSpace)[3];
	rnstream* am_stream29;
	rnstream* am_stream37;
	variable* am_Vi_StampingPriority$var;
	int32 *am_Vi_StampingPriority;
	variable* am_Vi_SplitSPO$var;
	int32 am_Vi_SplitSPO;
	variable* am_viTriggerQty$var;
	int32 *am_viTriggerQty;
	rnstream* am_stream_R_ReleasePartial_1;
	ordlist* am_oHold;
	attribute* am_Ai_Seq$att;
	attribute* am_Ai_Status$att;
	rnstream* am_stream19;
	States* am_PlannedDT;
	resource* am_R_WeldShift;
	subrtn* am_SR_AttributeReset$sub;
	int32 (*am_SR_AttributeReset)(load*, int32, void*);
	rnstream* am_stream35;
	variable* am_Vi_Temp$var;
	int32 am_Vi_Temp;
	ordlist* am_olWarmUp;
	table* am_T_WeldGap;
	variable* am_Vi_WeldOutputTarget$var;
	int32 *am_Vi_WeldOutputTarget;
	rnstream* am_stream46;
	variable* am_viTriggerQtyAS1$var;
	int32 am_viTriggerQtyAS1;
	variable* am_viModelOther$var;
	int32 *am_viModelOther;
	process* am_P_WeldShift;
	label* am_Lb_StampShiftStatus;
	attribute* am_As_Type$att;
	variable* am_Vr_Scrap2$var;
	double *am_Vr_Scrap2;
	resource* am_R_LineStarved;
	rnstream* am_stream104;
	process* am_pStorage;
	rnstream* am_stream45;
	State_machine* am_vsmPressCondition;
	table* am_T_Changeover;
	States* am_DieChange;
	variable* am_viVariation$var;
	int32 *am_viVariation;
	ordlist* am_oStorageInit;
	variable* am_Vs_Downtime$var;
	char* *am_Vs_Downtime;
	rnstream* am_stream105;
	struct model_K_RBT_struct am_K_RBT;
	rnstream* am_stream18;
	label* am_Lb_PartNames;
	process* am_P_Time;
	variable* am_Vld_SPO$var;
	load* *am_Vld_SPO;
	variable* am_viReqVeh$var;
	int32 am_viReqVeh;
	variable* am_vsReponse$var;
	char* am_vsReponse;
	variable* am_Vi_ReleaseAS$var;
	int32 am_Vi_ReleaseAS;
	variable* am_viMixPrevRow$var;
	int32 am_viMixPrevRow;
	rnstream* am_stream36;
	variable* am_Vi_WeldGap$var;
	int32 *am_Vi_WeldGap;
	variable* am_OPCTimestamp$var;
	char* am_OPCTimestamp;
	States* am_Production;
	variable* am_Vi_SplitSPOAS$var;
	int32 am_Vi_SplitSPOAS;
	variable* am_viSTRunOutQtyAS4$var;
	int32 am_viSTRunOutQtyAS4;
	variable* am_Vi_RecircCount$var;
	int32 *am_Vi_RecircCount;
	variable* am_Vi_ZoneEmptyFlush$var;
	int32 am_Vi_ZoneEmptyFlush;
	ordlist* am_oZoneMixRecircComplete;
	attribute* am_Ai_LotNo$att;
	ordlist* am_O_HoldForCarriers;
	variable* am_Vs_InclDT$var;
	char* *am_Vs_InclDT;
	label* am_lblScrap;
	table* am_T_MTBF;
	label* am_lblShotSize;
	variable* am_Vrsc_DT$var;
	resource* *am_Vrsc_DT;
	rnstream* am_stream5;
	attribute* am_Aloc_Destination$att;
	rnstream* am_stream80;
	variable* am_vclr_LoadColorV$var;
	ASI_Color *am_vclr_LoadColorV;
	resource* am_R_ReleasePartial;
	variable* am_Vldlst_Type$var;
	AMLoadList* *am_Vldlst_Type;
	variable* am_vsSpoByType$var;
	char* *am_vsSpoByType;
	process* am_pEmptyCarrierManagement;
	process* am_P_ReleasePartial;
	variable* am_Vld_ZoneExit$var;
	load* *am_Vld_ZoneExit;
	process* am_P_LoadRBT;
	rnstream* am_stream6;
	ordlist* am_O_ReleasePartial;
	attribute* am_Ai_Type$att;
	variable* am_vlocptrLane$var;
	simloc* (*am_vlocptrLane)[21];
	rnstream* am_stream3;
	attribute* am_Ai_z$att;
	variable* am_Vr_WeldStarveTime$var;
	double *am_Vr_WeldStarveTime;
	ordlist* am_O_VehicleStart;
	process* am_P_StampingShift;
	process* am_pEmptyCarrierReturn;
	variable* am_Vi_PrevType$var;
	int32 *am_Vi_PrevType;
	variable* am_viABayTrigger$var;
	int32 am_viABayTrigger;
	rnstream* am_stream4;
	variable* am_Vi_EmptyReqAutostat$var;
	int32 am_Vi_EmptyReqAutostat;
	attribute* am_Ai_x$att;
	counter* am_C_ZoneMix;
	variable* am_Vldlst_ReleasePartial$var;
	AMLoadList* (*am_Vldlst_ReleasePartial)[31];
	variable* am_viTriggerQtyAS3$var;
	int32 am_viTriggerQtyAS3;
	table* am_T_MTTR;
	attribute* am_Ai_y$att;
	variable* am_Vr_Uptime$var;
	double *am_Vr_Uptime;
	attribute* am_Ai_Side$att;
	rnstream* am_stream31;
	variable* am_viZoneSortPriority$var;
	int32 *am_viZoneSortPriority;
	process* am_P_PartialRelease;
	variable* am_Vi_StorePrevType$var;
	int32 am_Vi_StorePrevType;
	rnstream* am_stream8;
	struct model_sNewPress2_struct am_sNewPress2;
	variable* am_Vr_WeldCycleTime$var;
	double *am_Vr_WeldCycleTime;
	label* am_Lb_Inventory;
	variable* am_Vldlst_Release$var;
	AMLoadList* *am_Vldlst_Release;
	variable* am_Vloc_B4Unload$var;
	simloc* *am_Vloc_B4Unload;
	ordlist* am_O_PartialRelease;
	ordlist* am_olEmptyHold;
	variable* am_Vi_LotNo$var;
	int32 am_Vi_LotNo;
	ordlist* am_O_WeldOutputTarget;
	variable* am_vsMessage$var;
	char* am_vsMessage;
	variable* am_Vld_Sort$var;
	load* am_Vld_Sort;
	variable* am_Vld_SortMarker$var;
	load* am_Vld_SortMarker;
	variable* am_Vi_TotNumWeldShiftEle$var;
	int32 (*am_Vi_TotNumWeldShiftEle)[3];
	ordlist* am_oST_B27;
	variable* am_viPressActive$var;
	int32 *am_viPressActive;
	rnstream* am_stream42;
	variable* am_vsZone$var;
	char* *am_vsZone;
	variable* am_viEmptyCarFlushQty$var;
	int32 (*am_viEmptyCarFlushQty)[21];
	variable* am_viTriggerQtyV$var;
	int32 *am_viTriggerQtyV;
	rnstream* am_stream41;
	struct model_sNewLayout_struct am_sNewLayout;
	attribute* am_At_TimeInSys$att;
	variable* am_viStorageInit$var;
	int32 *am_viStorageInit;
	counter* am_C_RunControl;
	rnstream* am_stream32;
	variable* am_Vld_Previous$var;
	load* am_Vld_Previous;
	rnstream* am_stream_R_SPO_Release_1;
	ordlist* am_oWeld2Changeover;
	attribute* am_Ai_Type2$att;
	process* am_P_Unload;
	rnstream* am_stream9;
	variable* am_Vi_TotNumShiftEle$var;
	int32 *am_Vi_TotNumShiftEle;
	rnstream* am_stream_L_Start_1;
	variable* am_Vldlst_PrevZone$var;
	AMLoadList* (*am_Vldlst_PrevZone)[3];
	queue* am_qVehOverflow;
	variable* am_viCLineEmptyTriggerAS$var;
	int32 am_viCLineEmptyTriggerAS;
	rnstream* am_stream40;
	variable* am_Vrsrc_ReleasePartial$var;
	resource* (*am_Vrsrc_ReleasePartial)[31];
	struct model_sNewPress3_struct am_sNewPress3;
	variable* am_Vi_PrevZone$var;
	int32 *am_Vi_PrevZone;
	resource* am_rBLine;
	label* am_Lb_WeldCycle;
	variable* am_viCarrierReleaseCount$var;
	int32 (*am_viCarrierReleaseCount)[3];
	System* am_modelsys;
	variable* am_viTriggerQtyAS4$var;
	int32 am_viTriggerQtyAS4;
	ordlist* am_oEmptyCarrierManagement;
	variable* am_Vi_ProdCount$var;
	int32 *am_Vi_ProdCount;
	variable* am_Vi_TypeHolder$var;
	int32 am_Vi_TypeHolder;
	variable* am_Vld_ReleaseCount$var;
	load* *am_Vld_ReleaseCount;
	process* am_P_PartialStorage;
	variable* am_vclr_LoadColor$var;
	ASI_Color *am_vclr_LoadColor;
	variable* am_Vld_OL$var;
	load* *am_Vld_OL;
	counter* am_C_L1Weld;
	variable* am_viEmptyLoad$var;
	int32 (*am_viEmptyLoad)[3];
	variable* am_viSTRunOutQtyAS3$var;
	int32 am_viSTRunOutQtyAS3;
	rnstream* am_stream30;
	rnstream* am_stream7;
	struct model_S_3DTrack_struct am_S_3DTrack;
	rnstream* am_stream_rST13Inspector_1;
	variable* am_vrscDowntime$var;
	resource* *am_vrscDowntime;
	variable* am_Vi_x$var;
	int32 am_Vi_x;
	label* am_lblPart;
	table* am_T_WeldStarve;
	variable* am_vsSortingRule$var;
	char* *am_vsSortingRule;
	resource* am_rST13Inspector;
	variable* am_viDailyTotal$var;
	int32 *am_viDailyTotal;
	attribute* am_As_Message$att;
	label* am_Lb_ZoneExit;
	ordlist* am_O_PrevClear;
	variable* am_vldlstLanePull$var;
	AMLoadList* (*am_vldlstLanePull)[21];
	rnstream* am_stream12;
	variable* am_Vldlst_ZoneExit$var;
	AMLoadList* *am_Vldlst_ZoneExit;
	States* am_OnePressRunningSpo;
	variable* am_vix$var;
	int32 am_vix;
	variable* am_Vproc_ReleasePartial$var;
	process* (*am_Vproc_ReleasePartial)[31];
	variable* am_viSpoPress$var;
	int32 *am_viSpoPress;
	resource* am_R_Dummy;
	variable* am_Vr_MTBFActual$var;
	double *am_Vr_MTBFActual;
	variable* am_vi$var;
	int32 am_vi;
	variable* am_Vi_SPO$var;
	int32 *am_Vi_SPO;
	rnstream* am_stream_rBLineTravel_1;
	ordlist* am_O_Temp;
	variable* am_viCarrierQty$var;
	int32 *am_viCarrierQty;
	variable* am_viVariationTracker$var;
	int32 *am_viVariationTracker;
	ordlist* am_O_PartialBuffer;
	variable* am_viTotalDay$var;
	int32 am_viTotalDay;
	ordlist* am_O_WE2BufferRH;
	variable* am_viSTRunOutQtyAS1$var;
	int32 am_viSTRunOutQtyAS1;
	variable* am_Vo_PartialBuffer$var;
	ordlist* (*am_Vo_PartialBuffer)[3];
	variable* am_vldlstCritInv$var;
	AMLoadList* *am_vldlstCritInv;
	ContainerDef* am_TCF2;
	variable* am_viTriggerQty2$var;
	int32 *am_viTriggerQty2;
	variable* am_Vi_LotQty$var;
	int32 *am_Vi_LotQty;
	rnstream* am_stream11;
	ContainerDef* am_TCF1;
	struct model_kLift_struct am_kLift;
	ordlist* am_O_StampingPriority;
	rnstream* am_stream20;
	label* am_lblState;
	variable* am_viEmptyBufferAvailable$var;
	int32 am_viEmptyBufferAvailable;
	variable* am_viKDcount$var;
	int32 *am_viKDcount;
	ordlist* am_oWeldChangeover;
	States* am_TwoPressRunningSpo;
	variable* am_vrStateTemp$var;
	double am_vrStateTemp;
	variable* am_vrBPressLiftUp$var;
	double am_vrBPressLiftUp;
	variable* am_Vr_MTTRActual$var;
	double *am_Vr_MTTRActual;
	variable* am_Vld_ZoneTakeDown$var;
	load* *am_Vld_ZoneTakeDown;
	variable* am_viStpShift$var;
	int32 am_viStpShift;
	variable* am_viSTRunOutQtyAS2$var;
	int32 am_viSTRunOutQtyAS2;
	variable* am_viInitializeSPO$var;
	int32 am_viInitializeSPO;
	variable* am_Vi_ScheduleCount$var;
	int32 (*am_Vi_ScheduleCount)[3];
	process* am_pEmptyRecirc;
	variable* am_vrWeldShiftDuration$var;
	double (*am_vrWeldShiftDuration)[4][3];
	variable* am_viZonePref$var;
	int32 (*am_viZonePref)[31];
	rnstream* am_stream21;
	variable* am_Vo_SPO$var;
	ordlist* (*am_Vo_SPO)[4];
	variable* am_Vloc_Unload$var;
	simloc* *am_Vloc_Unload;
	variable* am_Vi_ReqVehAutostat$var;
	int32 am_Vi_ReqVehAutostat;
	rnstream* am_stream10;
	variable* am_Vs_StmpShiftElement$var;
	char* (*am_Vs_StmpShiftElement)[11];
	ordlist* am_olRobHandshake;
	rnstream* am_stream22;
	variable* am_viPartCount$var;
	int32 (*am_viPartCount)[3];
	variable* am_viRecircCount$var;
	int32 am_viRecircCount;
	subrtn* am_Sr_OtherInv$sub;
	int32 (*am_Sr_OtherInv)(load*, int32, void*);
	loadtype* am_L_invis;
	variable* am_viMixCount$var;
	int32 am_viMixCount;
	subrtn* am_Sr_SPOSeq$sub;
	int32 (*am_Sr_SPOSeq)(load*, int32, void*);
	variable* am_viWeld2PrevType$var;
	int32 *am_viWeld2PrevType;
	variable* am_Vi_SPO_QtyRelease$var;
	int32 *am_Vi_SPO_QtyRelease;
	variable* am_Vintlst_BufferSpace$var;
	AM_IntegerList* *am_Vintlst_BufferSpace;
	variable* am_Vr_PartCount$var;
	double (*am_Vr_PartCount)[3];
	variable* am_Vi_WEBufferOrderTracker$var;
	int32 *am_Vi_WEBufferOrderTracker;
	attribute* am_Ai_pi$att;
	variable* am_viZonePullPriority$var;
	int32 *am_viZonePullPriority;
	ordlist* am_O_WeldBufferStarve;
	ordlist* am_O_ST13_SPO_Seq;
	label* am_Lb_Inv;
	attribute* am_Ai_ID$att;
	ContainerDef* am_TCF6;
	variable* am_Vs_WeldShiftElement$var;
	char* (*am_Vs_WeldShiftElement)[12][3];
	ordlist* am_olPressSide;
	ContainerDef* am_TCF5;
	variable* am_Vloc_LoadRBT$var;
	simloc* (*am_Vloc_LoadRBT)[8];
	rnstream* am_stream2;
	attribute* am_Ai_NonSPO$att;
	label* am_Lb_SPO;
	function* am_F_RequestMove$func;
	char* (*am_F_RequestMove)(load*);
	variable* am_Vi_Recirc$var;
	int32 *am_Vi_Recirc;
	variable* am_Vld_Schedule$var;
	load* *am_Vld_Schedule;
	variable* am_Vi_LoopCount$var;
	int32 am_Vi_LoopCount;
	variable* am_Vs_ProdType$var;
	char* (*am_Vs_ProdType)[3];
	ordlist* am_O_Weld1Order;
	variable* am_vlt_LoadType$var;
	loadtype* *am_vlt_LoadType;
	variable* am_Vr_MTTR$var;
	double *am_Vr_MTTR;
	ContainerDef* am_TCF7;
	variable* am_Vi_Release$var;
	int32 am_Vi_Release;
	variable* am_viStpDay$var;
	int32 am_viStpDay;
	variable* am_viInitRunQty$var;
	int32 *am_viInitRunQty;
	variable* am_Vs_str$var;
	char* am_Vs_str;
	subrtn* am_sAttributeStrip$sub;
	int32 (*am_sAttributeStrip)(load*, int32, void*);
	attribute* am_Ai_LotQty$att;
	ordlist* am_oEmptyRecirc;
	variable* am_Vldlst_Partial$var;
	AMLoadList* (*am_Vldlst_Partial)[31];
	ordlist* am_oST13Inspect;
	struct model_sNewPress_struct am_sNewPress;
	variable* am_Vo_ReleasePartial$var;
	ordlist* (*am_Vo_ReleasePartial)[31];
	variable* am_Vr_Scrap$var;
	double *am_Vr_Scrap;
	process* am_pInit;
	ContainerDef* am_TCF3;
	process* am_pNonSpoPartMgt;
	variable* am_Vi_StampingPriority2$var;
	int32 *am_Vi_StampingPriority2;
	rnstream* am_stream0;
	variable* am_viNumZones$var;
	int32 am_viNumZones;
	variable* am_Vi_WeldOutputTargetAS$var;
	int32 *am_Vi_WeldOutputTargetAS;
	ordlist* am_O_Weld2Order;
	label* am_lblCurrent;
	rnstream* am_stream_R_SPO_1;
	table* am_T_Output;
	variable* am_Vld_StampingPriority$var;
	load* am_Vld_StampingPriority;
	variable* am_Vi_TypeCheck$var;
	int32 am_Vi_TypeCheck;
	variable* am_vsWeldShift$var;
	char* (*am_vsWeldShift)[4][3];
	variable* am_Vr_CarWait$var;
	double (*am_Vr_CarWait)[3];
	variable* am_viABayTriggerAS$var;
	int32 am_viABayTriggerAS;
	States* am_NoCarriers;
	table* am_tABayCleanUp;
	resource* am_R_SPO_Release;
	process* am_P_SPO_Release;
	variable* am_Vr_WeldChangeoverTime$var;
	double *am_Vr_WeldChangeoverTime;
	variable* am_Vi_ReleasePartial$var;
	int32 (*am_Vi_ReleasePartial)[31];
	process* am_pCarrierLoad;
	ordlist* am_oBPressExit;
	variable* am_viVariationCount$var;
	int32 am_viVariationCount;
	attribute* am_Ai_Zone$att;
	variable* am_Vr_MTBF$var;
	double *am_Vr_MTBF;
	rnstream* am_stream_R_LineStarved_1;
	ContainerDef* am_TCF4;
	rnstream* am_stream1;
	variable* am_viCarrierQtyV$var;
	int32 *am_viCarrierQtyV;
	variable* am_volPartKill$var;
	ordlist* (*am_volPartKill)[3][3];
	rnstream* am_stream_R_ZoneExit_1;
	variable* am_vrBPressLiftDown$var;
	double am_vrBPressLiftDown;
	variable* am_viTrackStoreProcess$var;
	int32 am_viTrackStoreProcess;
	process* am_pWarmUp;
	ordlist* am_O_ReleaseSeq;
	subrtn* am_SR_TypeIndex$sub;
	int32 (*am_SR_TypeIndex)(load*, int32, void*);
	rnstream* am_stream25;
	variable* am_Vld_ReleasePrev$var;
	load* *am_Vld_ReleasePrev;
	ordlist* am_oEmptyBufferCleanUp;
	States* am_NoScheduledRuns;
	variable* am_vflptrInputData$var;
	iofile* am_vflptrInputData;
	variable* am_Vi_Count$var;
	int32 *am_Vi_Count;
	variable* am_Vi_BayCapacity$var;
	int32 *am_Vi_BayCapacity;
	variable* am_vrStyleCTV$var;
	double (*am_vrStyleCTV)[3];
	rnstream* am_stream17;
	variable* am_viKickOutQty$var;
	int32 *am_viKickOutQty;
	rnstream* am_stream26;
	process* am_P_StorageToBuffer;
	queue* am_Q_Legend;
	variable* am_viNumVeh$var;
	int32 am_viNumVeh;
	variable* am_vrCLineSlowCT$var;
	int32 am_vrCLineSlowCT;
	ordlist* am_O_Release;
	variable* am_viMinShotSize$var;
	int32 (*am_viMinShotSize)[3];
	variable* am_Vi_SortRow$var;
	int32 am_Vi_SortRow;
	struct model_S_Legend_struct am_S_Legend;
	variable* am_Vi_NumType$var;
	int32 am_Vi_NumType;
	process* am_P_Downtime;
	variable* am_viSTRunOutQtyV$var;
	int32 *am_viSTRunOutQtyV;
	ordlist* am_olSta8_1Incline;
	variable* am_vldWriteJSON$var;
	load* am_vldWriteJSON;
	rnstream* am_stream_rCLine_1;
	States* am_Starved;
	process* am_pSTRunControl;
	process* am_P_Legend;
	States* am_NoPressRunningSpo;
	variable* am_viClearABayFlag$var;
	int32 *am_viClearABayFlag;
	variable* am_vlptrEmpty$var;
	load* am_vlptrEmpty;
	variable* am_Vi_SortZone$var;
	int32 am_Vi_SortZone;
	variable* am_viWeldShift$var;
	int32 *am_viWeldShift;
	variable* am_Vld_Lot$var;
	load* *am_Vld_Lot;
	ordlist* am_oST5_12;
	variable* am_Vi_LineCount$var;
	int32 am_Vi_LineCount;
	rnstream* am_stream_R_Line_1;
	ContainerDef* am_TCF9;
	ordlist* am_O_WeldBuffer;
	rnstream* am_stream16;
	ContainerDef* am_TCF20;
	rnstream* am_stream_R_WeldShift_1;
	ContainerDef* am_TCF10;
	label* am_Lb_SPORelease;
	variable* am_viSta8_1Count$var;
	int32 am_viSta8_1Count;
	ordlist* am_O_Starved;
	ContainerDef* am_TCF8;
	rnstream* am_stream38;
	variable* am_viInitQty$var;
	int32 *am_viInitQty;
	variable* am_Vi_EmptyZone$var;
	int32 *am_Vi_EmptyZone;
	variable* am_viIndex$var;
	int32 am_viIndex;
	ordlist* am_O_Starve;
	variable* am_viTypeHold$var;
	int32 am_viTypeHold;
	rnstream* am_stream39;
	variable* am_vrStyleCT2$var;
	double (*am_vrStyleCT2)[3];
	rnstream* am_stream27;
	struct model_pf_ohc_struct am_pf_ohc;
	rnstream* am_stream15;
	ordlist* am_oZoneMixCheck;
	attribute* am_Ai_Press$att;
	variable* am_viVariationTarget$var;
	int32 *am_viVariationTarget;
	variable* am_viSTRunOutQty2$var;
	int32 *am_viSTRunOutQty2;
	process* am_pZoneMixCheck;
	label* am_Lb_WeldShiftStatus;
	variable* am_Vld_Crit$var;
	load* am_Vld_Crit;
	attribute* am_Ai_Line$att;
	variable* am_Vld_Sort2$var;
	load* am_Vld_Sort2;
	ContainerDef* am_TCF13;
	rnstream* am_stream_rStampingShift_1;
	process* am_pEmptyCarrierLaneSelect;
	ContainerDef* am_TCF23;
	variable* am_Vi_ZoneCapacity$var;
	int32 *am_Vi_ZoneCapacity;
	variable* am_Vi_Changeover$var;
	int32 *am_Vi_Changeover;
	ordlist* am_O_Synch;
	subrtn* am_Sr_StoreIn$sub;
	int32 (*am_Sr_StoreIn)(load*, int32, void*);
	variable* am_Variable1$var;
	int32 am_Variable1;
	variable* am_viOtherPress$var;
	int32 *am_viOtherPress;
	variable* am_Vi_Autostat$var;
	int32 am_Vi_Autostat;
	rnstream* am_stream14;
	ContainerDef* am_TCF30;
	queue* am_qTransferTemp;
	ContainerDef* am_TCF21;
	ContainerDef* am_TCF12;
	variable* am_viSTRunGen$var;
	int32 *am_viSTRunGen;
	ordlist* am_oPressSelect;
	ContainerDef* am_TCF11;
	variable* am_vsPullingRule$var;
	char* *am_vsPullingRule;
	ContainerDef* am_TCF22;
	variable* am_viProductionMin$var;
	int32 (*am_viProductionMin)[4];
	rnstream* am_stream101;
	variable* am_Vi_PartialIndex$var;
	int32 *am_Vi_PartialIndex;
	rnstream* am_stream23;
	variable* am_viEmptyCarPullQty$var;
	int32 (*am_viEmptyCarPullQty)[21];
	variable* am_Vi_RunTrigger$var;
	int32 *am_Vi_RunTrigger;
	resource* am_R_ZoneExit;
	ContainerDef* am_TCF15;
	label* am_Lb_Legend;
	ordlist* am_olVehOverflow;
	process* am_P_WeldSched;
	ordlist* am_olLoadEntry;
	variable* am_vsResponse$var;
	char* am_vsResponse;
	rnstream* am_stream24;
	variable* am_Vld_Release$var;
	load* *am_Vld_Release;
	variable* am_OPCQuality$var;
	int32 am_OPCQuality;
	variable* am_Vld_Recirc$var;
	load* *am_Vld_Recirc;
	variable* am_vrST13Inspect$var;
	double am_vrST13Inspect;
	variable* am_Vs_SimStart$var;
	char* am_Vs_SimStart;
	rnstream* am_stream79;
	variable* am_viCLineEmptyTrigger$var;
	int32 am_viCLineEmptyTrigger;
	variable* am_vrStpShiftDuration$var;
	double (*am_vrStpShiftDuration)[4];
	ordlist* am_olLine1Empty;
	rnstream* am_stream13;
	variable* am_Vi_PrevPartType$var;
	int32 *am_Vi_PrevPartType;
	variable* am_vsStpShift$var;
	char* (*am_vsStpShift)[4];
	variable* am_vrBLineSlowCT$var;
	int32 am_vrBLineSlowCT;
	ContainerDef* am_TCF25;
	variable* am_viWeek$var;
	int32 *am_viWeek;
	ContainerDef* am_TCF14;
	rnstream* am_stream100;
	resource* am_R_SPO;
	rnstream* am_stream_rBLine_1;
	ordlist* am_olCarKickout;
	variable* am_Vldlst_PartLane$var;
	AMLoadList* (*am_Vldlst_PartLane)[3];
	label* am_lblCycleTime;
	queue* am_Q_SPO;
	ordlist* am_O_BufferSpace;
	ordlist* am_oLiftClear;
	ordlist* am_oEmptyCarrierSpace;
	variable* am_viModelV$var;
	int32 *am_viModelV;
	function* am_F_ConnectSocket$func;
	int32 (*am_F_ConnectSocket)(void);
	variable* am_viABayCount$var;
	int32 am_viABayCount;
	variable* am_Vloc_Partial$var;
	simloc* (*am_Vloc_Partial)[3];
	ordlist* am_O_SPO;
	variable* am_vsStyleV$var;
	char* *am_vsStyleV;
	ordlist* am_O_Type;
	ContainerDef* am_TCF24;
	rnstream* am_stream78;
};
extern struct model_struct am_model;
void initglobs0();
#endif // __DECLS_H__
