// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.storage.web;

import com.honda.mfg.stamp.conveyor.domain.*;
import com.honda.mfg.stamp.conveyor.domain.enums.CarrierStatus;
import com.honda.mfg.stamp.conveyor.domain.enums.DEFECT_TYPE;
import com.honda.mfg.stamp.conveyor.domain.enums.Press;
import com.honda.mfg.stamp.conveyor.domain.enums.StopType;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.io.UnsupportedEncodingException;
import java.sql.Timestamp;
import java.util.*;

privileged aspect CarrierController_Roo_Controller {

    @RequestMapping(method = RequestMethod.POST)
    public String CarrierController.create(@Valid Carrier carrier, BindingResult bindingResult, Model uiModel,
                                           HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("carrier", carrier);
            addDateTimeFormatPatterns(uiModel);
            return "carriers/create";
        }
        uiModel.asMap().clear();

        carrier.persist();
        return "redirect:/carriers/" + encodeUrlPathSegment(carrier.getId().toString(), httpServletRequest);
    }

    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String CarrierController.createForm(Model uiModel) {
        Carrier c = new Carrier();
        uiModel.addAttribute("carrier", c);
        addDateTimeFormatPatterns(uiModel);
        return "carriers/create";
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String CarrierController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        CarrierMes carrierMes = CarrierMes.findCarrier(id);
        Carrier carrier = new Carrier();
        if (carrierMes != null) {
            carrier.setId(carrierMes.getId());
            carrier.setCarrierNumber(carrierMes.getCarrierNumber());
            carrier.setQuantity(carrierMes.getQuantity());
            carrier.setDie(Die.findDie(new Long(carrierMes.getDieNumber())));
            carrier.setCurrentLocation(Stop.findStop(carrierMes.getCurrentLocation()));
            carrier.setDestination(Stop.findStop(carrierMes.getDestination()));
            //carrier.setDestination(validDestination.getDestination());
            carrier.setPress(Press.findByType(carrierMes.getOriginationLocation()));
            carrier.setCarrierStatus(CarrierStatus.findByType(carrierMes.getStatus()));
            carrier.setProductionRunNo(carrierMes.getProductionRunNumber());
            carrier.setStampingProductionRunTimestamp(carrierMes.getProductionRunDate());
            carrier.setUpdateDate(carrierMes.getUpdateDate());
        }
        uiModel.addAttribute("carrier", carrier);
        uiModel.addAttribute("itemId", id);
        return "carriers/show";
    }

    private List<Carrier> CarrierController.findMovingCarriers() {
        List<Carrier> carrierList = new ArrayList<Carrier>();

        for (CarrierMes carrierMes : CarrierMes.findAllMovingCarriers()) {
            carrierList.add(carrierManagementService.getCarrier(carrierMes));
        }
        return carrierList;
    }

    @RequestMapping(value = "/moving", method = RequestMethod.GET)
    public String CarrierController.movingCarriers(@RequestParam(value = "page", required = false) Integer page,
                                                   @RequestParam(value = "size", required = false) Integer size,
                                                   Model uiModel) {
        List<Carrier> carrierList = findMovingCarriers();

        uiModel.addAttribute("openfind", true);
        uiModel.addAttribute("carriers", carrierList);
        uiModel.addAttribute("dies", Die.findAllDies());
        uiModel.addAttribute("stops", Stop.findAllStops());
        uiModel.addAttribute("carrierstatuses", Arrays.asList(CarrierStatus.class.getEnumConstants()));
        uiModel.addAttribute("presses", Arrays.asList(Press.class.getEnumConstants()));

        uiModel.addAttribute("productionRunNumbers", CarrierMes.getProductionRunNumbers());

        return "carriers/moving";
    }

    @RequestMapping(method = RequestMethod.GET)
    public String CarrierController.list(@RequestParam(value = "page", required = false) Integer page,
                                         @RequestParam(value = "size", required = false) Integer size,
                                         HttpServletRequest httpServletRequest,
                                         HttpServletResponse httpServletResponse, Model uiModel) {
        CarrierFinderCriteria finderCriteria = getSavedCarrierFinderCriteria(httpServletRequest);

        List<CarrierMes> carrierMeslist;
        List<Carrier> carrierList = new ArrayList<Carrier>();
        if (page != null || size != null) {
            int sizeNo = size == null ? 50 : size.intValue();

            if (finderCriteria == null) {
                carrierMeslist = CarrierMes.findCarrierEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo);
                float nrOfPages = (float) CarrierMes.countCarriers() / sizeNo;
                uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
            } else {
                carrierMeslist = CarrierMes.findCarriersByCarrierNumberAndDieAndCurrentLocationAndCarrierStatusAndPressAndProductionRunNo(finderCriteria, page, size);
                float nrOfPages = (float) CarrierMes.getFindCarrierCount(finderCriteria) / sizeNo;
                if (nrOfPages > 20) {
                    uiModel.addAttribute("maxPages", 20);
                } else {
                    uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
                }
            }
        } else {
            if (finderCriteria == null) {
                carrierMeslist = CarrierMes.findAllCarriers();

            } else {
                carrierMeslist = CarrierMes.findCarriersByCarrierNumberAndDieAndCurrentLocationAndCarrierStatusAndPressAndProductionRunNo(finderCriteria, page, size);
            }
        }
        for (CarrierMes carrierMes : carrierMeslist) {
            carrierList.add(carrierManagementService.getCarrier(carrierMes));
        }
        uiModel.addAttribute("openfind", true);
        uiModel.addAttribute("carriers", carrierList);
        uiModel.addAttribute("dies", Die.findAllDies());
        uiModel.addAttribute("stops", Stop.findAllStops());
        uiModel.addAttribute("carrierstatuses", Arrays.asList(CarrierStatus.class.getEnumConstants()));
        uiModel.addAttribute("presses", Arrays.asList(Press.class.getEnumConstants()));

        uiModel.addAttribute("productionRunNumbers", CarrierMes.getProductionRunNumbers());

        boolean mesHealthy = !carrierManagementService.isDisconnected();
        uiModel.addAttribute("meshealthy", mesHealthy);
        uiModel.addAttribute("alarmevent", carrierManagementService.getAlarmEventToDisplay());

        if (finderCriteria != null) {
            uiModel.addAttribute("carrierNumber", finderCriteria.getCarrierNumber());
            uiModel.addAttribute("die", finderCriteria.getDie());
            uiModel.addAttribute("currentLocation", finderCriteria.getCurrentLocation());
            uiModel.addAttribute("productionRunNumber", finderCriteria.getProductionRunNo());
            uiModel.addAttribute("carrierStatus", finderCriteria.getCarrierStatus());
            uiModel.addAttribute("press", finderCriteria.getPress());
            uiModel.addAttribute("destination", finderCriteria.getDestination());
        }
        return "carriers/list";
    }

    @RequestMapping(method = RequestMethod.PUT)
    public String CarrierController.update(@Valid Carrier carrier,
                                           BindingResult bindingResult,
                                           @RequestParam(value = "originalReferrer", required = false) String originalReferrer,
                                           Model uiModel, HttpServletRequest httpServletRequest) {
        uiModel.asMap().clear();
        CarrierMes curCarrier = CarrierMes.findCarrier(carrier.getId());
        if (carrier.getDie() == null) {
            String invalidDieMsg = "Invalid Die number";
            carrier.setCarrierNumber(curCarrier.getCarrierNumber());
            carrier.setSource(curCarrier.getSource());
            List defects = Defect.findDefectsByCarrierNumberAndProductionRunNo(carrier.getCarrierNumber(), carrier.getProductionRunNo());

            List<Stop> destinations = carrierManagementService.getValidDestinationStops(carrier.getCurrentLocation());
            if (destinations.size() == 0) destinations = Stop.findAllStops();
            uiModel.addAttribute("carrier", carrier);
            uiModel.addAttribute("destinations", destinations);
            boolean mesHealthy = !carrierManagementService.isDisconnected();
            uiModel.addAttribute("meshealthy", mesHealthy);
            uiModel.addAttribute("imgUrl", "");
            uiModel.addAttribute("imgLabel", "");
            uiModel.addAttribute("defects", defects);
            uiModel.addAttribute("carriernumber", carrier.getCarrierNumber());
            uiModel.addAttribute("originalReferrer", httpServletRequest.getHeader("referer"));
            uiModel.addAttribute("detailedinventory", false);
            uiModel.addAttribute("releasemsg", "");
            uiModel.addAttribute("recirculatemsg", "");
            uiModel.addAttribute("partOfOrderMsg", "");
            uiModel.addAttribute("invalidDieMsg", invalidDieMsg);
            uiModel.addAttribute("stops", Stop.findAllStops());
            uiModel.addAttribute("dies", Die.findAllDies());
            uiModel.addAttribute("carrierstatuses", populateCarrierStatuses());
            addDateTimeFormatPatterns(uiModel);

            return "carriers/update";
        }
        if (curCarrier != null && carrier.getCarrierNumber() == null) {
            carrier.setCarrierNumber(curCarrier.getCarrierNumber());
        }

        String user = httpServletRequest.getUserPrincipal().getName();

        if (carrier.getBuffer() != null && carrier.getBuffer() > 0) {
            List<CarrierMes> carrierList;
            if (carrier.getCurrentLocation() != null) {
                carrierList = CarrierMes.findAllCarriersWithCurrentLocation(carrier.getCurrentLocation().getId());
            } else {
                carrierList = CarrierMes.findAllCarriersWithCurrentLocation(curCarrier.getCurrentLocation());
            }
            for (CarrierMes mesCarrier : carrierList) {
                if (!carrier.getCarrierNumber().equals(mesCarrier.getCarrierNumber()) && mesCarrier.getBuffer().intValue() == 1) {
                    LOG.info("A carrier with a buffer of 1 already exists at " + curCarrier.getCurrentLocation() +
                            ". User: " + user + " attempted to save carrier: " + carrier.getCarrierNumber() + ".");
                    uiModel.addAttribute("carrierNumber", mesCarrier.getCarrierNumber());
                    return "carriers/exception";
                }
            }
        }

        LOG.info("Carrier Updated " + carrier.getCarrierNumber() + " by user " + user);
        carrier.setSource(user);
        //2013-01-16:VB carrierManagementService.saveCarrier(carrier);
        carrierManagementServiceProxy.saveCarrier(carrier);

        if (originalReferrer.contains("overview")) {
            return "redirect:/lanes?overview=-";
        } else if (originalReferrer.contains("lanes")) {
            return "redirect:/lanes";
        } else {
            return "redirect:/carriers?page=1&size=50";
        }
    }

    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String CarrierController.updateForm(@PathVariable("id") Long id,
                                               HttpServletRequest httpServletRequest,
                                               Model uiModel) {
        CarrierMes carrierMes = CarrierMes.findCarrier(id);
        Carrier carrier = null;
        String imgUrl = "";
        String imgLabel = "";
        String releaseMsg = "", recirculateMsg = "", partOfOrderMsg = "", invalidDieMsg = "";
        if (carrierMes != null) {
            carrier = carrierManagementService.getCarrier(carrierMes);
            CarrierRelease release = CarrierRelease.findCarrierRelease(Long.parseLong(carrier.getCarrierNumber().toString()));
            if (release != null) {
                carrier.setDestination(release.getDestination());
                releaseMsg = " Carrier is set to release to destination-" + release.getDestination().getName();
                if (release.getDestination().getId().equals(704L)) {
                    recirculateMsg = " Carrier is recirculating";
                } else if (release.getDestination().getId().equals(1300L) || release.getDestination().getId().equals(1301L)) {
                    WeldOrder order = OrderFulfillment.findOrderByCarrier(carrier);
                    if (order != null) {
                        partOfOrderMsg = "Carrier Part of Active Order for-" + order.getOrderMgr().getLineName();
                    }
                }
            } else {
                if (carrier.getDestination().getId().equals(704L)) {
                    recirculateMsg = " Carrier is recirculating";
                } else if (carrier.getDestination().getId().equals(1300L) || carrier.getDestination().getId().equals(1301L)) {
                    WeldOrder order = OrderFulfillment.findOrderByCarrier(carrier);
                    if (order != null) {
                        partOfOrderMsg = "Carrier Part of Active Order for-" + order.getOrderMgr().getLineName();
                    }
                }
            }
        }
        if (carrier != null) {
            Die die = carrier.getDie();
            if (die != null) {
                imgUrl = "/resources/images/" + die.getImageFileName();
                imgLabel = carrier.getDie().getDescription();
            } else {
                invalidDieMsg = "Invalid Die number";
            }
        }
        List defects = Defect.findDefectsByCarrierNumberAndProductionRunNo(carrier.getCarrierNumber(), carrier.getProductionRunNo());

        List<Stop> destinations = carrierManagementService.getValidDestinationStops(carrier.getCurrentLocation());

        if (destinations.size() == 0){
            destinations = Stop.findAllStops();
        }else{
            destinations.add(carrier.getCurrentLocation());
        }
        uiModel.addAttribute("carrier", carrier);
        uiModel.addAttribute("destinations", destinations);
        boolean mesHealthy = !carrierManagementService.isDisconnected();
        uiModel.addAttribute("meshealthy", mesHealthy);
        uiModel.addAttribute("imgUrl", imgUrl);
        uiModel.addAttribute("imgLabel", imgLabel);
        uiModel.addAttribute("defects", defects);
        uiModel.addAttribute("carriernumber", carrier.getCarrierNumber());
        uiModel.addAttribute("originalReferrer", httpServletRequest.getHeader("referer"));
        uiModel.addAttribute("detailedinventory", false);
        uiModel.addAttribute("releasemsg", releaseMsg);
        uiModel.addAttribute("recirculatemsg", recirculateMsg);
        uiModel.addAttribute("partOfOrderMsg", partOfOrderMsg);
        uiModel.addAttribute("invalidDieMsg", invalidDieMsg);
        addDateTimeFormatPatterns(uiModel);

        return "carriers/update";
    }


    @RequestMapping(value = "/{id}/{currentlocation}", params = "locationupdate", method = RequestMethod.GET)
    public String CarrierController.updateFormForCurrentLocationModify(@PathVariable("id") Long id, @PathVariable("currentlocation") Long location,
                                                                       HttpServletRequest httpServletRequest,
                                                                       Model uiModel) {
        CarrierMes carrierMes = CarrierMes.findCarrier(id);
        Carrier carrier = null;
        String imgUrl = "";
        String imgLabel = "";
        String releaseMsg = "", recirculateMsg = "", partOfOrderMsg = "", invalidDieMsg = "";
        if (carrierMes != null) {
            carrier = carrierManagementService.getCarrier(carrierMes);
            CarrierRelease release = CarrierRelease.findCarrierRelease(Long.parseLong(carrier.getCarrierNumber().toString()));
            if (release != null) {
                carrier.setDestination(release.getDestination());
                releaseMsg = " Carrier is set to release to destination-" + release.getDestination().getName();
                if (release.getDestination().getId().equals(704L)) {
                    recirculateMsg = " Carrier is recirculating";
                } else if (release.getDestination().getId().equals(1300L) || release.getDestination().getId().equals(1301L)) {
                    WeldOrder order = OrderFulfillment.findOrderByCarrier(carrier);
                    if (order != null) {
                        partOfOrderMsg = "Carrier Part of Active Order for-" + order.getOrderMgr().getLineName();
                    }
                }
            } else {
                if (carrier.getDestination().getId().equals(704L)) {
                    recirculateMsg = " Carrier is recirculating";
                } else if (carrier.getDestination().getId().equals(1300L) || carrier.getDestination().getId().equals(1301L)) {
                    WeldOrder order = OrderFulfillment.findOrderByCarrier(carrier);
                    if (order != null) {
                        partOfOrderMsg = "Carrier Part of Active Order for-" + order.getOrderMgr().getLineName();
                    }
                }
            }
        }
        if (carrier != null) {
            Die die = carrier.getDie();
            if (die != null) {
                imgUrl = "/resources/images/" + die.getImageFileName();
                imgLabel = carrier.getDie().getDescription();
            } else {
                invalidDieMsg = "Invalid Die number";
            }
        }
        List defects = Defect.findDefectsByCarrierNumberAndProductionRunNo(carrier.getCarrierNumber(), carrier.getProductionRunNo());

        List<Stop> destinations = carrierManagementService.getValidDestinationStops(Stop.findStop(location));
        if (destinations.size() == 0) destinations = Stop.findAllStops();
        carrier.setCurrentLocation(Stop.findStop(location));
        uiModel.addAttribute("carrier", carrier);
        uiModel.addAttribute("destinations", destinations);
        boolean mesHealthy = !carrierManagementService.isDisconnected();
        uiModel.addAttribute("meshealthy", mesHealthy);
        uiModel.addAttribute("imgUrl", imgUrl);
        uiModel.addAttribute("imgLabel", imgLabel);
        uiModel.addAttribute("defects", defects);
        uiModel.addAttribute("carriernumber", carrier.getCarrierNumber());
        uiModel.addAttribute("originalReferrer", httpServletRequest.getHeader("referer"));
        uiModel.addAttribute("detailedinventory", false);
        uiModel.addAttribute("releasemsg", releaseMsg);
        uiModel.addAttribute("recirculatemsg", recirculateMsg);
        uiModel.addAttribute("partOfOrderMsg", partOfOrderMsg);
        uiModel.addAttribute("invalidDieMsg", invalidDieMsg);
        addDateTimeFormatPatterns(uiModel);

        return "carriers/current_location_update";
    }


    @RequestMapping(params = "rework", method = RequestMethod.GET)
    public String CarrierController.reworkForm(@RequestParam("location") Long location,
                                               @RequestParam("workStationName") String workStationName,
                                               Model uiModel) {

        addDateTimeFormatPatterns(uiModel);

        Carrier carrier = getCarrierForLocation(location);

        if (carrier == null) carrier = new Carrier();

        ArrayList<Press> reworkPressList = new ArrayList<Press>();
        reworkPressList.add(Press.findByType(location.intValue()));

        List<Stop> reworkStops = Stop.findAllStopsByType(StopType.REWORK);

        if (workStationName == null) workStationName = "Rework";
        boolean mesHealthy = !carrierManagementService.isDisconnected();
        uiModel.addAttribute("meshealthy", mesHealthy);
        uiModel.addAttribute("carrier", carrier);
        uiModel.addAttribute("presses", reworkPressList);
        uiModel.addAttribute("reworkstops", reworkStops);
        uiModel.addAttribute("workStationName", workStationName);
        uiModel.addAttribute("location", location);

        return "carriers/rework_update";
    }

    @RequestMapping(params = "rework=rework", method = RequestMethod.PUT)
    public String CarrierController.reworkUpdate(@Valid Carrier carrier, BindingResult bindingResult,
                                                 @RequestParam("location") Long location,
                                                 @RequestParam("workStationName") String workStationName,
                                                 Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {

            ArrayList<Press> reworkPressList = new ArrayList<Press>();
            reworkPressList.add(Press.findByType(location.intValue()));

            List<Stop> reworkStops = Stop.findAllStopsByType(StopType.REWORK);
            boolean mesHealthy = !carrierManagementService.isDisconnected();
            uiModel.addAttribute("workStationName", workStationName);
            uiModel.addAttribute("meshealthy", mesHealthy);
            uiModel.addAttribute("alarmevent", carrierManagementService.getAlarmEventToDisplay());

            uiModel.addAttribute("carrier", carrier);
            uiModel.addAttribute("presses", reworkPressList);
            uiModel.addAttribute("reworkstops", reworkStops);
            return "carriers/?rework=-&location=" + location + "&workStationName=" + workStationName;
        }
        uiModel.asMap().clear();
        Calendar c = Calendar.getInstance();
        c.add(Calendar.YEAR, -1);
        Timestamp timestamp = new Timestamp(c.getTimeInMillis());
        carrier.setStampingProductionRunTimestamp(timestamp);
        //carrier.setProductionRunNo(new Integer(0));
        if (location == 800L) {
            carrier.setDestination(Stop.findStop(3003L));
        }else if(location == 405){
             carrier.setDestination(Stop.findStop(513L));
        } else {
            carrier.setDestination(Stop.findStop(3017L));
        }
        carrier.setPress(Press.findByType(location.intValue()));
        String user = httpServletRequest.getUserPrincipal().getName();
        LOG.info("Reworked Carrier " + carrier.getCarrierNumber() + " Die: " + carrier.getDie().getDescription()
                + "qty: " + carrier.getQuantity().toString() + " user " + user);
        carrier.setSource(user);
        carrier.setReprocess(true);
        //2013-01-21:VB carrierManagementService.saveCarrier(carrier);
        carrierManagementServiceProxy.saveCarrier(carrier);
        //carrierManagementService.storeReworkCarrier(carrier);

        return "redirect:/carriers?page=1&size=50";
    }

    @RequestMapping(params = "find=ByCarrierNumber", method = RequestMethod.GET)
    public String CarrierController.findReworkCarrierByCarrierNumber(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        List<CarrierMes> carrierList = CarrierMes.findAllCarriersWithCurrentLocation(405L);
        Carrier carrier = null;
        CarrierMes carrierMes = null;
        if (carrierList != null && carrierList.size() > 0) {
            for (CarrierMes mesCarrier : carrierList) {
                if (mesCarrier.getBuffer().intValue() == 1) {
                    carrierMes = mesCarrier;
                    break;
                }
            }
        }
        carrier = new Carrier();
        if (carrierMes != null) {
            carrier.setCarrierNumber(carrierMes.getCarrierNumber());

        }

        ArrayList<Press> reworkPressList = new ArrayList<Press>();
        reworkPressList.add(Press.REWORK_C_LINE);

        List<Stop> reworkStops = Stop.findAllStopsByType(StopType.REWORK);

        boolean mesHealthy = !carrierManagementService.isDisconnected();
        uiModel.addAttribute("meshealthy", mesHealthy);
        uiModel.addAttribute("alarmevent", carrierManagementService.getAlarmEventToDisplay());

        uiModel.addAttribute("carrier", carrier);
        uiModel.addAttribute("presses", reworkPressList);
        uiModel.addAttribute("reworkstops", reworkStops);
        return "carriers/rework_update";
    }

    @RequestMapping(params = "inspection=inspection", method = RequestMethod.PUT)
    public String CarrierController.inspectionUpdate(Carrier carrier,
                                                     BindingResult bindingResult,
                                                     @RequestParam("workStationName") String workStationName,
                                                     Model uiModel, HttpServletRequest httpServletRequest) {
        uiModel.asMap().clear();

        CarrierMes carrierMes = null;

        if (previousInspectedCarrier != null) {
            previousInspectedCarrier.setQuantity(carrier.getQuantity());
            previousInspectedCarrier.setCarrierStatus(carrier.getCarrierStatus());
            previousInspectedCarrier.setDestination(carrier.getDestination());
            previousInspectedCarrier.setDie(carrier.getDie());
        }

        carrierMes = CarrierMes.findCarrier(carrier.getId());
        if (carrierMes != null) {
            carrier.setCarrierNumber(carrierMes.getCarrierNumber());

            Carrier newCarrier = new Carrier();
            newCarrier.setCarrierNumber(carrier.getCarrierNumber());
            newCarrier.setDestination(carrier.getDestination());
            newCarrier.setQuantity(carrier.getQuantity());
            newCarrier.setDie(carrier.getDie());
            newCarrier.setCarrierStatus(carrier.getCarrierStatus());
            String user = httpServletRequest.getUserPrincipal().getName();
            LOG.info("inspection Update for carrier " + carrier.getCarrierNumber() + " by user " + user);
            newCarrier.setSource(user);
            carrierManagementServiceProxy.saveCarrier(newCarrier);

            Stop currentLocation = Stop.findStop(carrierMes.getCurrentLocation());

            if (currentLocation.getStopType().equals(StopType.STORE_IN_ALL_LANES)) {
                Die die = Die.findDie(new Long(carrierMes.getDieNumber().intValue()));
                if (carrier.getDie() != null && !(carrier.getDie().equals(die))) {
                    LOG.info(" recalculating destination for carrier " + carrier.getCarrierNumber());
                    carrierManagementServiceProxy.recalculateCarrierDestination(newCarrier);
                }
            }
        }
        Long location = carrierMes == null ? 0 : carrierMes.getCurrentLocation();
        return "redirect:/carriers?inspection=-&location=" + location + "&workStationName=" + workStationName;
    }

    @RequestMapping(params = "inspection", method = RequestMethod.GET)
    public String CarrierController.inspectionForm(@RequestParam("location") Long location,
                                                   @RequestParam("workStationName") String workStationName,
                                                   Model uiModel) {

        Carrier carrier = getCarrierForLocation(location);

        if (previousInspectedCarrier != null && carrier != null) {
            if (previousInspectedCarrier.getCarrierNumber().equals(carrier.getCarrierNumber())) {
                carrier = previousInspectedCarrier;
            } else {
                previousInspectedCarrier = carrier;
            }
        } else {
            previousInspectedCarrier = carrier;
        }

        List<Defect> defects = null;

        String imgUrl = "";
        String imgLabel = "";
        String recirculateMsg = "", partOfOrderMsg = "", invalidDieMsg = "";
        if (carrier != null) {
            Die die = carrier.getDie();
            if (die != null) {
                imgUrl = "/resources/images/" + die.getImageFileName();
                imgLabel = carrier.getDie().getDescription();
            } else {
                invalidDieMsg = "Invalid Die number";
            }
            defects = Defect.findDefectsByCarrierNumberAndProductionRunNo(carrier.getCarrierNumber(), carrier.getProductionRunNo());
            if (location.equals(1300L)) {
                if (carrier.getDestination().getId().equals(704L)) {
                    recirculateMsg = " Carrier is recirculating";
                } else {
                    WeldOrder order = OrderFulfillment.findOrderByCarrier(carrier);
                    if (order != null) {
                        partOfOrderMsg = "Carrier Part of Active Order for-" + order.getOrderMgr().getLineName();
                    }
                }
            }


        } else {
            carrier = new Carrier();
            carrier.setCarrierNumber(0);
            carrier.setProductionRunNo(0);
            Die die = new Die();
            carrier.setDie(die);
            defects = new ArrayList<Defect>();
        }

        boolean updateDestination = true;
        Stop inspectionStop = Stop.findStop(location);
        if (inspectionStop != null && inspectionStop.getStopType().equals(StopType.STORE_IN_ALL_LANES)) {
            updateDestination = false;
        }
        boolean mesHealthy = !carrierManagementService.isDisconnected();
        List<Stop> destinations = carrierManagementService.getValidDestinationStops(inspectionStop);
        if (destinations.size() == 0) destinations = Stop.findAllStops();
        uiModel.addAttribute("meshealthy", mesHealthy);
        uiModel.addAttribute("destinations", destinations);
        uiModel.addAttribute("workStationName", workStationName);
        uiModel.addAttribute("carrier", carrier);
        uiModel.addAttribute("defects", defects);
        uiModel.addAttribute("imgUrl", imgUrl);
        uiModel.addAttribute("imgLabel", imgLabel);
        uiModel.addAttribute("carriernumber", carrier.getCarrierNumber());
        uiModel.addAttribute("productionrunno", carrier.getProductionRunNo());
        uiModel.addAttribute("updDestination", updateDestination);
        uiModel.addAttribute("detailedinventory", false);
        uiModel.addAttribute("location", location);
        uiModel.addAttribute("alarmevent", carrierManagementService.getAlarmEventToDisplay());
        uiModel.addAttribute("recirculatemsg", recirculateMsg);
        uiModel.addAttribute("partOfOrderMsg", partOfOrderMsg);
        uiModel.addAttribute("invalidDieMsg", invalidDieMsg);

        return "carriers/inspection";
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String CarrierController.delete(@PathVariable("id") Long id,
                                           @RequestParam(value = "page", required = false) Integer page,
                                           @RequestParam(value = "size", required = false) Integer size,
                                           Model uiModel) {

        CarrierMes.findCarrier(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "50" : size.toString());
        return "redirect:/carriers";
    }


    @RequestMapping(params = "pressactivity", method = RequestMethod.GET)
    public String CarrierController.pressActivityForm(@RequestParam("press") String press, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size,
                                                      Model uiModel) {
        PressActivity pressActivity = PressActivity.findPressActivityByPressName(press);
        String dieName = "";
        Integer productionRunNo = null, quantityProduced = null;
        List<Carrier> carrierList = new ArrayList<Carrier>();
        if (pressActivity != null) {
            if (pressActivity.getProdRunNumber() != null) {

                List<CarrierMes> carrierMesList = CarrierMes.findAllCarriersWithProductionRunNumber(pressActivity.getProdRunNumber(), page, size);

                for (CarrierMes carrierMes : carrierMesList) {
                    carrierList.add(carrierManagementService.getCarrier(carrierMes));
                }
            }
            Long dieId = Long.parseLong(pressActivity.getDieNumber().toString());
            Die die = Die.findDie(dieId);
            dieName = die == null ? dieId.toString() : die.getDescription();
            productionRunNo = pressActivity.getProdRunNumber();
            quantityProduced = pressActivity.getQuantityProduced();
            float nrOfPages = (float) CarrierMes.findCountOfCarriersWithProductionRunNumber(pressActivity.getProdRunNumber()) / 50;
            if (nrOfPages > 20) {
                uiModel.addAttribute("maxPages", 20);
            } else {
                uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
            }
        }

        uiModel.addAttribute("carriers", carrierList);
        uiModel.addAttribute("dieName", dieName);
        uiModel.addAttribute("productionRunNo", productionRunNo);
        uiModel.addAttribute("quantityProduced", quantityProduced);
        uiModel.addAttribute("press", press);

        boolean mesHealthy = !carrierManagementService.isDisconnected();
        uiModel.addAttribute("meshealthy", mesHealthy);
        uiModel.addAttribute("alarmevent", carrierManagementService.getAlarmEventToDisplay());

        return "carriers/pressactivity";
    }

    @ModelAttribute("carrierstatuses")
    public Collection<CarrierStatus>CarrierController.populateCarrierStatuses() {
        return Arrays.asList(CarrierStatus.class.getEnumConstants());
    }

    @ModelAttribute("dies")
    public Collection<Die>CarrierController.populateDies() {
        return Die.findActiveDies();
    }

    @ModelAttribute("presses")
    public Collection<Press>CarrierController.populatePresses() {
        return Arrays.asList(Press.class.getEnumConstants());
    }

    @ModelAttribute("stops")
    public Collection<Stop>CarrierController.populateStops() {
        return Stop.findAllStops();
    }

    @ModelAttribute("defectTypes")
    public Collection<DEFECT_TYPE>CarrierController.populateDefectTypes() {
        return Arrays.asList(DEFECT_TYPE.class.getEnumConstants());
    }

    void CarrierController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("carrier_loadtimestamp_date_format", DateTimeFormat.patternForStyle("SS", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("carrier_unloadtimestamp_date_format", DateTimeFormat.patternForStyle("SS", LocaleContextHolder.getLocale()));
    }

    public static Carrier CarrierController.getCarrierForLocation(Long location) {
        List<CarrierMes> carrierList = CarrierMes.findAllCarriersWithCurrentLocation(location);

        Carrier carrier = null;
        CarrierMes carrierMes = null;
        if (carrierList != null && carrierList.size() > 0) {
            for (CarrierMes mesCarrier : carrierList) {
                if (mesCarrier.getBuffer().intValue() == 1) {
                    carrierMes = mesCarrier;
                    break;
                }
            }

            if (carrierMes != null) {
                carrier = new Carrier();
                carrier.setId(carrierMes.getId());
                carrier.setCarrierNumber(carrierMes.getCarrierNumber());
                carrier.setQuantity(carrierMes.getQuantity());
                carrier.setDie(Die.findDie(Long.valueOf(carrierMes.getDieNumber())));
                carrier.setCurrentLocation(Stop.findStop(carrierMes.getCurrentLocation()));
                carrier.setDestination(Stop.findStop(carrierMes.getDestination()));
                carrier.setPress(Press.findByType(carrierMes.getOriginationLocation()));
                carrier.setCarrierStatus(CarrierStatus.findByType(carrierMes.getStatus()));
                carrier.setProductionRunNo(carrierMes.getProductionRunNumber());
                carrier.setStampingProductionRunTimestamp(carrierMes.getProductionRunDate());
            }
        }
        return carrier;
    }

    @RequestMapping(params = {"find=ByCarrierNumberAndDieAndCurrentLocationAndCarrierStatusAndPressAndProductionRunNo", "form"}, method = RequestMethod.GET)
    public String CarrierController.findCarrierByCriteriaForm(Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        List<Carrier> carrierList = new ArrayList<Carrier>();
        for (CarrierMes carrierMes : CarrierMes.findAllCarriers()) {
            carrierList.add(carrierManagementService.getCarrier(carrierMes));
        }
        uiModel.addAttribute("carriers", carrierList);
        uiModel.addAttribute("dies", Die.findAllDies());
        uiModel.addAttribute("stops", Stop.findAllStops());
        uiModel.addAttribute("carrierstatuses", Arrays.asList(CarrierStatus.class.getEnumConstants()));
        uiModel.addAttribute("presses", Arrays.asList(Press.class.getEnumConstants()));
        uiModel.addAttribute("productionRunNumbers", CarrierMes.getProductionRunNumbers());

        return "carriers/list";
    }

    @RequestMapping(params = "find=ByCarrierNumberAndDieAndCurrentLocationAndCarrierStatusAndPressAndProductionRunNo", method = RequestMethod.GET)
    public String CarrierController.findCarrierByCriteria(@RequestParam("carrierNumber") Integer carrierNumber, @RequestParam("die") Die die, @RequestParam("productionRunNumber") Integer productionRunNumber, @RequestParam("currentLocation") Stop currentLocation, @RequestParam("carrierStatus") CarrierStatus carrierStatus, @RequestParam("press") Press press, @RequestParam("destination") Stop destination, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Model uiModel) {
        finderCriteria = new CarrierFinderCriteria();
        finderCriteria.setCarrierNumber(carrierNumber);
        finderCriteria.setCarrierStatus(carrierStatus);
        finderCriteria.setCurrentLocation(currentLocation);
        finderCriteria.setDestination(destination);
        finderCriteria.setDie(die);
        finderCriteria.setPress(press);
        finderCriteria.setProductionRunNo(productionRunNumber);

        List<CarrierMes> carrierMeslist = CarrierMes.findCarriersByCarrierNumberAndDieAndCurrentLocationAndCarrierStatusAndPressAndProductionRunNo(finderCriteria, 1, 50);
        List<Carrier> carrierList = new ArrayList<Carrier>();
        for (CarrierMes carrierMes : carrierMeslist) {
            carrierList.add(carrierManagementService.getCarrier(carrierMes));
        }

        float nrOfPages = (float) CarrierMes.getFindCarrierCount(finderCriteria) / 50;
        if (nrOfPages > 20) {
            uiModel.addAttribute("maxPages", 20);
        } else {
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        }
        uiModel.addAttribute("carriers", carrierList);
        uiModel.addAttribute("dies", Die.findAllDies());
        uiModel.addAttribute("stops", Stop.findAllStops());
        uiModel.addAttribute("carrierstatuses", Arrays.asList(CarrierStatus.class.getEnumConstants()));
        uiModel.addAttribute("presses", Arrays.asList(Press.class.getEnumConstants()));
        uiModel.addAttribute("productionRunNumbers", CarrierMes.getProductionRunNumbers());

        uiModel.addAttribute("openfind", true);
        uiModel.addAttribute("carrierNumber", carrierNumber);
        uiModel.addAttribute("die", die);
        uiModel.addAttribute("currentLocation", currentLocation);
        uiModel.addAttribute("productionRunNumber", productionRunNumber);
        uiModel.addAttribute("carrierStatus", carrierStatus);
        uiModel.addAttribute("press", press);
        uiModel.addAttribute("destination", destination);

        boolean mesHealthy = !carrierManagementService.isDisconnected();
        uiModel.addAttribute("meshealthy", mesHealthy);
        uiModel.addAttribute("alarmevent", carrierManagementService.getAlarmEventToDisplay());

        saveCarrierFinderCriteria(finderCriteria, httpServletResponse);

        return "carriers/list";
    }

    String CarrierController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {
        }
        return pathSegment;
    }

    private CarrierFinderCriteria CarrierController.getSavedCarrierFinderCriteria(HttpServletRequest httpServletRequest) {

        Integer carrierNumber = null;
        CarrierStatus carrierStatus = null;
        Stop currentLocation = null;
        Stop destination = null;
        Die die = null;
        Press press = null;
        Integer productionRunNumber = null;
        CarrierFinderCriteria finderCriteria = null;

        Cookie[] cookies = httpServletRequest.getCookies();
//        LOG.info("Displaying cookie information !!!!!!!");
        for (Cookie cookie : cookies) {

            String name = cookie.getName();
            String value = cookie.getValue();
//            LOG.info("cookie Name-" + name);
//            LOG.info("cookie value-" + value);
            if (name.equals(CARRIER_NUMBER_FILTER) && (value != null && value.length() > 0)) {
                carrierNumber = Integer.parseInt(value);
            }
            if (name.equals(CARRIER_STATUS_FILTER) && (value != null && value.length() > 0)) {
                carrierStatus = CarrierStatus.findByType(Integer.parseInt(value));
            }
            if (name.equals(CURRENT_LOCATION_FILTER) && (value != null && value.length() > 0)) {
                currentLocation = (Stop.findStop(Long.parseLong(value)));
            }
            if (name.equals(DEST_LOCATION_FILTER) && (value != null && value.length() > 0)) {
                destination = (Stop.findStop(Long.parseLong(value)));
            }
            if (name.equals(ORIGIN_LOCATION_FILTER) && (value != null && value.length() > 0)) {
                press = Press.findByType(Integer.parseInt(value));
            }
            if (name.equals(DIE_ID_FILTER) && (value != null && value.length() > 0)) {
                die = (Die.findDie(Long.parseLong(value)));
            }
            if (name.equals(PROD_RUN_FILTER) && (value != null && value.length() > 0)) {
                productionRunNumber = Integer.parseInt(value);
            }
        }

        if (carrierNumber != null || carrierStatus != null || currentLocation != null || destination != null || die != null || press != null || productionRunNumber != null) {
            finderCriteria = new CarrierFinderCriteria();
            finderCriteria.setCarrierNumber(carrierNumber);
            finderCriteria.setCarrierStatus(carrierStatus);
            finderCriteria.setCurrentLocation(currentLocation);
            finderCriteria.setDestination(destination);
            finderCriteria.setDie(die);
            finderCriteria.setPress(press);
            finderCriteria.setProductionRunNo(productionRunNumber);
        }
        return finderCriteria;
    }

    private void CarrierController.saveCarrierFinderCriteria(CarrierFinderCriteria finderCriteria, HttpServletResponse httpServletResponse) {

        if (finderCriteria != null) {
            Integer carrierNumber = finderCriteria.getCarrierNumber();
            CarrierStatus carrierStatus = finderCriteria.getCarrierStatus();
            Stop currentLocation = finderCriteria.getCurrentLocation();
            Stop destination = finderCriteria.getDestination();
            Die die = finderCriteria.getDie();
            Press press = finderCriteria.getPress();
            Integer productionRunNumber = finderCriteria.getProductionRunNo();

            String carrierNo = carrierNumber != null ? carrierNumber.toString() : "";
            String status = carrierStatus != null ? (new Integer(carrierStatus.type())).toString() : "";
            String currentLoc = currentLocation != null ? currentLocation.getId().toString() : "";
            String destLoc = destination != null ? destination.getId().toString() : "";
            String dieId = die != null ? die.getId().toString() : "";
            String originLoc = press != null ? (new Integer(press.type())).toString() : "";
            String prodRunNo = productionRunNumber != null ? productionRunNumber.toString() : "";

            Cookie carrierNoCookie = new Cookie(CARRIER_NUMBER_FILTER, carrierNo);
            carrierNoCookie.setMaxAge(COOKIE_MAX_AGE);

            Cookie statusCookie = new Cookie(CARRIER_STATUS_FILTER, status);
            statusCookie.setMaxAge(COOKIE_MAX_AGE);

            Cookie currentLocCookie = new Cookie(CURRENT_LOCATION_FILTER, currentLoc);
            currentLocCookie.setMaxAge(COOKIE_MAX_AGE);

            Cookie destLocCookie = new Cookie(DEST_LOCATION_FILTER, destLoc);
            destLocCookie.setMaxAge(COOKIE_MAX_AGE);

            Cookie dieIdCookie = new Cookie(DIE_ID_FILTER, dieId);
            dieIdCookie.setMaxAge(COOKIE_MAX_AGE);

            Cookie originLocCookie = new Cookie(ORIGIN_LOCATION_FILTER, originLoc);
            originLocCookie.setMaxAge(COOKIE_MAX_AGE);

            Cookie prodRunNoCookie = new Cookie(PROD_RUN_FILTER, prodRunNo);
            prodRunNoCookie.setMaxAge(COOKIE_MAX_AGE);

            httpServletResponse.addCookie(carrierNoCookie);
            httpServletResponse.addCookie(statusCookie);
            httpServletResponse.addCookie(currentLocCookie);
            httpServletResponse.addCookie(destLocCookie);
            httpServletResponse.addCookie(dieIdCookie);
            httpServletResponse.addCookie(originLocCookie);
            httpServletResponse.addCookie(prodRunNoCookie);
        }
    }
}
