// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.storage.web;

import com.honda.mfg.stamp.conveyor.domain.Stop;
import com.honda.mfg.stamp.conveyor.domain.StorageRow;
import com.honda.mfg.stamp.conveyor.domain.enums.StopAvailability;
import com.honda.mfg.stamp.conveyor.domain.enums.StorageArea;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

privileged aspect StorageRowController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String StorageRowController.create(@Valid StorageRow storageRow, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("storageRow", storageRow);
            return "storagerows/create";
        }
        uiModel.asMap().clear();
        storageRow.persist();
        return "redirect:/storagerows/" + encodeUrlPathSegment(storageRow.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String StorageRowController.createForm(Model uiModel) {
        uiModel.addAttribute("storageRow", new StorageRow());
        List dependencies = new ArrayList();
        if (Stop.countStops() == 0) {
            dependencies.add(new String[]{"stop", "stops"});
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "storagerows/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String StorageRowController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("storagerow", StorageRow.findStorageRow(id));
        uiModel.addAttribute("itemId", id);
        return "storagerows/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String StorageRowController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("storagerows", StorageRow.findStorageRowEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) StorageRow.countStorageRows() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("storagerows", StorageRow.findAllStorageRows());
        }
        return "storagerows/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String StorageRowController.update(StorageRow storageRow, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("storageRow", storageRow);
            return "storagerows/update";
        }
        uiModel.asMap().clear();
        StorageRow tempRow = StorageRow.findStorageRow(storageRow.getId()) ;
        storageRow.setCapacity(tempRow.getCapacity());
        storageRow.setStorageArea(tempRow.getStorageArea());
        StorageRow row = storageRow.merge();
        carrierManagementServiceProxy.updateRow(row);
        return "redirect:/storagerows/" + encodeUrlPathSegment(storageRow.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String StorageRowController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("storageRow", StorageRow.findStorageRow(id));
        return "storagerows/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String StorageRowController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        StorageRow.findStorageRow(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/storagerows";
    }
    
    @ModelAttribute("stops")
    public Collection<Stop> StorageRowController.populateStops() {
        return Stop.findAllStops();
    }
    
    @ModelAttribute("storageareas")
    public Collection<StorageArea> StorageRowController.populateStorageAreas() {
        return Arrays.asList(StorageArea.class.getEnumConstants());
    }

     @ModelAttribute("stopavailabilitys")
    public Collection<StopAvailability> StorageRowController.populateStopAvailabilitys() {
        return Arrays.asList(StopAvailability .class.getEnumConstants());
    }
    
    @ModelAttribute("storagerows")
    public Collection<StorageRow> StorageRowController.populateStorageRows() {
        return StorageRow.findAllStorageRows();
    }
    
    String StorageRowController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
