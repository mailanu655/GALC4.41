// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import com.honda.mfg.stamp.conveyor.domain.StopDataOnDemand;
import com.honda.mfg.stamp.conveyor.domain.ValidDestination;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ValidDestinationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ValidDestinationDataOnDemand: @Component;
    
    private Random ValidDestinationDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<ValidDestination> ValidDestinationDataOnDemand.data;
    
    @Autowired
    private StopDataOnDemand ValidDestinationDataOnDemand.stopDataOnDemand;
    
    public ValidDestination ValidDestinationDataOnDemand.getNewTransientValidDestination(int index) {
        com.honda.mfg.stamp.conveyor.domain.ValidDestination obj = new com.honda.mfg.stamp.conveyor.domain.ValidDestination();
        setStop(obj, index);
        setDestination(obj, index);
        return obj;
    }
    
    public void ValidDestinationDataOnDemand.setStop(ValidDestination obj, int index) {
        com.honda.mfg.stamp.conveyor.domain.Stop stop = stopDataOnDemand.getRandomStop();
        obj.setStop(stop);
    }
    
    public void ValidDestinationDataOnDemand.setDestination(ValidDestination obj, int index) {
        com.honda.mfg.stamp.conveyor.domain.Stop destination = stopDataOnDemand.getRandomStop();
        obj.setDestination(destination);
    }
    
    public ValidDestination ValidDestinationDataOnDemand.getSpecificValidDestination(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        ValidDestination obj = data.get(index);
        return ValidDestination.findValidDestination(obj.getId());
    }
    
    public ValidDestination ValidDestinationDataOnDemand.getRandomValidDestination() {
        init();
        ValidDestination obj = data.get(rnd.nextInt(data.size()));
        return ValidDestination.findValidDestination(obj.getId());
    }
    
    public boolean ValidDestinationDataOnDemand.modifyValidDestination(ValidDestination obj) {
        return false;
    }
    
    public void ValidDestinationDataOnDemand.init() {
        data = com.honda.mfg.stamp.conveyor.domain.ValidDestination.findValidDestinationEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'ValidDestination' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.honda.mfg.stamp.conveyor.domain.ValidDestination>();
        for (int i = 0; i < 10; i++) {
            com.honda.mfg.stamp.conveyor.domain.ValidDestination obj = getNewTransientValidDestination(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
