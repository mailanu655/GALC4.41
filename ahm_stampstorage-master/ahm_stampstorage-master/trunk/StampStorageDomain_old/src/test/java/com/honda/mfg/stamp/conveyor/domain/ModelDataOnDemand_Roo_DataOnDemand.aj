// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Random;

privileged aspect ModelDataOnDemand_Roo_DataOnDemand {

    declare @type: ModelDataOnDemand:@Component;

    private Random ModelDataOnDemand.rnd = new java.security.SecureRandom();

    private List<Model> ModelDataOnDemand.data;

    public Model ModelDataOnDemand.getNewTransientModel(int index) {
        Model obj = new Model();
        setPartType(obj, index);
        setDescription(obj, index);
        setLeftDie(obj, index);
        setRightDie(obj, index+10);
        return obj;
    }

    public void ModelDataOnDemand.setPartType(Model obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }

    public void ModelDataOnDemand.setDescription(Model obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }

    private Die ModelDataOnDemand.createDie(int index) {
        Die die = new Die();
        long id = index;
        Integer dieNumber = index;
        //dieNumber = dieNumber.substring(dieNumber.length() - 3, dieNumber.length());
        //die.setDieNumber(dieNumber);
        die.setId(id);
        die.setDescription("Die: " + index);
        return die;
    }

    public void ModelDataOnDemand.setLeftDie(Model obj, int index) {
        obj.setLeftDie(createDie(index));
    }

    public void ModelDataOnDemand.setRightDie(Model obj, int index) {
        obj.setRightDie(createDie(index));
    }

    public Model ModelDataOnDemand.getSpecificModel(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Model obj = data.get(index);
        return Model.findModel(obj.getId());
    }

    public Model ModelDataOnDemand.getRandomModel() {
        init();
        Model obj = data.get(rnd.nextInt(data.size()));
        return Model.findModel(obj.getId());
    }

    public boolean ModelDataOnDemand.modifyModel(Model obj) {
        return false;
    }

    public void ModelDataOnDemand.init() {
        data = Model.findModelEntries(0, 10);
        if (data == null)
            throw new IllegalStateException("Find entries implementation for 'Model' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }

        data = new java.util.ArrayList<Model>();
        for (int i = 0; i < 10; i++) {
            Model obj = getNewTransientModel(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }

}
