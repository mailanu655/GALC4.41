// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Random;

privileged aspect OrderMgrDataOnDemand_Roo_DataOnDemand {

    declare @type: OrderMgrDataOnDemand:@Component;

    private Random OrderMgrDataOnDemand.rnd = new java.security.SecureRandom();

    private List<OrderMgr> OrderMgrDataOnDemand.data;

    public OrderMgr OrderMgrDataOnDemand.getNewTransientOrderMgr(int index) {
        OrderMgr obj = new OrderMgr();
        setLineName(obj, index);
        setMaxDeliveryCapacity(obj, index);
        return obj;
    }

    public void OrderMgrDataOnDemand.setMaxDeliveryCapacity(OrderMgr obj, int index) {
        obj.setMaxDeliveryCapacity(index*10);
    }

    public void OrderMgrDataOnDemand.setLineName(OrderMgr obj, int index) {
        String lineName = "lineName_" + index;
        obj.setLineName(lineName);
    }

    public OrderMgr OrderMgrDataOnDemand.getSpecificOrderMgr(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        OrderMgr obj = data.get(index);
        return OrderMgr.findOrderMgr(obj.getId());
    }

    public OrderMgr OrderMgrDataOnDemand.getRandomOrderMgr() {
        init();
        OrderMgr obj = data.get(rnd.nextInt(data.size()));
        return OrderMgr.findOrderMgr(obj.getId());
    }

    public boolean OrderMgrDataOnDemand.modifyOrderMgr(OrderMgr obj) {
        return false;
    }

    public void OrderMgrDataOnDemand.init() {
        data = OrderMgr.findOrderMgrEntries(0, 10);
        if (data == null)
            throw new IllegalStateException("Find entries implementation for 'OrderMgr' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }

        data = new java.util.ArrayList<OrderMgr>();
        for (int i = 0; i < 10; i++) {
            OrderMgr obj = getNewTransientOrderMgr(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }

}
