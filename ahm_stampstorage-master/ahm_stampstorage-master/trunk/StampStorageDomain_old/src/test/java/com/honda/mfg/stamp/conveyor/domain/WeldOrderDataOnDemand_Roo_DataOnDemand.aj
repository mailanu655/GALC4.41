// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;


import com.honda.mfg.stamp.conveyor.domain.enums.OrderStatus;
import org.springframework.stereotype.Component;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

privileged aspect WeldOrderDataOnDemand_Roo_DataOnDemand {

    declare @type: WeldOrderDataOnDemand:@Component;

    private Random WeldOrderDataOnDemand.rnd = new java.security.SecureRandom();

    private List<WeldOrder> WeldOrderDataOnDemand.data;

    public WeldOrder WeldOrderDataOnDemand.getNewTransientWeldOrder(int index) {
        WeldOrder obj = new WeldOrder();
        setOrderMgr(obj, index);
        setOrderSequence(obj, index);
        setOrderStatus(obj, index);
        setLeftQuantity(obj, index);
        setRightQuantity(obj, index);
        setCreatedBy(obj, index);
        setCreatedDate(obj,index);
        setComments(obj, index);
        setDeliveryStatus(obj);
        return obj;
    }

    public void WeldOrderDataOnDemand.setLeftQuantity(WeldOrder obj, int index) {
        obj.setLeftQuantity(1);
    }

    public void WeldOrderDataOnDemand.setRightQuantity(WeldOrder obj, int index) {
        obj.setRightQuantity(1);
    }

    public void WeldOrderDataOnDemand.setOrderMgr(WeldOrder obj, int index) {
        OrderMgr orderMgr = null;
        obj.setOrderMgr(orderMgr);
    }

    public void WeldOrderDataOnDemand.setOrderSequence(WeldOrder obj, int index) {
        Integer orderSequence = new Integer(index);
        obj.setOrderSequence(orderSequence);
    }

    public void WeldOrderDataOnDemand.setOrderStatus(WeldOrder obj, int index) {
        OrderStatus orderStatus = OrderStatus.InProcess;
        obj.setOrderStatus(orderStatus);
    }

    public void WeldOrderDataOnDemand.setDeliveryStatus(WeldOrder obj) {
        OrderStatus deliveryStatus = OrderStatus.Initialized;
        obj.setDeliveryStatus(deliveryStatus);
    }

     public void WeldOrderDataOnDemand.setCreatedDate(WeldOrder obj, int index) {
         Timestamp createdDate = new Timestamp(System.currentTimeMillis());
        obj.setCreatedDate(createdDate);
    }

     public void WeldOrderDataOnDemand.setCreatedBy(WeldOrder obj, int index) {
        String user = "user";
        obj.setCreatedBy(user);
    }

     public void WeldOrderDataOnDemand.setComments(WeldOrder obj, int index) {
        String comments= null;
        obj.setComments(comments);
    }
    public WeldOrder WeldOrderDataOnDemand.getSpecificWeldOrder(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        WeldOrder obj = data.get(index);
        return WeldOrder.findWeldOrder(obj.getId());
    }

    public WeldOrder WeldOrderDataOnDemand.getRandomWeldOrder() {
        init();
        WeldOrder obj = data.get(rnd.nextInt(data.size()));
        return WeldOrder.findWeldOrder(obj.getId());
    }

    public boolean WeldOrderDataOnDemand.modifyWeldOrder(WeldOrder obj) {
        return false;
    }

    public void WeldOrderDataOnDemand.init() {
        data = WeldOrder.findWeldOrderEntries(0, 10);
        if (data == null)
            throw new IllegalStateException("Find entries implementation for 'WeldOrder' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }

        data = new ArrayList<WeldOrder>();
        for (int i = 0; i < 10; i++) {
            WeldOrder obj = getNewTransientWeldOrder(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
}
