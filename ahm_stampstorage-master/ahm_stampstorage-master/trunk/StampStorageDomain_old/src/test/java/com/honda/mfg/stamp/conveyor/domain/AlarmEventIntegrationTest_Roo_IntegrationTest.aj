// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AlarmEventIntegrationTest_Roo_IntegrationTest {

    declare @type: AlarmEventIntegrationTest:@RunWith(SpringJUnit4ClassRunner.class);

    declare @type: AlarmEventIntegrationTest:@ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext.xml");

    declare @type: AlarmEventIntegrationTest:@Transactional;

    @Autowired
    private AlarmEventDataOnDemand AlarmEventIntegrationTest.dod;

    @Test
    public void AlarmEventIntegrationTest.testCountCurrent_Alarms() {
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to initialize correctly", dod.getRandomCurrent_Alarm());
        long count = AlarmEvent.countCurrent_Alarms();
        org.junit.Assert.assertTrue("Counter for 'AlarmEvent' incorrectly reported there were no entries", count > 0);
    }

    @Test
    public void AlarmEventIntegrationTest.testFindCurrent_Alarm() {
        AlarmEvent obj = dod.getRandomCurrent_Alarm();
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to initialize correctly", obj);
        Long id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to provide an identifier", id);
        obj = AlarmEvent.findCurrent_Alarm(id);
        org.junit.Assert.assertNotNull("Find method for 'AlarmEvent' illegally returned null for id '" + id + "'", obj);
        org.junit.Assert.assertEquals("Find method for 'AlarmEvent' returned the incorrect identifier", id, obj.getId());
    }

    @Test
    public void AlarmEventIntegrationTest.testFindAllCurrent_Alarms() {
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to initialize correctly", dod.getRandomCurrent_Alarm());
        long count = AlarmEvent.countCurrent_Alarms();
        org.junit.Assert.assertTrue("Too expensive to perform a find all test for 'AlarmEvent', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        java.util.List<AlarmEvent> result = AlarmEvent.findAllCurrent_Alarms();
        org.junit.Assert.assertNotNull("Find all method for 'AlarmEvent' illegally returned null", result);
        org.junit.Assert.assertTrue("Find all method for 'AlarmEvent' failed to return any data", result.size() > 0);
    }

    @Test
    public void AlarmEventIntegrationTest.testFindCurrent_AlarmEntries() {
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to initialize correctly", dod.getRandomCurrent_Alarm());
        long count = AlarmEvent.countCurrent_Alarms();
        if (count > 20) count = 20;
        java.util.List<AlarmEvent> result = AlarmEvent.findCurrent_AlarmEntries(0, (int) count);
        org.junit.Assert.assertNotNull("Find entries method for 'AlarmEvent' illegally returned null", result);
        org.junit.Assert.assertEquals("Find entries method for 'AlarmEvent' returned an incorrect number of entries", count, result.size());
    }

    @Test
    public void AlarmEventIntegrationTest.testFlush() {
        AlarmEvent obj = dod.getRandomCurrent_Alarm();
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to initialize correctly", obj);
        Long id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to provide an identifier", id);
        obj = AlarmEvent.findCurrent_Alarm(id);
        org.junit.Assert.assertNotNull("Find method for 'AlarmEvent' illegally returned null for id '" + id + "'", obj);
        boolean modified = dod.modifyCurrent_Alarm(obj);
        Integer currentVersion = obj.getVersion();
        obj.flush();
        org.junit.Assert.assertTrue("Version for 'AlarmEvent' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }

    @Test
    public void AlarmEventIntegrationTest.testMerge() {
        AlarmEvent obj = dod.getRandomCurrent_Alarm();
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to initialize correctly", obj);
        Long id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to provide an identifier", id);
        obj = AlarmEvent.findCurrent_Alarm(id);
        boolean modified = dod.modifyCurrent_Alarm(obj);
        Integer currentVersion = obj.getVersion();
        AlarmEvent merged = (AlarmEvent) obj.merge();
        obj.flush();
        org.junit.Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        org.junit.Assert.assertTrue("Version for 'AlarmEvent' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }

    @Test
    public void AlarmEventIntegrationTest.testPersist() {
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to initialize correctly", dod.getRandomCurrent_Alarm());
        AlarmEvent obj = dod.getNewTransientCurrent_Alarm(Integer.MAX_VALUE);
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to provide a new transient entity", obj);
        org.junit.Assert.assertNull("Expected 'AlarmEvent' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        org.junit.Assert.assertNotNull("Expected 'AlarmEvent' identifier to no longer be null", obj.getId());
    }

    @Test
    public void AlarmEventIntegrationTest.testRemove() {
        AlarmEvent obj = dod.getRandomCurrent_Alarm();
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to initialize correctly", obj);
        Long id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'AlarmEvent' failed to provide an identifier", id);
        obj = AlarmEvent.findCurrent_Alarm(id);
        obj.remove();
        obj.flush();
        org.junit.Assert.assertNull("Failed to remove 'AlarmEvent' with identifier '" + id + "'", AlarmEvent.findCurrent_Alarm(id));
    }

}
