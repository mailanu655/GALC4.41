// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Random;

privileged aspect AlarmEventDataOnDemand_Roo_DataOnDemand {

    declare @type: AlarmEventDataOnDemand:@Component;

    private Random AlarmEventDataOnDemand.rnd = new java.security.SecureRandom();

    private List<AlarmEvent> AlarmEventDataOnDemand.data;

    public AlarmEvent AlarmEventDataOnDemand.getNewTransientCurrent_Alarm(int index) {
        AlarmEvent obj = new AlarmEvent();
        setLocation(obj, index);
        setAlarmNumber(obj, index);
        return obj;
    }

    public void AlarmEventDataOnDemand.setLocation(AlarmEvent obj, int index) {
        Integer location = new Integer(index);
        obj.setLocation(location);
    }

    public void AlarmEventDataOnDemand.setAlarmNumber(AlarmEvent obj, int index) {
        Integer alarmNumber = new Integer(index);
        obj.setAlarmNumber(alarmNumber);
    }

    public AlarmEvent AlarmEventDataOnDemand.getSpecificCurrent_Alarm(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        AlarmEvent obj = data.get(index);
        return AlarmEvent.findCurrent_Alarm(obj.getId());
    }

    public AlarmEvent AlarmEventDataOnDemand.getRandomCurrent_Alarm() {
        init();
        AlarmEvent obj = data.get(rnd.nextInt(data.size()));
        return AlarmEvent.findCurrent_Alarm(obj.getId());
    }

    public boolean AlarmEventDataOnDemand.modifyCurrent_Alarm(AlarmEvent obj) {
        return false;
    }

    public void AlarmEventDataOnDemand.init() {
        data = AlarmEvent.findCurrent_AlarmEntries(0, 10);
        if (data == null)
            throw new IllegalStateException("Find entries implementation for 'AlarmEvent' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }

        data = new java.util.ArrayList<AlarmEvent>();
        for (int i = 0; i < 10; i++) {
            AlarmEvent obj = getNewTransientCurrent_Alarm(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }

}
