// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect AlarmDefinition_Roo_Entity {

    declare @type: AlarmDefinition:@Entity;

    declare @type: AlarmDefinition:@Table(name = "ALARMS_DEFINITION_TBX");

    @PersistenceContext
    transient EntityManager AlarmDefinition.entityManager;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ALARM_DEFINITION_ID")
    private Long AlarmDefinition.id;

    @Version
    @Column(name = "version")
    private Integer AlarmDefinition.version;

    public Long AlarmDefinition.getId() {
        return this.id;
    }

    public void AlarmDefinition.setId(Long id) {
        this.id = id;
    }

    public Integer AlarmDefinition.getVersion() {
        return this.version;
    }

    public void AlarmDefinition.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void AlarmDefinition.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void AlarmDefinition.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AlarmDefinition attached = AlarmDefinition.findAlarmDefinition(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void AlarmDefinition.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void AlarmDefinition.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public AlarmDefinition AlarmDefinition.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AlarmDefinition merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager AlarmDefinition.entityManager() {
        EntityManager em = new AlarmDefinition().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long AlarmDefinition.countAlarmDefinitions() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AlarmDefinition o", Long.class).getSingleResult();
    }

    public static List<AlarmDefinition> AlarmDefinition.findAllAlarmDefinitions() {
        return entityManager().createQuery("SELECT o FROM AlarmDefinition o ORDER BY o.id asc", AlarmDefinition.class).getResultList();
    }

    public static AlarmDefinition AlarmDefinition.findAlarmDefinition(Long id) {
        if (id == null) return null;
        return entityManager().find(AlarmDefinition.class, id);
    }

    public static List<AlarmDefinition> AlarmDefinition.findAlarmEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AlarmDefinition o ORDER BY o.id asc", AlarmDefinition.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static List<AlarmDefinition> AlarmDefinition.findAlarmEntriesByActiveStatus(int firstResult, int maxResults, Boolean active) {
        Query q = entityManager().createQuery("SELECT o FROM AlarmDefinition o where o.active=:active ORDER BY o.id asc", AlarmDefinition.class);
        q.setParameter("active", active);
        return q.setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    public static long AlarmDefinition.countActiveAlarms(Boolean active) {
        Query q = entityManager().createQuery("SELECT COUNT(o) FROM AlarmDefinition o where o.active=:active ", Long.class);
         q.setParameter("active", active);

        return (Long)q.getSingleResult();
    }

    public static AlarmDefinition AlarmDefinition.findAlarmByAlarmNumberAndLocation(Integer number, Integer location) {
        Query q = entityManager().createQuery("SELECT o FROM AlarmDefinition o where o.alarmNumber=:alarmNumber and o.location=:location", AlarmDefinition.class);
        q.setParameter("alarmNumber", number);
        q.setParameter("location", location);
        List<AlarmDefinition> alarmDefinitions = q.getResultList();
        if (alarmDefinitions != null && alarmDefinitions.size()>0) {
            return alarmDefinitions.get(0);
        }

        return null;
    }

    public static AlarmDefinition AlarmDefinition.findNotificationRequiredAlarmsByAlarmNumberAndLocation(Integer number, Integer location) {
        Query q = entityManager().createQuery("SELECT o FROM AlarmDefinition o where o.alarmNumber=:alarmNumber and o.location=:location and o.notificationRequired =:notificationRequired", AlarmDefinition.class);
        q.setParameter("alarmNumber", number);
        q.setParameter("location", location);
        q.setParameter("notificationRequired", true);
        System.out.println(number+"-"+location+"-"+ true);
        List<AlarmDefinition> alarmDefinitions = q.getResultList();
        if (alarmDefinitions != null && alarmDefinitions.size()>0) {
            return alarmDefinitions.get(0);
        }

        return null;
    }

}
