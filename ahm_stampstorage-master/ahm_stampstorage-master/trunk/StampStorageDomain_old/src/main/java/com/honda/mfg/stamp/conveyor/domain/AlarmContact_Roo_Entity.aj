// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect AlarmContact_Roo_Entity {
    
    declare @type: AlarmContact: @Entity;
    
    declare @type: AlarmContact: @Table(name = "ALARM_CONTACT_TBX");
    
    @PersistenceContext
    transient EntityManager AlarmContact.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ALARM_CONTACT_ID")
    private Long AlarmContact.id;
    
    @Version
    @Column(name = "version")
    private Integer AlarmContact.version;
    
    public Long AlarmContact.getId() {
        return this.id;
    }
    
    public void AlarmContact.setId(Long id) {
        this.id = id;
    }
    
    public Integer AlarmContact.getVersion() {
        return this.version;
    }
    
    public void AlarmContact.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void AlarmContact.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AlarmContact.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AlarmContact attached = AlarmContact.findAlarmContact(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AlarmContact.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AlarmContact.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public AlarmContact AlarmContact.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AlarmContact merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager AlarmContact.entityManager() {
        EntityManager em = new AlarmContact().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AlarmContact.countAlarmContacts() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AlarmContact o", Long.class).getSingleResult();
    }
    
    public static List<AlarmContact> AlarmContact.findAllAlarmContacts() {
        return entityManager().createQuery("SELECT o FROM AlarmContact o", AlarmContact.class).getResultList();
    }
    
    public static AlarmContact AlarmContact.findAlarmContact(Long id) {
        if (id == null) return null;
        return entityManager().find(AlarmContact.class, id);
    }

    public static AlarmContact AlarmContact.findAlarmContactByAlarmAndContact(AlarmDefinition alarm, Contact contact){
        Query q = entityManager().createQuery("SELECT o FROM AlarmContact o where o.alarm=:alarm And o.contact=:contact", AlarmContact.class);
        q.setParameter("alarm", alarm);
        q.setParameter("contact", contact);

        List<AlarmContact> alarmContacts = q.getResultList();
        if(alarmContacts != null || alarmContacts.size() > 0){
            return alarmContacts.get(0);
        }

        return null;
    }

    public static List<AlarmContact> AlarmContact.findAlarmContactsByAlarm(AlarmDefinition alarm){
        Query q = entityManager().createQuery("SELECT o FROM AlarmContact o where o.alarm.id=:alarm ", AlarmContact.class);
        q.setParameter("alarm", alarm.getId());

        List<AlarmContact> alarmContacts = q.getResultList();
        if(alarmContacts != null || alarmContacts.size() > 0){
            return alarmContacts;
        }

        return null;
    }
    
    public static List<AlarmContact> AlarmContact.findAlarmContactEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AlarmContact o", AlarmContact.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
}
