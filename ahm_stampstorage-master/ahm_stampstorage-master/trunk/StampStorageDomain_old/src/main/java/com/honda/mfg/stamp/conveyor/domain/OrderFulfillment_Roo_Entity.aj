// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import com.honda.mfg.stamp.conveyor.domain.enums.CarrierFulfillmentStatus;
import com.honda.mfg.stamp.conveyor.domain.enums.OrderStatus;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

privileged aspect OrderFulfillment_Roo_Entity {

    declare @type: OrderFulfillment:@Entity;

    declare @type: OrderFulfillment:@Table(name = "ORDER_FULFILLMENT_TBX");

    @PersistenceContext
    transient EntityManager OrderFulfillment.entityManager;

    @EmbeddedId
    private OrderFulfillmentPk OrderFulfillment.id;

    @Version
    @Column(name = "version")
    private Integer OrderFulfillment.version;

    public OrderFulfillmentPk OrderFulfillment.getId() {
        return this.id;
    }

    public void OrderFulfillment.setId(OrderFulfillmentPk id) {
        this.id = id;
    }

    public Integer OrderFulfillment.getVersion() {
        return this.version;
    }

    public void OrderFulfillment.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void OrderFulfillment.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void OrderFulfillment.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            OrderFulfillment attached = OrderFulfillment.findOrderFulfillment(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void OrderFulfillment.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void OrderFulfillment.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public OrderFulfillment OrderFulfillment.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        OrderFulfillment merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager OrderFulfillment.entityManager() {
        EntityManager em = new OrderFulfillment().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long OrderFulfillment.countOrderFulfillments() {
        return entityManager().createQuery("SELECT COUNT(o) FROM OrderFulfillment o", Long.class).getSingleResult();
    }

    public static List<OrderFulfillment> OrderFulfillment.findAllOrderFulfillments() {
        return entityManager().createQuery("SELECT o FROM OrderFulfillment o", OrderFulfillment.class).getResultList();
    }

    public static OrderFulfillment OrderFulfillment.findOrderFulfillment(OrderFulfillmentPk id) {
        if (id == null) return null;
        OrderFulfillment fulfillment = entityManager().find(OrderFulfillment.class, id);
        return fulfillment;
    }

    public static List<OrderFulfillment> OrderFulfillment.findOrderFulfillmentEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM OrderFulfillment o", OrderFulfillment.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static List<OrderFulfillment> OrderFulfillment.findAllOrderFulfillmentsByOrder(WeldOrder weldOrder) {
        Query query = null;
        String sql = "SELECT o FROM OrderFulfillment o where o.id.weldOrder =:weldOrder order by o.id.releaseCycle";
        query = entityManager().createQuery(sql, OrderFulfillment.class);
        query.setParameter("weldOrder", weldOrder);
        List<OrderFulfillment> fulfillments = query.getResultList();
        return fulfillments;
    }

    /**
     * find the total number of fulfillment rows for a given order for all cycles
     * @param weldOrder
     * @return {@link Integer}
     */
    public static Integer OrderFulfillment.countAllOrderFulfillmentsByOrder(WeldOrder weldOrder) {
        Long nRows = 0L;
        Query query = null;
        String sql = "SELECT COUNT(*) FROM OrderFulfillment o where o.id.weldOrder =:weldOrder";
        query = entityManager().createQuery(sql, Integer.class);
        query.setParameter("weldOrder", weldOrder);
        Object result = query.getSingleResult();
        if (result != null) {
            nRows = (Long) result;
        }
        return nRows.intValue();
    }

    public static WeldOrder OrderFulfillment.findOrderByCarrier(Carrier carrier) {
        Query query = null;
        WeldOrder order = null;
        List<OrderFulfillment> fulfillments = new ArrayList<OrderFulfillment>();
        String sql = "SELECT o FROM OrderFulfillment o where o.id.carrierNumber=:carrierNumber order by updateDate desc";
        query = entityManager().createQuery(sql, OrderFulfillment.class);
        query.setParameter("carrierNumber", carrier.getCarrierNumber());
        fulfillments = query.getResultList();

        if (fulfillments != null && fulfillments.size() > 0) {

            for (OrderFulfillment fulfillment : fulfillments) {
                if (!fulfillment.getCarrierFulfillmentStatus().equals(CarrierFulfillmentStatus.CONSUMED) && carrier.getDie().equals(fulfillment.getDie())) {
                    order = fulfillment.getId().getWeldOrder();
                    if (order.getModel().getLeftDie().equals(carrier.getDie()) || order.getModel().getRightDie().equals(carrier.getDie())) {
                        break;
                    }
                }
            }

        }

        return order;
    }

    public static WeldOrder OrderFulfillment.findOrderByCarrierForFulfillment(Integer carrier, Die die) {
        WeldOrder order = null;
        List<OrderFulfillment> fulfillments = new ArrayList<OrderFulfillment>();
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.RETRIEVED));
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.RELEASED));
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.DELIVERED));
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.QUEUED));
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.SELECTED_TO_DELIVER));
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.READY_TO_DELIVER));

        if (fulfillments.size() > 0) {

            for (OrderFulfillment fulfillment : fulfillments) {
                if (fulfillment != null && die.equals(fulfillment.getDie())) {
                    WeldOrder tempOrder = fulfillment.getId().getWeldOrder();
                    if (!tempOrder.getOrderStatus().equals(OrderStatus.AutoCompleted) && !tempOrder.getOrderStatus().equals(OrderStatus.ManuallyCompleted)) {
                        if (tempOrder.getModel().getLeftDie().equals(die) || tempOrder.getModel().getRightDie().equals(die)) {
                            order=tempOrder;
                            break;
                        }
                    }
                }
            }
        }
        return order;
    }

    public static WeldOrder OrderFulfillment.findFulfillingOrderByCarrierForFulfillment(Integer carrier, Die die) {
        WeldOrder order = null;
        List<OrderFulfillment> fulfillments = new ArrayList<OrderFulfillment>();
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.RETRIEVED));
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.RELEASED));
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.QUEUED));


        if (fulfillments.size() > 0) {

            for (OrderFulfillment fulfillment : fulfillments) {
                if (fulfillment != null && die.equals(fulfillment.getDie())) {
                    WeldOrder tempOrder = fulfillment.getId().getWeldOrder();
                    if (!tempOrder.getOrderStatus().equals(OrderStatus.ManuallyCompleted)) {
                        if (tempOrder.getModel().getLeftDie().equals(die) || tempOrder.getModel().getRightDie().equals(die)) {
                            order= tempOrder;
                            break;
                        }
                    }
                }
            }
        }
        return order;
    }

     public static WeldOrder OrderFulfillment.findDeliveringOrderByCarrierForFulfillment(Integer carrier, Die die) {
        WeldOrder order = null;
        List<OrderFulfillment> fulfillments = new ArrayList<OrderFulfillment>();
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.READY_TO_DELIVER));
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.SELECTED_TO_DELIVER));
        fulfillments.addAll(findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(carrier, CarrierFulfillmentStatus.DELIVERED));



        if (fulfillments.size() > 0) {

            for (OrderFulfillment fulfillment : fulfillments) {
                if (fulfillment != null && die.equals(fulfillment.getDie())) {
                    WeldOrder tempOrder = fulfillment.getId().getWeldOrder();
                    if (tempOrder.getDeliveryStatus().equals(OrderStatus.InProcess) || tempOrder.getDeliveryStatus().equals(OrderStatus.DeliveringCarriers)) {
                        if (tempOrder.getModel().getLeftDie().equals(die) || tempOrder.getModel().getRightDie().equals(die)) {
                            order= tempOrder;
                            break;
                        }
                    }
                }
            }
        }
        return order;
    }


    public static Integer OrderFulfillment.getMaxCycleCountForOrder(WeldOrder weldOrder) {
        Query query = null;
        List<OrderFulfillment> fulfillments = findAllOrderFulfillmentsByOrder(weldOrder);
        if (fulfillments != null && fulfillments.size() > 0) {
            String sql = "SELECT MAX(o.id.releaseCycle) FROM OrderFulfillment o where o.id.weldOrder=:weldOrder";
            query = entityManager().createQuery(sql, Integer.class);
            query.setParameter("weldOrder", weldOrder);
            Object result = query.getSingleResult();
            if (result != null) {
                Integer fulfillmentCycle = (Integer) result;
                return fulfillmentCycle;
            }

        }
        return 0;
    }

    public static Integer OrderFulfillment.getMaxCycleCountForOrderByCarrier(WeldOrder weldOrder, Integer carrier) {
        Query query = null;
        List<OrderFulfillment> fulfillments = findAllOrderFulfillmentsByOrder(weldOrder);
        if (fulfillments != null && fulfillments.size() > 0) {
            String sql = "SELECT MAX(o.id.releaseCycle) FROM OrderFulfillment o where o.id.weldOrder=:weldOrder and o.id.carrierNumber=:carrierNumber";
            query = entityManager().createQuery(sql, Integer.class);
            query.setParameter("weldOrder", weldOrder);
            query.setParameter("carrierNumber", carrier);
            Object result = query.getSingleResult();
            if (result != null) {
                Integer fulfillmentCycle = (Integer) result;
                return fulfillmentCycle;
            }

        }
        return 0;
    }

    public static Integer OrderFulfillment.getMaxCycleCountForOrderForDie(WeldOrder weldOrder, Die die) {
        Query query = null;
        List<OrderFulfillment> fulfillments = findAllOrderFulfillmentsByOrder(weldOrder);
        if (fulfillments != null && fulfillments.size() > 0) {
            String sql = "SELECT MAX(o.id.releaseCycle) FROM OrderFulfillment o where o.id.weldOrder=:weldOrder and o.die=:die";
            query = entityManager().createQuery(sql, Integer.class);
            query.setParameter("weldOrder", weldOrder);
            query.setParameter("die", die);
            Object result = query.getSingleResult();
            if (result != null) {
                Integer fulfillmentCycle = (Integer) result;
                return fulfillmentCycle;
            }

        }
        return 0;
    }

    public static Integer OrderFulfillment.getMinCycleCountForOrderForFulfillmentStatus(WeldOrder order, CarrierFulfillmentStatus retrieved) {
        Query query = null;
        List<OrderFulfillment> fulfillments = findAllOrderFulfillmentsByOrder(order);
        if (fulfillments != null && fulfillments.size() > 0) {
            String sql = "SELECT MIN(o.id.releaseCycle) FROM OrderFulfillment o where o.id.weldOrder=:weldOrder AND o.carrierFulfillmentStatus=:carrierFulfillmentStatus";
            query = entityManager().createQuery(sql, Integer.class);
            query.setParameter("weldOrder", order);
            query.setParameter("carrierFulfillmentStatus", retrieved);

            Object result = query.getSingleResult();
            if (result != null) {
                Integer fulfillmentCycle = (Integer) result;
                return fulfillmentCycle;
            }

        }
        return 0;
    }

    /**
     * find the number of fulfillment rows for a given order cycle
     * @param weldOrder
     * @param cycle
     * @return {@link Integer}
     */
    public static Integer OrderFulfillment.countFulfillmentsForCycle(WeldOrder weldOrder, Integer cycle) {
        Query query = null;
        Long nRows = 0L;
        String sql = "SELECT COUNT(*) FROM OrderFulfillment o where o.id.weldOrder=:weldOrder and o.id.releaseCycle=:cycle";
        query = entityManager().createQuery(sql, Long.class);
        query.setParameter("weldOrder", weldOrder);
        query.setParameter("cycle", cycle);
        Object result = query.getSingleResult();
        if (result != null) {
            nRows = (Long) result;
        }
        return nRows.intValue();
    }

    public static Integer OrderFulfillment.countFulfillmentsByOrderWithCarrierFulfillmentStatusAndDie(WeldOrder order, Die die, CarrierFulfillmentStatus carrierFulfillmentStatus) {
        Query query = null;
        Long nRows = 0L;
        String sql = "SELECT COUNT(*) FROM OrderFulfillment o where o.id.weldOrder=:weldOrder and o.die=:die and o.carrierFulfillmentStatus=:carrierFulfillmentStatus";
        query = entityManager().createQuery(sql, Long.class);
        query.setParameter("weldOrder", order);
        query.setParameter("die", die);
        query.setParameter("carrierFulfillmentStatus", carrierFulfillmentStatus);
        Object result = query.getSingleResult();
        if (result != null) {
            nRows = (Long) result;
        }
        return nRows.intValue();
    }


    public static List<OrderFulfillment>OrderFulfillment.findAllOrderFulfillmentsByOrderForCycle(WeldOrder order, Integer cycle) {

        Query query = null;
        String sql = "SELECT o FROM OrderFulfillment o where o.id.weldOrder =:weldOrder and o.id.releaseCycle=:releaseCycle";
        query = entityManager().createQuery(sql, OrderFulfillment.class);
        query.setParameter("weldOrder", order);
        query.setParameter("releaseCycle", cycle);
        List<OrderFulfillment> fulfillments = query.getResultList();
        return fulfillments;
    }

    public static List<OrderFulfillment>OrderFulfillment.findAllOrderFulfillmentsByOrderWithCarrierFulfillmentStatus(WeldOrder order, CarrierFulfillmentStatus carrierFulfillmentStatus) {
        Query query = null;
        List<OrderFulfillment> fulfillments = findAllOrderFulfillmentsByOrder(order);
        if (fulfillments != null && fulfillments.size() > 0) {
            String sql = "SELECT o FROM OrderFulfillment o where o.id.weldOrder=:weldOrder AND o.carrierFulfillmentStatus=:carrierFulfillmentStatus";
            query = entityManager().createQuery(sql, OrderFulfillment.class);
            query.setParameter("weldOrder", order);
            query.setParameter("carrierFulfillmentStatus", carrierFulfillmentStatus);
            List<OrderFulfillment> selectedFulfillments = query.getResultList();
            return selectedFulfillments;
        }
        return null;
    }

    @Transactional
    public static void OrderFulfillment.deleteAllOrderFulfillmentsByOrderWithCarrierFulfillmentStatus(WeldOrder order, CarrierFulfillmentStatus carrierFulfillmentStatus) {

        List<OrderFulfillment> fulfillments = findAllOrderFulfillmentsByOrder(order);
        if (fulfillments != null && fulfillments.size() > 0) {
//            String sql = "DELETE FROM OrderFulfillment o where o.id.weldOrder=:weldOrder AND o.carrierFulfillmentStatus=:carrierFulfillmentStatus";
//            query = entityManager().createQuery(sql);
//            query.setParameter("weldOrder", order);
//            query.setParameter("carrierFulfillmentStatus", carrierFulfillmentStatus);
//            int result = query.executeUpdate();

            for (OrderFulfillment fulfillment : fulfillments) {

                if (fulfillment.getCarrierFulfillmentStatus().equals(carrierFulfillmentStatus)) {
                    fulfillment.remove();
                }
            }
        }
    }

    public static List<OrderFulfillment>OrderFulfillment.findAllOrderFulfillmentsByCarrierWithCarrierFulfillmentStatus(Integer carrierNumber, CarrierFulfillmentStatus carrierFulfillmentStatus) {
        Query query = null;

        String sql = "SELECT o FROM OrderFulfillment o where o.id.carrierNumber=:carrierNumber AND o.carrierFulfillmentStatus=:carrierFulfillmentStatus order by o.id.weldOrder desc";
        query = entityManager().createQuery(sql, OrderFulfillment.class);
        query.setParameter("carrierNumber", carrierNumber);
        query.setParameter("carrierFulfillmentStatus", carrierFulfillmentStatus);
        List<OrderFulfillment> selectedFulfillments = query.getResultList();
        return selectedFulfillments;
    }

    public static List<OrderFulfillment>OrderFulfillment.findAllNotConsumedOrderFulfillmentsByCarrier(Carrier carrier) {
        Query query = null;

        String sql = "SELECT o FROM OrderFulfillment o where o.id.carrierNumber=:carrierNumber  AND o.carrierFulfillmentStatus <> :carrierFulfillmentStatus";
        query = entityManager().createQuery(sql, OrderFulfillment.class);
        query.setParameter("carrierNumber", carrier.getCarrierNumber());
        query.setParameter("carrierFulfillmentStatus", CarrierFulfillmentStatus.CONSUMED);
        List<OrderFulfillment> selectedFulfillments = query.getResultList();
        return selectedFulfillments;
    }
    public static List<OrderFulfillment>OrderFulfillment.findAllOrderFulfillmentsWithCurrentLocation(Stop currentLoc) {
        Query query = null;
        if (currentLoc == null) return null;
        String sql = "SELECT o FROM OrderFulfillment o, CarrierMes m where o.currentLocation=:queueStop AND o.id.carrierNumber=m.carrierNumber order by m.updateDate asc";
        query = entityManager().createQuery(sql, OrderFulfillment.class);
        query.setParameter("queueStop", currentLoc);
        List<OrderFulfillment> selectedFulfillments = query.getResultList();
        return selectedFulfillments;
    }
    public static List<OrderFulfillment>OrderFulfillment.findAllOrderFulfillmentsByCarrierNotDeliveryCompleted(Integer carrierNumber) {
        Query query = null;

        String sql = "SELECT o FROM OrderFulfillment o, WeldOrder w where o.id.carrierNumber=:carrierNumber AND o.id.weldOrder.id=w.id and w.orderStatus <> :deliveryStatus1 and w.orderStatus <> :deliveryStatus2";
        query = entityManager().createQuery(sql, OrderFulfillment.class);
        query.setParameter("carrierNumber", carrierNumber);
        query.setParameter("deliveryStatus1", OrderStatus.AutoCompleted);
        query.setParameter("deliveryStatus2", OrderStatus.ManuallyCompleted);

        List<OrderFulfillment> selectedFulfillments = query.getResultList();
        return selectedFulfillments;
    }

    public static Integer OrderFulfillment.countFulfillmentsByCarrierNotDeliveryCompleted(Integer carrierNumber) {
        Query query = null;
        Long nRows = 0L;
        String sql = "SELECT count(*) FROM OrderFulfillment o, WeldOrder w where o.id.carrierNumber=:carrierNumber AND o.id.weldOrder.id=w.id and w.deliveryStatus <> :deliveryStatus1 and w.deliveryStatus <> :deliveryStatus2";
        query = entityManager().createQuery(sql, Long.class);
        query.setParameter("carrierNumber", carrierNumber);
        query.setParameter("deliveryStatus1", OrderStatus.AutoCompleted);
        query.setParameter("deliveryStatus2", OrderStatus.ManuallyCompleted);

        Object result = query.getSingleResult();
        if (result != null) {
            nRows = (Long) result;
        }
        return nRows.intValue();
    }

}
