// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import com.honda.mfg.stamp.conveyor.domain.enums.SEVERITY;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;
import java.sql.Timestamp;

privileged aspect AuditErrorLog_Roo_Entity {
    
    declare @type: AuditErrorLog: @Entity;
    
    declare @type: AuditErrorLog: @Table(name = "AUDIT_ERROR_LOG_TBX");
    
    @PersistenceContext
    transient EntityManager AuditErrorLog.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "LOG_ID")
    private Long AuditErrorLog.id;
    
    @Version
    @Column(name = "version")
    private Integer AuditErrorLog.version;
    
    public Long AuditErrorLog.getId() {
        return this.id;
    }
    
    public void AuditErrorLog.setId(Long id) {
        this.id = id;
    }
    
    public Integer AuditErrorLog.getVersion() {
        return this.version;
    }
    
    public void AuditErrorLog.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void AuditErrorLog.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AuditErrorLog.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AuditErrorLog attached = AuditErrorLog.findAuditErrorLog(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AuditErrorLog.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AuditErrorLog.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public AuditErrorLog AuditErrorLog.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AuditErrorLog merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager AuditErrorLog.entityManager() {
        EntityManager em = new AuditErrorLog().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AuditErrorLog.countAuditErrorLogs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AuditErrorLog o", Long.class).getSingleResult();
    }
    
    public static List<AuditErrorLog> AuditErrorLog.findAllAuditErrorLogs() {
        return entityManager().createQuery("SELECT o FROM AuditErrorLog o", AuditErrorLog.class).getResultList();
    }
    
    public static AuditErrorLog AuditErrorLog.findAuditErrorLog(Long id) {
        if (id == null) return null;
        return entityManager().find(AuditErrorLog.class, id);
    }
    
    public static List<AuditErrorLog> AuditErrorLog.findAuditErrorLogEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AuditErrorLog o", AuditErrorLog.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    @Transactional
    public static void AuditErrorLog.save(String nodeId, String message, String source) {
                AuditErrorLog auditErrorLogEntry = new AuditErrorLog();
                auditErrorLogEntry.setLogTimestamp(new Timestamp(System.currentTimeMillis()));
                auditErrorLogEntry.setNodeId(nodeId);
                auditErrorLogEntry.setMessageText(message);
                auditErrorLogEntry.setSeverity(SEVERITY.FOUR.type());
                auditErrorLogEntry.setSource(source);

                auditErrorLogEntry.persist();
    }
    
}
