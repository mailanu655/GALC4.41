// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect Die_Roo_Entity {

    declare @type: Die:@Entity;

    declare @type: Die:@Table(name = "DIE_TBX");

    @PersistenceContext
    transient EntityManager Die.entityManager;

    @Id
    //@GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "DIE_ID")
    private Long Die.id;

    @Version
    @Column(name = "version")
    private Integer Die.version;

    public Long Die.getId() {
        return this.id;
    }

    public void Die.setId(Long id) {
        this.id = id;
    }

    public Integer Die.getVersion() {
        return this.version;
    }

    public void Die.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void Die.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void Die.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Die attached = Die.findDie(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void Die.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void Die.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public Die Die.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Die merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager Die.entityManager() {
        EntityManager em = new Die().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long Die.countDies() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Die o", Long.class).getSingleResult();
    }

    public static List<Die> Die.findAllDies() {
        return entityManager().createQuery("SELECT o FROM Die o", Die.class).getResultList();
    }

    public static List<Die> Die.findActiveDies() {
        Boolean active = true;
        Query q = entityManager().createQuery("SELECT o FROM Die o where o.active=:active or o.active=null", Die.class);
        q.setParameter("active", true);
        return q.getResultList();
    }

    public static Die Die.findDie(Long id) {
        if (id == null) return null;
        return entityManager().find(Die.class, id);
    }

    public static List<Die> Die.findDieEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Die o", Die.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
}