// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import java.util.ArrayList;
import java.util.List;

privileged aspect CarrierMes_Roo_Finder {

    public static List<CarrierMes> CarrierMes.findCarriersByCarrierNumberAndDieAndCurrentLocationAndCarrierStatusAndPressAndProductionRunNo(CarrierFinderCriteria finderCriteria, Integer page, Integer sizeNo) {
        EntityManager em = Carrier.entityManager();
        TypedQuery<CarrierMes> q = null;
        String sql = "SELECT o FROM CarrierMes AS o ";
        List<String> criteriaList = new ArrayList<String>();
        q = em.createQuery(sql, CarrierMes.class);

        if (finderCriteria.getCarrierNumber() != null) {
            criteriaList.add("o.carrierNumber = :carrierNumber");
        }
        if (finderCriteria.getDie() != null) {
            criteriaList.add("o.dieNumber = :die");
        }
        if (finderCriteria.getCurrentLocation() != null) {
            criteriaList.add("o.currentLocation = :currentLocation");
        }
        if (finderCriteria.getCarrierStatus() != null) {
            criteriaList.add("o.status = :carrierStatus");
        }
        if (finderCriteria.getPress() != null) {
            criteriaList.add("o.originationLocation = :press");
        }
        if (finderCriteria.getProductionRunNo() != null) {
            criteriaList.add("o.productionRunNumber = :productionRunNo");
        }
        if (finderCriteria.getDestination() != null) {
            criteriaList.add("o.destination = :destination");
        }

        if (criteriaList.size() > 0) {
            sql = sql + " where ";

            String tempsql = "";
            tempsql = criteriaList.get(0);
            for (int i = 1; i < criteriaList.size(); i++) {
                tempsql = tempsql + " AND " + criteriaList.get(i);
            }
            String orderBySql = " order by o.destination,o.buffer desc, o.updateDate asc";
            q = em.createQuery(sql + tempsql + orderBySql, CarrierMes.class);

            if (finderCriteria.getCarrierNumber() != null) {
                q.setParameter("carrierNumber", finderCriteria.getCarrierNumber());
            }
            if (finderCriteria.getDie() != null) {
                q.setParameter("die", Integer.parseInt(finderCriteria.getDie().getId().toString()));
            }
            if (finderCriteria.getCurrentLocation() != null) {
                q.setParameter("currentLocation", finderCriteria.getCurrentLocation().getId());
            }
            if (finderCriteria.getCarrierStatus() != null) {
                q.setParameter("carrierStatus", finderCriteria.getCarrierStatus().type());
            }
            if (finderCriteria.getPress() != null) {
                q.setParameter("press", finderCriteria.getPress().type());
            }
            if (finderCriteria.getProductionRunNo() != null) {
                q.setParameter("productionRunNo", finderCriteria.getProductionRunNo());
            }
            if (finderCriteria.getDestination() != null) {
                q.setParameter("destination", finderCriteria.getDestination().getId());
            }
        }
        List<CarrierMes> carrierMesList = q.getResultList();
        if (page == null || sizeNo == null) {
            return carrierMesList;
        } else {
            return q.setFirstResult(page == null ? 0 : (page.intValue() - 1) * sizeNo).setMaxResults(sizeNo).getResultList();
        }
    }

    public static Long CarrierMes.getFindCarrierCount(CarrierFinderCriteria finderCriteria) {
        EntityManager em = Carrier.entityManager();
        TypedQuery<Long> q = null;
        String sql = "SELECT count(o) FROM CarrierMes AS o ";
        List<String> criteriaList = new ArrayList<String>();

        if (finderCriteria.getCarrierNumber() != null) {
            criteriaList.add("o.carrierNumber = :carrierNumber");
        }
        if (finderCriteria.getDie() != null) {
            criteriaList.add("o.dieNumber = :die");
        }
        if (finderCriteria.getCurrentLocation() != null) {
            criteriaList.add("o.currentLocation = :currentLocation");
        }
        if (finderCriteria.getCarrierStatus() != null) {
            criteriaList.add("o.status = :carrierStatus");
        }
        if (finderCriteria.getPress() != null) {
            criteriaList.add("o.originationLocation = :press");
        }
        if (finderCriteria.getProductionRunNo() != null) {
            criteriaList.add("o.productionRunNumber = :productionRunNo");
        }
        if (finderCriteria.getDestination() != null) {
            criteriaList.add("o.destination = :destination");
        }
        String tempsql = "";
        if (criteriaList.size() > 0) {
            sql = sql + " where ";

            tempsql = criteriaList.get(0);
            for (int i = 1; i < criteriaList.size(); i++) {
                tempsql = tempsql + " AND " + criteriaList.get(i);
            }
            q = em.createQuery(sql + tempsql, Long.class);
            if (finderCriteria.getCarrierNumber() != null) {
                q.setParameter("carrierNumber", finderCriteria.getCarrierNumber());
            }
            if (finderCriteria.getDie() != null) {
                q.setParameter("die", Integer.parseInt(finderCriteria.getDie().getId().toString()));
            }
            if (finderCriteria.getCurrentLocation() != null) {
                q.setParameter("currentLocation", finderCriteria.getCurrentLocation().getId());
            }
            if (finderCriteria.getCarrierStatus() != null) {
                q.setParameter("carrierStatus", finderCriteria.getCarrierStatus().type());
            }
            if (finderCriteria.getPress() != null) {
                q.setParameter("press", finderCriteria.getPress().type());
            }
            if (finderCriteria.getProductionRunNo() != null) {
                q.setParameter("productionRunNo", finderCriteria.getProductionRunNo());
            }
            if (finderCriteria.getDestination() != null) {
                q.setParameter("destination", finderCriteria.getDestination().getId());
            }

        }
        if (q == null) {
            q = em.createQuery(sql, Long.class);
        }
        Long count = q.getSingleResult();
        return count != null ? count : 0;
    }

    public static List<CarrierMes> CarrierMes.findCarriersByRowAndProductionRunNoAndRobotAndProdRunDate(GroupHoldFinderCriteria finderCriteria, Integer page, Integer sizeNo) {
        EntityManager em = Carrier.entityManager();
        TypedQuery<CarrierMes> q = null;
        String sql = "SELECT o FROM CarrierMes AS o ";
        List<String> criteriaList = new ArrayList<String>();
        q = em.createQuery(sql, CarrierMes.class);
        String orderBySql = "";
        Integer maxResults = null;
        List<CarrierMes> carrierMesList = new ArrayList<CarrierMes>();

        if (finderCriteria.getProductionRunDate() != null && finderCriteria.getNumberAfterRunDate() != null && finderCriteria.getNumberAfterRunDate() > 0) {
            criteriaList.clear();
            if (finderCriteria.getProductionRunNumber() != null) {
                criteriaList.add("o.productionRunNumber = :productionRunNo");
                orderBySql = " order by productionRunDate asc";
            }
            if (finderCriteria.getRobot() != null) {
                criteriaList.add("o.originationLocation = :robot");
                orderBySql = " order by productionRunDate asc";
            }

            criteriaList.add("o.productionRunDate > :productionRunDate");
            orderBySql = " order by productionRunDate asc";
            maxResults = finderCriteria.getNumberAfterRunDate();

            if (finderCriteria.getRow() != null) {
                if (finderCriteria.getRowAndProdRun()) {
                    criteriaList.add("o.currentLocation = :currentLocation");
                }
            }
            criteriaList.add("o.dieNumber!=999");
            criteriaList.add("o.quantity > 0");

            if (criteriaList.size() > 0) {
                String tempsql = "";
                int k = 1;
                String fetchsql = "";
                if (maxResults != null && maxResults > 0) {
                    fetchsql = " FETCH FIRST " + maxResults + " ROWS ONLY ";
                }
                tempsql = criteriaList.get(0);
                for (int i = k; i < criteriaList.size(); i++) {
                    tempsql = tempsql + " AND " + criteriaList.get(i);
                }

                q = em.createQuery(sql + " WHERE " + tempsql + orderBySql + fetchsql, CarrierMes.class);

                if (finderCriteria.getRow() != null) {
                    if (finderCriteria.getRowAndProdRun()) {
                        q.setParameter("currentLocation", finderCriteria.getRow().getStop().getId());
                    }
                }
                if (finderCriteria.getProductionRunNumber() != null) {
                    q.setParameter("productionRunNo", finderCriteria.getProductionRunNumber());
                }
                if (finderCriteria.getRobot() != null) {
                    q.setParameter("robot", finderCriteria.getRobot().type());
                }
                if (finderCriteria.getProductionRunDate() != null && ((finderCriteria.getNumberAfterRunDate() != null && finderCriteria.getNumberAfterRunDate() > 0) || (finderCriteria.getNumberBeforeRunDate() != null && finderCriteria.getNumberBeforeRunDate() > 0))) {
                    q.setParameter("productionRunDate", finderCriteria.getProductionRunDate());
                }
            }

            List<CarrierMes> carrierList = q.getResultList();

            if (carrierList != null && carrierList.size() > 0) {
                for (int i = 0; i < maxResults; i++) {
                    if (carrierList.size() > i) {
                        carrierMesList.add(carrierList.get(i));
                    }
                }
            }

        }
         if (finderCriteria.getProductionRunDate() != null) {
            criteriaList.clear();
            if (finderCriteria.getProductionRunNumber() != null) {
                criteriaList.add("o.productionRunNumber = :productionRunNo");
            }
            if (finderCriteria.getRobot() != null) {
                criteriaList.add("o.originationLocation = :robot");
            }

            criteriaList.add("o.productionRunDate = :productionRunDate");
            orderBySql = " order by productionRunDate asc";

            if (finderCriteria.getRow() != null) {
                if (finderCriteria.getRowAndProdRun()) {
                    criteriaList.add("o.currentLocation = :currentLocation");
                }
            }
            criteriaList.add("o.dieNumber!=999");
            criteriaList.add("o.quantity > 0");

            if (criteriaList.size() > 0) {
                String tempsql = "";
                int k = 1;

                tempsql = criteriaList.get(0);
                for (int i = k; i < criteriaList.size(); i++) {
                    tempsql = tempsql + " AND " + criteriaList.get(i);
                }

                q = em.createQuery(sql + " WHERE " + tempsql + orderBySql , CarrierMes.class);

                if (finderCriteria.getRow() != null) {
                    if (finderCriteria.getRowAndProdRun()) {
                        q.setParameter("currentLocation", finderCriteria.getRow().getId());
                    }
                }
                if (finderCriteria.getProductionRunNumber() != null) {
                    q.setParameter("productionRunNo", finderCriteria.getProductionRunNumber());
                }
                if (finderCriteria.getRobot() != null) {
                    q.setParameter("robot", finderCriteria.getRobot().type());
                }
                if (finderCriteria.getProductionRunDate() != null ) {
                    q.setParameter("productionRunDate", finderCriteria.getProductionRunDate());
                    System.out.println(finderCriteria.getProductionRunDate());
                }
            }

            List<CarrierMes> carrierList = q.getResultList();

            if (carrierList != null && carrierList.size() > 0) {
                carrierMesList.add(carrierList.get(0));
            }
        }
        if (finderCriteria.getProductionRunDate() != null && finderCriteria.getNumberBeforeRunDate() != null && finderCriteria.getNumberBeforeRunDate() > 0) {
            criteriaList.clear();
            if (finderCriteria.getProductionRunNumber() != null) {
                criteriaList.add("o.productionRunNumber = :productionRunNo");
            }
            if (finderCriteria.getRobot() != null) {
                criteriaList.add("o.originationLocation = :robot");
            }


            criteriaList.add(" o.productionRunDate < :productionRunDate");
            maxResults = finderCriteria.getNumberBeforeRunDate();
            orderBySql = " order by o.productionRunDate desc";

            if (finderCriteria.getRow() != null) {
                if (finderCriteria.getRowAndProdRun()) {
                    criteriaList.add("o.currentLocation = :currentLocation");
                }
            }
            criteriaList.add("o.dieNumber!=999");
            criteriaList.add("o.quantity > 0");

            if (criteriaList.size() > 0) {
                String tempsql = "";
                int k = 1;
                String fetchsql = "";
                if (maxResults != null && maxResults > 0) {
                    fetchsql = " FETCH FIRST " + maxResults + " ROWS ONLY ";
                }
                tempsql = criteriaList.get(0);
                for (int i = k; i < criteriaList.size(); i++) {
                    tempsql = tempsql + " AND " + criteriaList.get(i);
                }

                q = em.createQuery(sql + " WHERE " + tempsql + orderBySql + fetchsql, CarrierMes.class);

                if (finderCriteria.getRow() != null) {
                    if (finderCriteria.getRowAndProdRun()) {
                        q.setParameter("currentLocation", finderCriteria.getRow().getStop().getId());
                    }
                }
                if (finderCriteria.getProductionRunNumber() != null) {
                    q.setParameter("productionRunNo", finderCriteria.getProductionRunNumber());
                }
                if (finderCriteria.getRobot() != null) {
                    q.setParameter("robot", finderCriteria.getRobot().type());
                }
                if (finderCriteria.getProductionRunDate() != null && ((finderCriteria.getNumberAfterRunDate() != null && finderCriteria.getNumberAfterRunDate() > 0) || (finderCriteria.getNumberBeforeRunDate() != null && finderCriteria.getNumberBeforeRunDate() > 0))) {
                    q.setParameter("productionRunDate", finderCriteria.getProductionRunDate());
                }
            }

            List<CarrierMes> carrierList = q.getResultList();

            if (carrierList != null && carrierList.size() > 0) {
                for (int i = 0; i < maxResults; i++) {
                    if (carrierList.size() > i) {
                        carrierMesList.add(carrierList.get(i));
                    }
                }
            }
        }

        if (finderCriteria.getProductionRunDate() == null) {
            criteriaList.clear();
            if (finderCriteria.getProductionRunNumber() != null) {
                criteriaList.add("o.productionRunNumber = :productionRunNo");
                orderBySql = " order by productionRunDate asc";
            }
            if (finderCriteria.getRobot() != null) {
                criteriaList.add("o.originationLocation = :robot");
                orderBySql = " order by productionRunDate asc";
            }

            if (finderCriteria.getRow() != null) {
                if (finderCriteria.getRowAndProdRun()) {
                    criteriaList.add("o.currentLocation = :currentLocation");
                }
            }
            criteriaList.add("o.dieNumber!=999");
            criteriaList.add("o.quantity > 0");

            if (criteriaList.size() > 0) {
                String tempsql = "";
                int k = 1;

                tempsql = criteriaList.get(0);
                for (int i = k; i < criteriaList.size(); i++) {
                    tempsql = tempsql + " AND " + criteriaList.get(i);
                }

                q = em.createQuery(sql + " WHERE " + tempsql + orderBySql, CarrierMes.class);

                if (finderCriteria.getRow() != null) {
                    if (finderCriteria.getRowAndProdRun()) {
                        q.setParameter("currentLocation", finderCriteria.getRow().getStop().getId());
                    }
                }
                if (finderCriteria.getProductionRunNumber() != null) {
                    q.setParameter("productionRunNo", finderCriteria.getProductionRunNumber());
                }
                if (finderCriteria.getRobot() != null) {
                    q.setParameter("robot", finderCriteria.getRobot().type());
                }

            }

            if (page == null || sizeNo == null) {
                return q.getResultList();
            } else {
                return q.setFirstResult(page == null ? 0 : (page.intValue() - 1) * sizeNo).setMaxResults(sizeNo).getResultList();
            }
        }
        if (page == null || sizeNo == null) {
            return carrierMesList;
        } else {
            List<CarrierMes> pagedList = new ArrayList<CarrierMes>();
            int firstresult = (page - 1) * sizeNo;
            int max = page * sizeNo;
            for (int i = firstresult; i < max; i++) {
                if (carrierMesList.size() > i) {
                    pagedList.add(carrierMesList.get(i));
                }
            }

            return pagedList;
        }
    }

    public static Long CarrierMes.getGroupHoldCarrierCount(GroupHoldFinderCriteria finderCriteria) {
        EntityManager em = Carrier.entityManager();
        TypedQuery<CarrierMes> q = null;
        String sql = "SELECT o FROM CarrierMes AS o ";
        List<String> criteriaList = new ArrayList<String>();
        q = em.createQuery(sql, CarrierMes.class);
        String orderBySql = "";
        Integer maxResults = null;
        Long count = 0l;
        List<CarrierMes> carrierMesList = new ArrayList<CarrierMes>();

        if (finderCriteria.getProductionRunDate() != null && finderCriteria.getNumberAfterRunDate() != null && finderCriteria.getNumberAfterRunDate() > 0) {
            criteriaList.clear();
            if (finderCriteria.getProductionRunNumber() != null) {
                criteriaList.add("o.productionRunNumber = :productionRunNo");
                orderBySql = " order by productionRunDate asc";
            }
            if (finderCriteria.getRobot() != null) {
                criteriaList.add("o.originationLocation = :robot");
                orderBySql = " order by productionRunDate asc";
            }

            criteriaList.add("o.productionRunDate > :productionRunDate");
            orderBySql = " order by productionRunDate asc";
            maxResults = finderCriteria.getNumberAfterRunDate();

            if (finderCriteria.getRow() != null) {
                if (finderCriteria.getRowAndProdRun()) {
                    criteriaList.add("o.currentLocation = :currentLocation");
                }
            }
            criteriaList.add("o.dieNumber!=999");
            criteriaList.add("o.quantity > 0");

            if (criteriaList.size() > 0) {
                String tempsql = "";
                int k = 1;
                String fetchsql = "";
                if (maxResults != null && maxResults > 0) {
                    fetchsql = " FETCH FIRST " + maxResults + " ROWS ONLY ";
                }
                tempsql = criteriaList.get(0);
                for (int i = k; i < criteriaList.size(); i++) {
                    tempsql = tempsql + " AND " + criteriaList.get(i);
                }

                q = em.createQuery(sql + " WHERE " + tempsql + orderBySql + fetchsql, CarrierMes.class);

                if (finderCriteria.getRow() != null) {
                    if (finderCriteria.getRowAndProdRun()) {
                        q.setParameter("currentLocation", finderCriteria.getRow().getId());
                    }
                }
                if (finderCriteria.getProductionRunNumber() != null) {
                    q.setParameter("productionRunNo", finderCriteria.getProductionRunNumber());
                }
                if (finderCriteria.getRobot() != null) {
                    q.setParameter("robot", finderCriteria.getRobot().type());
                }
                if (finderCriteria.getProductionRunDate() != null && ((finderCriteria.getNumberAfterRunDate() != null && finderCriteria.getNumberAfterRunDate() > 0) || (finderCriteria.getNumberBeforeRunDate() != null && finderCriteria.getNumberBeforeRunDate() > 0))) {
                    q.setParameter("productionRunDate", finderCriteria.getProductionRunDate());
                }
            }

            List<CarrierMes> carrierList = q.getResultList();

            if (carrierList != null && carrierList.size() > 0) {
                for (int i = 0; i < maxResults; i++) {
                    if (carrierList.size() > i) {
                        carrierMesList.add(carrierList.get(i));
                    }
                }
            }

        }
        if (finderCriteria.getProductionRunDate() != null) {
            criteriaList.clear();
            if (finderCriteria.getProductionRunNumber() != null) {
                criteriaList.add("o.productionRunNumber = :productionRunNo");
            }
            if (finderCriteria.getRobot() != null) {
                criteriaList.add("o.originationLocation = :robot");
            }

            criteriaList.add("o.productionRunDate = :productionRunDate");
            orderBySql = " order by productionRunDate asc";

            if (finderCriteria.getRow() != null) {
                if (finderCriteria.getRowAndProdRun()) {
                    criteriaList.add("o.currentLocation = :currentLocation");
                }
            }
            criteriaList.add("o.dieNumber!=999");
            criteriaList.add("o.quantity > 0");

            if (criteriaList.size() > 0) {
                String tempsql = "";
                int k = 1;

                tempsql = criteriaList.get(0);
                for (int i = k; i < criteriaList.size(); i++) {
                    tempsql = tempsql + " AND " + criteriaList.get(i);
                }

                q = em.createQuery(sql + " WHERE " + tempsql + orderBySql , CarrierMes.class);

                if (finderCriteria.getRow() != null) {
                    if (finderCriteria.getRowAndProdRun()) {
                        q.setParameter("currentLocation", finderCriteria.getRow().getStop().getId());
                    }
                }
                if (finderCriteria.getProductionRunNumber() != null) {
                    q.setParameter("productionRunNo", finderCriteria.getProductionRunNumber());
                }
                if (finderCriteria.getRobot() != null) {
                    q.setParameter("robot", finderCriteria.getRobot().type());
                }
                if (finderCriteria.getProductionRunDate() != null ) {
                    q.setParameter("productionRunDate", finderCriteria.getProductionRunDate());
                    System.out.println(finderCriteria.getProductionRunDate());
                }
            }

            List<CarrierMes> carrierList = q.getResultList();

            if (carrierList != null && carrierList.size() > 0) {
                carrierMesList.add(carrierList.get(0));
            }
        }
        if (finderCriteria.getProductionRunDate() != null && finderCriteria.getNumberBeforeRunDate() != null && finderCriteria.getNumberBeforeRunDate() > 0) {
            criteriaList.clear();
            if (finderCriteria.getProductionRunNumber() != null) {
                criteriaList.add("o.productionRunNumber = :productionRunNo");
                orderBySql = " order by productionRunDate asc";
            }
            if (finderCriteria.getRobot() != null) {
                criteriaList.add("o.originationLocation = :robot");
                orderBySql = " order by productionRunDate asc";
            }

            criteriaList.add(" o.productionRunDate < :productionRunDate");
            maxResults = finderCriteria.getNumberBeforeRunDate();
            orderBySql = " order by o.productionRunDate desc";

            if (finderCriteria.getRow() != null) {
                if (finderCriteria.getRowAndProdRun()) {
                    criteriaList.add("o.currentLocation = :currentLocation");
                }
            }
            criteriaList.add("o.dieNumber!=999");
            criteriaList.add("o.quantity > 0");

            if (criteriaList.size() > 0) {
                String tempsql = "";
                int k = 1;
                String fetchsql = "";
                if (maxResults != null && maxResults > 0) {
                    fetchsql = " FETCH FIRST " + maxResults + " ROWS ONLY ";
                }
                tempsql = criteriaList.get(0);
                for (int i = k; i < criteriaList.size(); i++) {
                    tempsql = tempsql + " AND " + criteriaList.get(i);
                }

                q = em.createQuery(sql + " WHERE " + tempsql + orderBySql + fetchsql, CarrierMes.class);

                if (finderCriteria.getRow() != null) {
                    if (finderCriteria.getRowAndProdRun()) {
                        q.setParameter("currentLocation", finderCriteria.getRow().getStop().getId());
                    }
                }
                if (finderCriteria.getProductionRunNumber() != null) {
                    q.setParameter("productionRunNo", finderCriteria.getProductionRunNumber());
                }
                if (finderCriteria.getRobot() != null) {
                    q.setParameter("robot", finderCriteria.getRobot().type());
                }
                if (finderCriteria.getProductionRunDate() != null && ((finderCriteria.getNumberAfterRunDate() != null && finderCriteria.getNumberAfterRunDate() > 0) || (finderCriteria.getNumberBeforeRunDate() != null && finderCriteria.getNumberBeforeRunDate() > 0))) {
                    q.setParameter("productionRunDate", finderCriteria.getProductionRunDate());
                }
            }

            List<CarrierMes> carrierList = q.getResultList();

            if (carrierList != null && carrierList.size() > 0) {
                for (int i = 0; i < maxResults; i++) {
                    if (carrierList.size() > i) {
                        carrierMesList.add(carrierList.get(i));
                    }
                }
            }
        }

        if (finderCriteria.getProductionRunDate() == null) {
            criteriaList.clear();
            if (finderCriteria.getProductionRunNumber() != null) {
                criteriaList.add("o.productionRunNumber = :productionRunNo");
                orderBySql = " order by productionRunDate asc";
            }
            if (finderCriteria.getRobot() != null) {
                criteriaList.add("o.originationLocation = :robot");
                orderBySql = " order by productionRunDate asc";
            }

            if (finderCriteria.getRow() != null) {
                if (finderCriteria.getRowAndProdRun()) {
                    criteriaList.add("o.currentLocation = :currentLocation");
                }
            }
            criteriaList.add("o.dieNumber!=999");
            criteriaList.add("o.quantity > 0");

            if (criteriaList.size() > 0) {
                String tempsql = "";
                int k = 1;

                tempsql = criteriaList.get(0);
                for (int i = k; i < criteriaList.size(); i++) {
                    tempsql = tempsql + " AND " + criteriaList.get(i);
                }

                q = em.createQuery(sql + " WHERE " + tempsql + orderBySql, CarrierMes.class);

                if (finderCriteria.getRow() != null) {
                    if (finderCriteria.getRowAndProdRun()) {
                        q.setParameter("currentLocation", finderCriteria.getRow().getStop().getId());
                    }
                }
                if (finderCriteria.getProductionRunNumber() != null) {
                    q.setParameter("productionRunNo", finderCriteria.getProductionRunNumber());
                }
                if (finderCriteria.getRobot() != null) {
                    q.setParameter("robot", finderCriteria.getRobot().type());
                }
            }
            List<CarrierMes> carrierList = q.getResultList();

            if (carrierList != null) {
                carrierMesList.addAll(carrierList);
            }
        }

        count = new Long(carrierMesList.size());
        return count;
    }

}
