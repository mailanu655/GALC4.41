// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect PressActivity_Roo_Entity {
    
    declare @type: PressActivity: @Entity;
    
    declare @type: PressActivity: @Table(name = "PRESS_ACTIVITY_TBX");
    
    @PersistenceContext
    transient EntityManager PressActivity.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "PRESS_ACTIVITY_ID")
    private Long PressActivity.id;
    
    @Version
    @Column(name = "version")
    private Integer PressActivity.version;
    
    public Long PressActivity.getId() {
        return this.id;
    }
    
    public void PressActivity.setId(Long id) {
        this.id = id;
    }
    
    public Integer PressActivity.getVersion() {
        return this.version;
    }
    
    public void PressActivity.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void PressActivity.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void PressActivity.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            PressActivity attached = PressActivity.findPressActivity(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void PressActivity.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void PressActivity.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public PressActivity PressActivity.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        PressActivity merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager PressActivity.entityManager() {
        EntityManager em = new PressActivity().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long PressActivity.countPressActivitys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM PressActivity o", Long.class).getSingleResult();
    }
    
    public static List<PressActivity> PressActivity.findAllPressActivitys() {
        return entityManager().createQuery("SELECT o FROM PressActivity o", PressActivity.class).getResultList();
    }
    
    public static PressActivity PressActivity.findPressActivity(Long id) {
        if (id == null) return null;
        return entityManager().find(PressActivity.class, id);
    }
    
    public static List<PressActivity> PressActivity.findPressActivityEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM PressActivity o", PressActivity.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static PressActivity PressActivity.findPressActivityByPressName(String pressName){
        Query q = entityManager().createQuery("SELECT o FROM PressActivity o WHERE o.pressName =:pressName", PressActivity.class);
        q.setParameter("pressName", pressName);

        List<PressActivity> pressActivities = q.getResultList();

        if(pressActivities.size() > 0){
            return pressActivities.get(0);
        }

        return null;
    }
    
}
