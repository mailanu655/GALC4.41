// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import com.honda.mfg.stamp.conveyor.domain.ValidDestination;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Query;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ValidDestination_Roo_Entity {
    
    declare @type: ValidDestination: @Entity;
    
    declare @type: ValidDestination: @Table(name = "VALID_DESTINATION_TBX");
    
    @PersistenceContext
    transient EntityManager ValidDestination.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID")
    private Long ValidDestination.id;
    
    @Version
    @Column(name = "version")
    private Integer ValidDestination.version;
    
    public Long ValidDestination.getId() {
        return this.id;
    }
    
    public void ValidDestination.setId(Long id) {
        this.id = id;
    }
    
    public Integer ValidDestination.getVersion() {
        return this.version;
    }
    
    public void ValidDestination.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void ValidDestination.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void ValidDestination.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ValidDestination attached = ValidDestination.findValidDestination(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void ValidDestination.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void ValidDestination.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public ValidDestination ValidDestination.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        ValidDestination merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager ValidDestination.entityManager() {
        EntityManager em = new ValidDestination().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long ValidDestination.countValidDestinations() {
        return entityManager().createQuery("SELECT COUNT(o) FROM ValidDestination o", Long.class).getSingleResult();
    }
    
    public static List<ValidDestination> ValidDestination.findAllValidDestinations() {
        return entityManager().createQuery("SELECT o FROM ValidDestination o", ValidDestination.class).getResultList();
    }
    
    public static ValidDestination ValidDestination.findValidDestination(Long id) {
        if (id == null) return null;
        return entityManager().find(ValidDestination.class, id);
    }

    
    public static List<ValidDestination> ValidDestination.findValidDestinationEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM ValidDestination o", ValidDestination.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    //GSA 20130708
    public static List<ValidDestination> ValidDestination.findValidDestinationForGivenStopAndDestination(Stop stop, Stop destination) {
	    String sql = "SELECT o FROM ValidDestination o where o.stop = :stop and o.destination = :destination ";
	    Query q = null;
	    q = entityManager().createQuery(sql, ValidDestination.class);
	    q.setParameter("stop", stop);
	    q.setParameter("destination", destination);
	    return q.setMaxResults(1000).getResultList();		
    }
     
    //GSA 20130708
    public static List<Stop> ValidDestination.findValidDestinationsForGivenStop(Stop stop) {
	    String sql = "SELECT o.destination FROM ValidDestination o where " +
	            "o.stop = :stop ";
	    Query q = entityManager().createQuery(sql, Stop.class);
	    q.setParameter("stop", stop);
	    return q.setMaxResults(1000).getResultList();		
    }
}
