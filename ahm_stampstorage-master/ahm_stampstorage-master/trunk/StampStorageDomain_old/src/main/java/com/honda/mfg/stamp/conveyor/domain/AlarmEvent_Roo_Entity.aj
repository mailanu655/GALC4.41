// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect AlarmEvent_Roo_Entity {

    declare @type: AlarmEvent:@Entity;

    declare @type: AlarmEvent:@Table(name = "ALARM_EVENT_TBX");

    @PersistenceContext
    transient EntityManager AlarmEvent.entityManager;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ALARM_EVENT_ID")
    private Long AlarmEvent.id;

    @Version
    @Column(name = "version")
    private Integer AlarmEvent.version;

    public Long AlarmEvent.getId() {
        return this.id;
    }

    public void AlarmEvent.setId(Long id) {
        this.id = id;
    }

    public Integer AlarmEvent.getVersion() {
        return this.version;
    }

    public void AlarmEvent.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void AlarmEvent.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void AlarmEvent.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AlarmEvent attached = AlarmEvent.findCurrent_Alarm(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void AlarmEvent.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void AlarmEvent.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public AlarmEvent AlarmEvent.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AlarmEvent merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager AlarmEvent.entityManager() {
        EntityManager em = new AlarmEvent().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long AlarmEvent.countCurrent_Alarms() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AlarmEvent o", Long.class).getSingleResult();
    }

    public static List<AlarmEvent> AlarmEvent.findAllCurrent_Alarms() {
        LOG.debug("findAllCurrent_Alarms!!!! ");
        return entityManager().createQuery("SELECT o FROM AlarmEvent o ORDER BY o.eventTimestamp desc", AlarmEvent.class).setFirstResult(1).setMaxResults(1000).getResultList();
    }

    public static AlarmEvent AlarmEvent.findCurrent_Alarm(Long id) {
        if (id == null) return null;
        return entityManager().find(AlarmEvent.class, id);
    }

    public static List<AlarmEvent> AlarmEvent.findCurrent_AlarmEntries(int firstResult, int maxResults) {
        LOG.debug("findCurrent_AlarmEntries - firstResult:" + firstResult + ", maxResults:" + maxResults);
        return entityManager().createQuery("SELECT o FROM AlarmEvent o ORDER BY o.eventTimestamp desc", AlarmEvent.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static List<AlarmEvent> AlarmEvent.findCurrentUnClearedAlarms(int maxResults) {
        Query q = entityManager().createQuery("SELECT o FROM AlarmEvent o WHERE o.cleared =:cleared OR o.cleared = null ORDER BY o.eventTimestamp asc", AlarmEvent.class);
        q.setParameter("cleared", false);
        return q.setMaxResults(maxResults).getResultList();
    }

     public static List<AlarmEvent> AlarmEvent.findCurrentUnClearedAlarmsToNotify(int maxResults) {
        Query q = entityManager().createQuery("SELECT o FROM AlarmEvent o WHERE (o.cleared =:cleared OR o.cleared = null) AND (o.notified =:notified OR o.notified = null) ORDER BY o.eventTimestamp asc", AlarmEvent.class);
        q.setParameter("cleared", false);
        q.setParameter("notified", false);

        return q.setMaxResults(maxResults).getResultList();
    }

     public static List<AlarmEvent> AlarmEvent.findCurrentUnClearedAlarmsForAppNotify(int maxResults) {
        Query q = entityManager().createQuery("SELECT o FROM AlarmEvent o WHERE (o.cleared =:cleared OR o.cleared = null) AND o.alarmNumber in (SELECT ad.alarmNumber FROM AlarmDefinition ad WHERE ad.notificationRequired=:notificationReq) ORDER BY o.eventTimestamp asc", AlarmEvent.class);
        q.setParameter("cleared", false);

        q.setParameter("notificationReq", true);
        return q.setMaxResults(maxResults).getResultList();
     }

     public static List<AlarmEvent> AlarmEvent.findCurrentUnClearedAlarmsForQpcNotify(int maxResults) {
        Query q = entityManager().createQuery("SELECT o FROM AlarmEvent o WHERE (o.cleared =:cleared OR o.cleared = null) AND o.alarmNumber in (SELECT ad.alarmNumber FROM AlarmDefinition ad WHERE ad.qpcNotificationRequired=:qpcNotificationReq) ORDER BY o.eventTimestamp asc", AlarmEvent.class);
        q.setParameter("cleared", false);

        q.setParameter("qpcNotificationReq", true);
        return q.setMaxResults(maxResults).getResultList();
    }
     public static List<AlarmEvent> AlarmEvent.findCurrentUnClearedAlarmsByType(int type, int maxResults) {
         Query q = entityManager().createQuery("SELECT o FROM AlarmEvent o WHERE (o.cleared =:cleared OR o.cleared = null) AND o.alarmNumber in (SELECT ad.alarmNumber FROM AlarmDefinition ad WHERE ad.alarmNumber=:whichAlarm) ORDER BY o.eventTimestamp asc", AlarmEvent.class);
         q.setParameter("cleared", false);
         q.setParameter("whichAlarm", type);
         return q.setMaxResults(maxResults).getResultList();
     }

}
