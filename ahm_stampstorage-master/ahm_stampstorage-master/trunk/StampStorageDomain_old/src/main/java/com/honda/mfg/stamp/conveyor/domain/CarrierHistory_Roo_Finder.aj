// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import java.util.ArrayList;
import java.util.List;

privileged aspect CarrierHistory_Roo_Finder {

    private static final Logger LOG = LoggerFactory.getLogger(CarrierHistory_Roo_Finder.class);

    public static List<CarrierHistory> CarrierHistory.findCarrierHistoryByCarrierNumber(CarrierHistoryFinderCriteria finderCriteria, Integer page, Integer sizeNo) {
        EntityManager em = Carrier.entityManager();
        TypedQuery<CarrierHistory> q = null;
        String sql = "SELECT o FROM CarrierHistory AS o ";
        List<String> criteriaList = new ArrayList<String>();
        q = em.createQuery(sql, CarrierHistory.class);

        if (finderCriteria.getCarrierNumber() != null) {
            criteriaList.add("o.carrierNumber = :carrierNumber");
        }
        if (finderCriteria.getDie() != null) {
            criteriaList.add("o.dieNumber = :die");
        }
        if (finderCriteria.getCurrentLocation() != null) {
            criteriaList.add("o.currentLocation = :currentLocation");
        }
        if (finderCriteria.getDestination() != null) {
            criteriaList.add("o.destination = :destination");
        }
        if (finderCriteria.getCarrierStatus() != null) {
            criteriaList.add("o.status = :carrierStatus");
        }
        if (finderCriteria.getPress() != null) {
            criteriaList.add("o.originationLocation = :press");
        }
        if (finderCriteria.getProductionRunNo() != null) {
            criteriaList.add("o.productionRunNumber = :productionRunNo");
        }
        if (finderCriteria.getDestination() != null) {
            criteriaList.add("o.destination = :destination");
        }

        if (criteriaList.size() > 0) {
            sql = sql + " where ";

            String tempsql = "";
            tempsql = criteriaList.get(0);
            for (int i = 1; i < criteriaList.size(); i++) {
                tempsql = tempsql + " AND " + criteriaList.get(i);
            }
            String orderBySql = " order by o.id desc";
            q = em.createQuery(sql + tempsql + orderBySql, CarrierHistory.class);

            if (finderCriteria.getCarrierNumber() != null) {
                q.setParameter("carrierNumber", finderCriteria.getCarrierNumber());
            }
            if (finderCriteria.getDie() != null) {
                q.setParameter("die", finderCriteria.getDie().getId());
            }
            if (finderCriteria.getCurrentLocation() != null) {
                q.setParameter("currentLocation", finderCriteria.getCurrentLocation().getId());
            }
            if (finderCriteria.getProductionRunNo() != null) {
                q.setParameter("productionRunNo", finderCriteria.getProductionRunNo());
            }
            if (finderCriteria.getDestination() != null) {
                q.setParameter("destination", finderCriteria.getDestination().getId());
            }
            if (finderCriteria.getCarrierStatus() != null) {
                q.setParameter("carrierStatus", finderCriteria.getCarrierStatus());
            }
            if (finderCriteria.getPress() != null) {
                q.setParameter("press", finderCriteria.getPress().type());
            }
        }
        if (page == null || sizeNo == null) {
            return q.getResultList();
        } else {
            return q.setFirstResult(page == null ? 0 : (page.intValue() - 1) * sizeNo).setMaxResults(sizeNo).getResultList();
        }
    }

    public static Long CarrierHistory.getFindCarrierHistoryCount(CarrierHistoryFinderCriteria finderCriteria) {
        EntityManager em = Carrier.entityManager();
        TypedQuery<Long> q = null;
        String sql = "SELECT count(o) FROM CarrierHistory AS o ";
        List<String> criteriaList = new ArrayList<String>();

        if (finderCriteria.getCarrierNumber() != null) {
            criteriaList.add("o.carrierNumber = :carrierNumber");
        }
        if (finderCriteria.getDie() != null) {
            criteriaList.add("o.dieNumber = :die");
        }
        if (finderCriteria.getCurrentLocation() != null) {
            criteriaList.add("o.currentLocation = :currentLocation");
        }
        if (finderCriteria.getCarrierStatus() != null) {
            criteriaList.add("o.status = :carrierStatus");
        }
        if (finderCriteria.getPress() != null) {
            criteriaList.add("o.originationLocation = :press");
        }
        if (finderCriteria.getProductionRunNo() != null) {
            criteriaList.add("o.productionRunNumber = :productionRunNo");
        }
        if (finderCriteria.getDestination() != null) {
            criteriaList.add("o.destination = :destination");
        }
        String tempsql = "";
        if (criteriaList.size() > 0) {
            sql = sql + " where ";

            tempsql = criteriaList.get(0);
            for (int i = 1; i < criteriaList.size(); i++) {
                tempsql = tempsql + " AND " + criteriaList.get(i);
            }
            q = em.createQuery(sql + tempsql, Long.class);
            if (finderCriteria.getCarrierNumber() != null) {
                q.setParameter("carrierNumber", finderCriteria.getCarrierNumber());
            }
            if (finderCriteria.getDie() != null) {
                q.setParameter("die", Integer.parseInt(finderCriteria.getDie().getId().toString()));
            }
            if (finderCriteria.getCurrentLocation() != null) {
                q.setParameter("currentLocation", finderCriteria.getCurrentLocation().getId());
            }
            if (finderCriteria.getProductionRunNo() != null) {
                q.setParameter("productionRunNo", finderCriteria.getProductionRunNo());
            }
            if (finderCriteria.getDestination() != null) {
                q.setParameter("destination", finderCriteria.getDestination().getId());
            }

        }
        if (q == null) {
            q = em.createQuery(sql, Long.class);
        }
        Long count = q.getSingleResult();
        return count != null ? count : 0;
    }

}
