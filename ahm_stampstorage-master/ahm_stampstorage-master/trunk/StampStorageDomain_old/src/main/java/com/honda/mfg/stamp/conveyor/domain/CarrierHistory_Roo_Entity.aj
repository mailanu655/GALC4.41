// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import com.honda.mfg.stamp.conveyor.domain.CarrierHistory;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import javax.persistence.Version;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CarrierHistory_Roo_Entity {

    declare @type: CarrierHistory: @Entity;

    declare @type: CarrierHistory: @Table(name = "CARRIER_MES_ARCHIVE_TBX");

    @PersistenceContext
    transient EntityManager CarrierHistory.entityManager;

    private static final Logger LOG = LoggerFactory.getLogger(CarrierHistory_Roo_Entity.class);

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "CARRIER_ID")
    private Long CarrierHistory.id;

    @Version
    @Column(name = "version")
    private Integer CarrierHistory.version;

    public Long CarrierHistory.getId() {
        return this.id;
    }

    public void CarrierHistory.setId(Long id) {
        this.id = id;
    }

    public Integer CarrierHistory.getVersion() {
        return this.version;
    }

    public void CarrierHistory.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void CarrierHistory.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void CarrierHistory.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CarrierHistory attached = CarrierHistory.findCarrierHistory(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void CarrierHistory.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void CarrierHistory.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public CarrierHistory CarrierHistory.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CarrierHistory merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager CarrierHistory.entityManager() {
        EntityManager em = new CarrierHistory().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long CarrierHistory.countCarrierHistories() {
        LOG.debug(entityManager().createQuery("SELECT COUNT(o) FROM CarrierHistory o", Long.class).toString());
        return entityManager().createQuery("SELECT COUNT(o) FROM CarrierHistory o", Long.class).getSingleResult();
    }

    public static List<CarrierHistory> CarrierHistory.findAllCarrierHistories() {
        return entityManager().createQuery("SELECT o FROM CarrierHistory o ORDER BY o.id desc", CarrierHistory.class).setMaxResults(1000).getResultList();
    }

    public static CarrierHistory CarrierHistory.findCarrierHistory(Long id) {
        if (id == null) return null;
        return entityManager().find(CarrierHistory.class, id);
    }

    public static List<CarrierHistory> CarrierHistory.findCarrierHistoryEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CarrierHistory o ORDER BY o.id desc", CarrierHistory.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }



}
