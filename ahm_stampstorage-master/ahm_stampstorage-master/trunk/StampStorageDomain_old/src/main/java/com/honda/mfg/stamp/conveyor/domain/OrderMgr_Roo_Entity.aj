// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect OrderMgr_Roo_Entity {

    declare @type: OrderMgr:@Entity;

    declare @type: OrderMgr:@Table(name = "ORDER_MGR_TBX");

    @PersistenceContext
    transient EntityManager OrderMgr.entityManager;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ORDER_MGR_ID")
    private Long OrderMgr.id;

    @Version
    @Column(name = "version")
    private Integer OrderMgr.version;

    public Long OrderMgr.getId() {
        return this.id;
    }

    public void OrderMgr.setId(Long id) {
        this.id = id;
    }

    public Integer OrderMgr.getVersion() {
        return this.version;
    }

    public void OrderMgr.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void OrderMgr.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void OrderMgr.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            OrderMgr attached = OrderMgr.findOrderMgr(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void OrderMgr.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void OrderMgr.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public OrderMgr OrderMgr.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        OrderMgr merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager OrderMgr.entityManager() {
        EntityManager em = new OrderMgr().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long OrderMgr.countOrderMgrs() {
        return entityManager().createQuery("SELECT COUNT(o) FROM OrderMgr o", Long.class).getSingleResult();
    }

    public static List<OrderMgr> OrderMgr.findAllOrderMgrs() {
        return entityManager().createQuery("SELECT o FROM OrderMgr o", OrderMgr.class).getResultList();
    }

    public static OrderMgr OrderMgr.findOrderMgr(Long id) {
        if (id == null) return null;
        OrderMgr orderMgr = entityManager().find(OrderMgr.class, id);
        return orderMgr;
    }

    public static List<OrderMgr> OrderMgr.findOrderMgrEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM OrderMgr o", OrderMgr.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

//    public WeldOrder OrderMgr.getActiveOrder() {
//        List<WeldOrder> orders = entityManager().createQuery("SELECT o.orders FROM OrderMgr o", WeldOrder.class).getResultList();
//        WeldOrder activeOrder = null;
//        for (WeldOrder order : orders) {
//            if (order.getOrderStatus().equals(OrderStatus.InProcess) || order.getOrderStatus().equals(OrderStatus.Delivered)) {
//                break;
//            }
//            if (order.getOrderStatus().equals(OrderStatus.Queued)) {
//                activeOrder = order;
//                break;
//            }
//        }
//        return activeOrder;
//    }

}
