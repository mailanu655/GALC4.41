// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect Carrier_Roo_Entity {

    declare @type: Carrier:@Entity;

    declare @type: Carrier:@Table(name = "CARRIER_TBX");

    @PersistenceContext
    transient EntityManager Carrier.entityManager;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "CARRIER_ID")
    private Long Carrier.id;

    @Version
    @Column(name = "version")
    private Integer Carrier.version;

    public Long Carrier.getId() {
        return this.id;
    }

    public void Carrier.setId(Long id) {
        this.id = id;
    }

    public Integer Carrier.getVersion() {
        return this.version;
    }

    public void Carrier.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void Carrier.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void Carrier.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Carrier attached = Carrier.findCarrier(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void Carrier.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void Carrier.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public Carrier Carrier.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Carrier merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager Carrier.entityManager() {
        EntityManager em = new Carrier().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long Carrier.countCarriers() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Carrier o", Long.class).getSingleResult();
    }

    public static List<Carrier> Carrier.findAllCarriers() {
        return entityManager().createQuery("SELECT o FROM Carrier o", Carrier.class).getResultList();
    }

    public static Carrier Carrier.findCarrier(Long id) {
        if (id == null) return null;
        return entityManager().find(Carrier.class, id);
    }

    public static List<Carrier> Carrier.findCarrierEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Carrier o", Carrier.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
}
