// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import com.honda.mfg.stamp.conveyor.domain.enums.OrderStatus;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;

import java.util.List;

privileged aspect WeldOrder_Roo_Entity {

    declare @type: WeldOrder:@Entity;

    declare @type: WeldOrder:@Table(name = "WELD_ORDER_TBX");

    @PersistenceContext
    transient EntityManager WeldOrder.entityManager;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ORDER_ID")
    private Long WeldOrder.id;

    @Version
    @Column(name = "version")
    private Integer WeldOrder.version;

    public Long WeldOrder.getId() {
        return this.id;
    }

    public void WeldOrder.setId(Long id) {
        this.id = id;
    }

    public Integer WeldOrder.getVersion() {
        return this.version;
    }

    public void WeldOrder.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void WeldOrder.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void WeldOrder.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            WeldOrder attached = WeldOrder.findWeldOrder(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void WeldOrder.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void WeldOrder.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public WeldOrder WeldOrder.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        WeldOrder merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager WeldOrder.entityManager() {
        EntityManager em = new WeldOrder().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long WeldOrder.countWeldOrders() {
        return entityManager().createQuery("SELECT COUNT(o) FROM WeldOrder o", Long.class).getSingleResult();
    }

    public static List<WeldOrder> WeldOrder.findAllWeldOrders() {
        String sql = "SELECT o FROM WeldOrder o where " +
                "o.orderStatus = :queuedOrderStatus OR " +
                "o.orderStatus = :inProcessOrderStatus OR " +
                "o.orderStatus = :deliveredOrderStatus OR " +
                "o.orderStatus = :holdOrderStatus OR " +
                "o.orderStatus = :orderCarriersStatus OR " +
                "o.orderStatus = :deliveringCarriersStatus "+
                "order by o.createdDate asc";
        Query q = entityManager().createQuery(sql, WeldOrder.class);
        q.setParameter("queuedOrderStatus", OrderStatus.Queued);
        q.setParameter("inProcessOrderStatus", OrderStatus.InProcess);
        q.setParameter("deliveredOrderStatus", OrderStatus.Delivered);
        q.setParameter("holdOrderStatus", OrderStatus.OnHold);
        q.setParameter("orderCarriersStatus", OrderStatus.RetrievingCarriers);
        q.setParameter("deliveringCarriersStatus", OrderStatus.DeliveringCarriers);
        return q.setMaxResults(1000).getResultList();
    }

      public static List<WeldOrder> WeldOrder.findAllWeldOrdersByOrderMgr(OrderMgr orderMgr) {
        String sql = "SELECT o FROM WeldOrder o where  o.orderMgr =:orderMgr and (" +
                "o.orderStatus = :queuedOrderStatus OR " +
                "o.orderStatus = :inProcessOrderStatus OR " +
                "o.orderStatus = :deliveredOrderStatus OR " +
                "o.orderStatus = :holdOrderStatus OR " +
                "o.orderStatus = :orderCarriersStatus OR " +
                "o.orderStatus = :deliveringCarriersStatus ) " +
                " order by o.createdDate asc";
        Query q = entityManager().createQuery(sql, WeldOrder.class);
        q.setParameter("queuedOrderStatus", OrderStatus.Queued);
        q.setParameter("inProcessOrderStatus", OrderStatus.InProcess);
        q.setParameter("deliveredOrderStatus", OrderStatus.Delivered);
        q.setParameter("holdOrderStatus", OrderStatus.OnHold);
        q.setParameter("orderCarriersStatus", OrderStatus.RetrievingCarriers);
        q.setParameter("deliveringCarriersStatus", OrderStatus.DeliveringCarriers);
        q.setParameter("orderMgr", orderMgr);

        return q.setMaxResults(1000).getResultList();
    }
    public static WeldOrder WeldOrder.findWeldOrder(Long id) {
        if (id == null) return null;
        return entityManager().find(WeldOrder.class, id);
    }

    public static List<WeldOrder> WeldOrder.findWeldOrderEntries(int firstResult, int maxResults) {
         String sql = "SELECT o FROM WeldOrder o where " +
                "o.orderStatus = :queuedOrderStatus OR " +
                "o.orderStatus = :inProcessOrderStatus OR " +
                "o.orderStatus = :deliveredOrderStatus OR " +
                "o.orderStatus = :holdOrderStatus OR " +
                "o.orderStatus = :orderCarriersStatus OR " +
                "o.orderStatus = :deliveringCarriersStatus "+
                "order by o.createdDate asc";
        Query q = entityManager().createQuery(sql, WeldOrder.class);
        q.setParameter("queuedOrderStatus", OrderStatus.Queued);
        q.setParameter("inProcessOrderStatus", OrderStatus.InProcess);
        q.setParameter("deliveredOrderStatus", OrderStatus.Delivered);
        q.setParameter("holdOrderStatus", OrderStatus.OnHold);
        q.setParameter("orderCarriersStatus", OrderStatus.RetrievingCarriers);
        q.setParameter("deliveringCarriersStatus", OrderStatus.DeliveringCarriers);
        return q.setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static List<WeldOrder> WeldOrder.findWeldOrdersByOrderMgrAndOrderStatus(OrderMgr orderMgr, OrderStatus orderStatus) {
        Query q = null;

        if (orderMgr != null && orderStatus != null) {
            LOG.info(orderMgr.toString() + "----" + orderStatus);
            q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.orderMgr =:ordermgr and o.orderStatus =:orderStatus order by id desc", WeldOrder.class);
            q.setParameter("ordermgr", orderMgr);
            q.setParameter("orderStatus", orderStatus);
            return q.setMaxResults(1000).getResultList();
        }
        if (orderMgr != null && orderStatus == null) {
            LOG.info(orderMgr.toString());
            q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.orderMgr =:ordermgr order by id desc ", WeldOrder.class);
            q.setParameter("ordermgr", orderMgr);
            return q.setMaxResults(1000).getResultList();
        }
        if (orderMgr == null && orderStatus != null) {
            LOG.info(orderStatus.name());
            q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.orderStatus =:orderStatus order by id desc", WeldOrder.class);
            q.setParameter("orderStatus", orderStatus);
            return q.setMaxResults(1000).getResultList();
        }

        return null;
    }
     public static List<WeldOrder> WeldOrder.findWeldOrdersByOrderMgrAndDeliveryStatus(OrderMgr orderMgr, OrderStatus deliveryStatus) {
         Query q = null;

        if (orderMgr != null && deliveryStatus != null) {
            LOG.info(orderMgr.toString() + "----" + deliveryStatus);
            q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.orderMgr =:ordermgr and o.deliveryStatus =:orderStatus order by id desc", WeldOrder.class);
            q.setParameter("ordermgr", orderMgr);
            q.setParameter("orderStatus", deliveryStatus);
            return q.setMaxResults(1000).getResultList();
        }
        if (orderMgr != null && deliveryStatus == null) {
            LOG.info(orderMgr.toString());
            q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.orderMgr =:ordermgr order by id desc ", WeldOrder.class);
            q.setParameter("ordermgr", orderMgr);
            return q.setMaxResults(1000).getResultList();
        }
        if (orderMgr == null && deliveryStatus != null) {
            LOG.info(deliveryStatus.name());
            q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.orderStatus =:deliveryStatus order by id desc", WeldOrder.class);
            q.setParameter("orderStatus", deliveryStatus);
            return q.setMaxResults(1000).getResultList();
        }

        return null;
     }

    public static List<WeldOrder> WeldOrder.findWeldOrdersByOrderMgrNotNullAndOrderStatusAndDeliveryStatus(OrderMgr orderMgr, OrderStatus orderStatus, OrderStatus deliveryStatus) {
        Query q = null;
        String queryString = "";
        if (orderMgr == null) throw new IllegalArgumentException("The orderMgr argument is required");

        // q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.orderMgr =:ordermgr and o.orderStatus =:orderStatus order by id desc", WeldOrder.class);

        queryString = "SELECT o FROM WeldOrder o where o.orderMgr =:ordermgr ";
        if (orderStatus != null) {
            LOG.info(orderMgr.toString() + "----" + orderStatus);
            queryString += " and o.orderStatus =:orderStatus ";
        }
        if (deliveryStatus != null) {
            LOG.info(orderMgr.toString());
            queryString += " and o.deliveryStatus =:deliveryStatus ";
        }
        
        queryString += " order by id desc ";
        q = entityManager().createQuery(queryString, WeldOrder.class);
        
        q.setParameter("ordermgr", orderMgr);
        if (orderStatus != null) {
            q.setParameter("orderStatus", orderStatus);        	
        }
        if (deliveryStatus != null) {
            q.setParameter("deliveryStatus", deliveryStatus);  	
        }
        return q.setMaxResults(1000).getResultList();
    }

    public static WeldOrder WeldOrder.findActiveOrderForOrderMgr(OrderMgr orderMgr) {
        WeldOrder activeOrder = null;
        List<WeldOrder> orders = null;
        Query q = null;
        q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.orderMgr =:orderMgr AND (o.orderStatus = :orderStatus OR o.orderStatus = :orderingCarrierOrderStatus)", WeldOrder.class);
        q.setParameter("orderMgr", orderMgr);
        q.setParameter("orderStatus", OrderStatus.InProcess);
        q.setParameter("orderingCarrierOrderStatus", OrderStatus.RetrievingCarriers);
        orders = q.getResultList();
        if (orders != null && orders.size() > 0) {
            activeOrder = WeldOrder.findWeldOrder(orders.get(0).getId());
            return activeOrder;
        }

        return null;
    }

    public static WeldOrder WeldOrder.findActiveOrderForDeliveryByOrderMgr(OrderMgr orderMgr) {
        WeldOrder activeOrder = null;
        List<WeldOrder> orders = null;
        Query q = null;
        q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.orderMgr =:orderMgr AND (o.deliveryStatus = :orderStatus OR o.deliveryStatus = :deliveringOrderStatus )", WeldOrder.class);
        q.setParameter("orderMgr", orderMgr);
        q.setParameter("orderStatus", OrderStatus.InProcess);
        q.setParameter("deliveringOrderStatus", OrderStatus.DeliveringCarriers);

        orders = q.getResultList();
        if (orders != null && orders.size() > 0) {
            activeOrder = WeldOrder.findWeldOrder(orders.get(0).getId());
            return activeOrder;
        }

        return null;
    }

    public static List<WeldOrder> WeldOrder.findWeldOrdersByOrderStatus(OrderStatus orderStatus){
        List<WeldOrder> orders = null;
        Query q = null;
        q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.orderStatus = :orderStatus)", WeldOrder.class);
        q.setParameter("orderStatus", orderStatus);

        orders = q.getResultList();

        return orders;
    }

     public static List<WeldOrder> WeldOrder.findWeldOrdersByDeliveryStatus(OrderStatus orderStatus){
        List<WeldOrder> orders = null;
        Query q = null;
        q = entityManager().createQuery("SELECT o FROM WeldOrder o where o.deliveryStatus = :orderStatus)", WeldOrder.class);
        q.setParameter("orderStatus", orderStatus);

        orders = q.getResultList();

        return orders;
    }
     
     public static List<WeldOrder> WeldOrder.findWeldOrdersInProcess() {
         EntityManager em = WeldOrder.entityManager();
         List<WeldOrder> orders = null;
         Query q = em.createQuery("SELECT o FROM WeldOrder AS o WHERE o.orderStatus <> :autoCompleted  AND o.orderStatus <> :manuallyCompleted AND o.orderStatus <> :orderCancelled AND o.orderStatus <> :orderInitialized AND o.orderStatus <> :orderQueued", WeldOrder.class);
         q.setParameter("autoCompleted", OrderStatus.AutoCompleted);
         q.setParameter("manuallyCompleted", OrderStatus.ManuallyCompleted);
         q.setParameter("orderCancelled", OrderStatus.Cancelled);
         q.setParameter("orderInitialized", OrderStatus.Initialized);
         q.setParameter("orderQueued", OrderStatus.Queued);
         orders = q.getResultList();
         return orders;
     }

     public static List<WeldOrder> WeldOrder.findWeldOrdersInProcessByOrderMgr(OrderMgr orderMgr) {
         EntityManager em = WeldOrder.entityManager();
         List<WeldOrder> orders = null;
         Query q = em.createQuery("SELECT o FROM WeldOrder AS o WHERE o.orderMgr = :orderMgr AND (o.orderStatus <> :autoCompleted  AND o.orderStatus <> :manuallyCompleted AND o.orderStatus <> :orderCancelled AND o.orderStatus <> :orderInitialized AND o.orderStatus <> :orderQueued)", WeldOrder.class);
         q.setParameter("orderMgr", orderMgr);
         q.setParameter("autoCompleted", OrderStatus.AutoCompleted);
         q.setParameter("manuallyCompleted", OrderStatus.ManuallyCompleted);
         q.setParameter("orderCancelled", OrderStatus.Cancelled);
         q.setParameter("orderInitialized", OrderStatus.Initialized);
         q.setParameter("orderQueued", OrderStatus.Queued);
         orders = q.getResultList();
         return orders;
     }

     public static List<WeldOrder> WeldOrder.findWeldOrdersDelivering() {
         EntityManager em = WeldOrder.entityManager();
         List<WeldOrder> orders = null;
         StringBuilder s = new StringBuilder();
         s.append("SELECT o FROM WeldOrder AS o WHERE o.deliveryStatus = :delivering ");
         s.append("OR o.deliveryStatus = :delivered OR o.deliveryStatus = :deliveryInProcess ");
         s.append("OR o.deliveryStatus = :deliveryOnHold ");
         s.append("OR (o.deliveryStatus = :deliveryInitialized AND (o.orderStatus = :orderAutoCompleted OR o.orderStatus = :orderManCompleted  ))");
         Query q = em.createQuery(s.toString(), WeldOrder.class);
         q.setParameter("delivering", OrderStatus.DeliveringCarriers);
         q.setParameter("delivered", OrderStatus.Delivered);
         q.setParameter("deliveryInProcess", OrderStatus.InProcess);
         q.setParameter("deliveryOnHold", OrderStatus.OnHold);
         //Included Initialized & order complete -MG
         q.setParameter("deliveryInitialized",OrderStatus.Initialized);
         q.setParameter("orderAutoCompleted", OrderStatus.AutoCompleted);
         q.setParameter("orderManCompleted", OrderStatus.ManuallyCompleted);
         orders = q.getResultList();
         return orders;
     }

     public static List<WeldOrder> WeldOrder.findWeldOrdersDeliveringByOrderMgr(OrderMgr orderMgr) {
         EntityManager em = WeldOrder.entityManager();
         List<WeldOrder> orders = null;
         StringBuilder s = new StringBuilder(); 
         s.append("SELECT o FROM WeldOrder AS o WHERE o.orderMgr = :orderMgr ");
         s.append("AND (o.deliveryStatus = :delivering OR o.deliveryStatus = :delivered OR o.deliveryStatus = :deliveryInProcess ");
         s.append("OR o.deliveryStatus = :deliveryOnHold ");
         s.append("OR (o.deliveryStatus = :deliveryInitialized AND (o.orderStatus = :orderAutoCompleted OR o.orderStatus = :orderManCompleted )))");
         Query q = em.createQuery(s.toString(), WeldOrder.class);
         q.setParameter("orderMgr", orderMgr);
         q.setParameter("delivering", OrderStatus.DeliveringCarriers);
         q.setParameter("delivered", OrderStatus.Delivered);
         q.setParameter("deliveryInProcess", OrderStatus.InProcess);
         q.setParameter("deliveryOnHold", OrderStatus.OnHold);
         //Included Initialized & order complete -MG
         q.setParameter("deliveryInitialized",OrderStatus.Initialized);
         q.setParameter("orderAutoCompleted", OrderStatus.AutoCompleted);
         q.setParameter("orderManCompleted", OrderStatus.ManuallyCompleted);
         orders = q.getResultList();
         return orders;
     }

     public static List<WeldOrder> WeldOrder.findWeldOrdersByDeliveryStatusAndOrderStatus(OrderStatus deliveryStatus, OrderStatus orderStatus) {

    	 if (deliveryStatus == null && orderStatus == null) return null;
         EntityManager em = WeldOrder.entityManager();
         List<WeldOrder> orders = null;
         String queryString = "";
         Query q = null;         
         //Query q = em.createQuery("SELECT o FROM WeldOrder AS o WHERE o.deliveryStatus = :deliveryStatus AND o.orderStatus = :orderStatus", WeldOrder.class);
         if(orderStatus != null)  {
        	 queryString = "SELECT o FROM WeldOrder AS o WHERE o.orderStatus = :orderStatus";
        	 if(deliveryStatus != null)  {
                 queryString += " and o.deliveryStatus =:deliveryStatus ";
        	 }
         }
         else  { //orderStatus is null, but deliveryStatus is not null
        	 queryString = "SELECT o FROM WeldOrder AS o WHERE o.deliveryStatus = :deliveryStatus";        	 
         }
         queryString += " order by id desc ";
         q = em.createQuery(queryString, WeldOrder.class);
         
         if (orderStatus != null) {
             q.setParameter("orderStatus", orderStatus);        	
         }
         if (deliveryStatus != null) {
             q.setParameter("deliveryStatus", deliveryStatus);  	
         }
         orders = q.setMaxResults(1000).getResultList();;
         return orders;
     }
     
     public static List<WeldOrder> WeldOrder.findWeldOrdersPending() {
         EntityManager em = WeldOrder.entityManager();
         List<WeldOrder> orders = null;
         Query q = em.createQuery("SELECT o FROM WeldOrder AS o WHERE o.orderStatus = :orderInitialized OR o.orderStatus = :orderQueued", WeldOrder.class);
         q.setParameter("orderInitialized", OrderStatus.Initialized);
         q.setParameter("orderQueued", OrderStatus.Queued);
         orders = q.getResultList();
         return orders;
     }

     public static List<WeldOrder> WeldOrder.findWeldOrdersPendingByOrderMgr(OrderMgr orderMgr) {
         EntityManager em = WeldOrder.entityManager();
         List<WeldOrder> orders = null;
         Query q = em.createQuery("SELECT o FROM WeldOrder AS o WHERE o.orderMgr = :orderMgr AND (o.orderStatus = :orderInitialized OR o.orderStatus = :orderQueued)", WeldOrder.class);
         q.setParameter("orderMgr", orderMgr);
         q.setParameter("orderInitialized", OrderStatus.Initialized);
         q.setParameter("orderQueued", OrderStatus.Queued);
         orders = q.getResultList();
         return orders;
     }


}
