// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect AlarmEventArchive_Roo_Entity {

    declare @type: AlarmEventArchive:@Entity;

    declare @type: AlarmEventArchive:@Table(name = "ALARM_EVENT_ARCHIVE_TBX");

    @PersistenceContext
    transient EntityManager AlarmEventArchive.entityManager;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ALARM_EVENT_ARCHIVE_ID")
    private Long AlarmEventArchive.id;

    @Version
    @Column(name = "version")
    private Integer AlarmEventArchive.version;

    public Long AlarmEventArchive.getId() {
        return this.id;
    }

    public void AlarmEventArchive.setId(Long id) {
        this.id = id;
    }

    public Integer AlarmEventArchive.getVersion() {
        return this.version;
    }

    public void AlarmEventArchive.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void AlarmEventArchive.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

//    @Transactional
//    public void AlarmEventArchive.remove() {
//        if (this.entityManager == null) this.entityManager = entityManager();
//        if (this.entityManager.contains(this)) {
//            this.entityManager.remove(this);
//        } else {
//            AlarmEvent attached = AlarmEventArchive.findCurrent_Alarm(this.id);
//            this.entityManager.remove(attached);
//        }
//    }

    @Transactional
    public void AlarmEventArchive.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void AlarmEventArchive.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

//    @Transactional
//    public AlarmEventArchive AlarmEventArchive.merge() {
//        if (this.entityManager == null) this.entityManager = entityManager();
//        AlarmEventArchive merged = this.entityManager.merge(this);
//        this.entityManager.flush();
//        return merged;
//    }

    public static final EntityManager AlarmEventArchive.entityManager() {
        EntityManager em = new AlarmEventArchive().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long AlarmEventArchive.countArchivedAlarms() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AlarmEventArchive o", Long.class).getSingleResult();
    }

    public static List<AlarmEventArchive> AlarmEventArchive.findAllArchivedAlarms() {
        LOG.debug("findAllArchivedAlarms!!!! ");
        return entityManager().createQuery("SELECT o FROM AlarmEventArchive o ORDER BY o.eventTimestamp desc", AlarmEventArchive.class).setFirstResult(1).setMaxResults(1000).getResultList();
    }

    public static AlarmEventArchive AlarmEventArchive.findArchivedAlarm(Long id) {
        if (id == null) return null;
        return entityManager().find(AlarmEventArchive.class, id);
    }

    public static List<AlarmEventArchive> AlarmEventArchive.findArchivedAlarmEntries(int firstResult, int maxResults) {
        LOG.debug("findArchivedAlarmEntries - firstResult:" + firstResult + ", maxResults:" + maxResults);
        return entityManager().createQuery("SELECT o FROM AlarmEventArchive o ORDER BY o.eventTimestamp desc", AlarmEventArchive.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

}
