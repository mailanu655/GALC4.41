// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect Defect_Roo_Entity {

    declare @type: Defect:@Entity;

    declare @type: Defect:@Table(name = "DEFECT_TBX");

    @PersistenceContext
    transient EntityManager Defect.entityManager;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "DEFECT_ID")
    private Long Defect.id;

    @Version
    @Column(name = "version")
    private Integer Defect.version;

    public Long Defect.getId() {
        return this.id;
    }

    public void Defect.setId(Long id) {
        this.id = id;
    }

    public Integer Defect.getVersion() {
        return this.version;
    }

    public void Defect.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void Defect.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void Defect.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Defect attached = Defect.findDefect(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void Defect.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void Defect.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public Defect Defect.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Defect merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager Defect.entityManager() {
        EntityManager em = new Defect().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long Defect.countDefects() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Defect o", Long.class).getSingleResult();
    }

    public static List<Defect> Defect.findAllDefects() {
        return entityManager().createQuery("SELECT o FROM Defect o", Defect.class).getResultList();
    }

    public static Defect Defect.findDefect(Long id) {
        if (id == null) return null;
        return entityManager().find(Defect.class, id);
    }

    public static List<Defect> Defect.findDefectEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Defect o", Defect.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }


    public static List<Defect> Defect.findDefectsByCarrierNumberAndProductionRunNo(Integer carrierNumber, Integer productionRunNo) {
        if (carrierNumber == null) return null;
        Query q = null;
        q = entityManager().createQuery("SELECT o FROM Defect o where o.carrierNumber=:carrierNumber and o.productionRunNo=:productionRunNo Order By o.defectTimestamp", Defect.class);
        q.setParameter("carrierNumber", carrierNumber);
        q.setParameter("productionRunNo", productionRunNo);

        List<Defect> defects = q.getResultList();
        return defects;
    }

    public static void Defect.removeDefectsByCarrierNumberAndProductionRunNo(Integer carrierNumber, Integer productionRunNo) {
        List<Defect> defects = findDefectsByCarrierNumberAndProductionRunNo(carrierNumber, productionRunNo);
        for (Defect defect : defects) {
            defect.remove();
        }
    }

}
