// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import com.honda.mfg.stamp.conveyor.domain.enums.StorageArea;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect StorageRow_Roo_Entity {

    declare @type: StorageRow:@Entity;

    declare @type: StorageRow:@Table(name = "Row_TBX");

    @PersistenceContext
    transient EntityManager StorageRow.entityManager;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "Row_ID")
    private Long StorageRow.id;

    @Version
    @Column(name = "version")
    private Integer StorageRow.version;

    public Long StorageRow.getId() {
        return this.id;
    }

    public void StorageRow.setId(Long id) {
        this.id = id;
    }

    public Integer StorageRow.getVersion() {
        return this.version;
    }

    public void StorageRow.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void StorageRow.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void StorageRow.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            StorageRow attached = StorageRow.findStorageRow(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void StorageRow.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void StorageRow.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public StorageRow StorageRow.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        StorageRow merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager StorageRow.entityManager() {
        EntityManager em = new StorageRow().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long StorageRow.countStorageRows() {
        return entityManager().createQuery("SELECT COUNT(o) FROM StorageRow o", Long.class).getSingleResult();
    }

    public static List<StorageRow> StorageRow.findAllStorageRows() {
        return entityManager().createQuery("SELECT o FROM StorageRow o", StorageRow.class).getResultList();
    }

    public static StorageRow StorageRow.findStorageRow(Long id) {
        if (id == null) return null;
        return entityManager().find(StorageRow.class, id);
    }

    public static List<StorageRow> StorageRow.findStorageRowEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM StorageRow o", StorageRow.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static List<StorageRow> StorageRow.findStorageRowsByArea(StorageArea area) {
        Query q = entityManager().createQuery("SELECT o FROM StorageRow o where o.storageArea=:area", StorageRow.class);
        q.setParameter("area", area);

        return q.getResultList();
    }

    public static StorageRow StorageRow.findStorageRowsByStop(Stop currentLocation) {
        Query q = entityManager().createQuery("SELECT o FROM StorageRow o where o.stop=:stop", StorageRow.class);
        q.setParameter("stop", currentLocation);

        List<StorageRow> rows = q.getResultList();
        if(!rows.isEmpty()){
            return rows.get(0);
        }else{
            return null;
        }
    }
}
