// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import com.honda.mfg.stamp.conveyor.domain.enums.CarrierStatus;
import com.honda.mfg.stamp.conveyor.domain.enums.StopArea;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.*;

privileged aspect CarrierMes_Roo_Entity {

    declare @type: CarrierMes:@Entity;

    declare @type: CarrierMes:@Table(name = "CARRIER_MES_TBX");

    @PersistenceContext
    transient EntityManager CarrierMes.entityManager;

    private static Boolean CarrierMes.staleData;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "CARRIER_ID")
    private Long CarrierMes.id;

    @Version
    @Column(name = "version")
    private Integer CarrierMes.version;

    public Long CarrierMes.getId() {
        return this.id;
    }

    public void CarrierMes.setId(Long id) {
        this.id = id;
    }

    public Integer CarrierMes.getVersion() {
        return this.version;
    }

    public void CarrierMes.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void CarrierMes.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void CarrierMes.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CarrierMes attached = CarrierMes.findCarrier(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void CarrierMes.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void CarrierMes.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public CarrierMes CarrierMes.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CarrierMes merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager CarrierMes.entityManager() {
        EntityManager em = new Carrier().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long CarrierMes.countCarriers() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CarrierMes o", Long.class).getSingleResult();
    }

    public static List<CarrierMes> CarrierMes.findAllCarriers() {
        List<CarrierMes> carriers = entityManager().createQuery("SELECT o FROM CarrierMes o", CarrierMes.class).setMaxResults(1000).getResultList();
        return carriers;
    }

    public static List<CarrierMes> CarrierMes.findAllMovingCarriers() {
        List<CarrierMes> carriers = entityManager().createQuery("SELECT o FROM CarrierMes o where o.currentLocation != o.destination order by o.destination", CarrierMes.class).getResultList();
        return carriers;
    }

    public static long CarrierMes.countCarriersWithDestinationStop(Stop stop) {
        Query q = entityManager().createQuery("SELECT COUNT(o) FROM CarrierMes o WHERE o.destination = :stopId", Long.class);
        q.setParameter("stopId", stop.getId());
        return (Long) q.getSingleResult();
    }

    public static long CarrierMes.countCarriersWithCurrentLocationStop(Stop stop) {
        Query q = entityManager().createQuery("SELECT COUNT(o) FROM CarrierMes o WHERE o.currentLocation = :stopId", Long.class);
        q.setParameter("stopId", stop.getId());
        return (Long) q.getSingleResult();
    }

     public static long CarrierMes.countCarriersWithCurrentLocationStopAndDie(Stop stop, Die die) {
        Query q = entityManager().createQuery("SELECT COUNT(o) FROM CarrierMes o WHERE o.dieNumber= :die and o.currentLocation = :stopId", Long.class);
        q.setParameter("stopId", stop.getId());
        q.setParameter("die", new Integer(die.getId().intValue()));
        return (Long) q.getSingleResult();
    }

     public static long CarrierMes.countCarriersWithDestinationStopAndDie(Stop stop, Die die) {
        Query q = entityManager().createQuery("SELECT COUNT(o) FROM CarrierMes o WHERE o.dieNumber= :die and o.destination = :stopId", Long.class);
        q.setParameter("stopId", stop.getId());
        q.setParameter("die", new Integer(die.getId().intValue()));
        return (Long) q.getSingleResult();
    }

     public static List<CarrierMes> CarrierMes.findAllCarriersWithDestinationIn(List<Long> stopNumbers) {
        Query q = entityManager().createQuery("SELECT o FROM CarrierMes o WHERE o.destination IN (:stopNumbers) and o.destination > 0 order by o.destination", CarrierMes.class);
        q.setParameter("stopNumbers", stopNumbers);

        List<CarrierMes> carriers = q.getResultList();

        return carriers;
    }

    public static List<CarrierMes> CarrierMes.findAllCarriersWithCurrentLocationAndDestinationLocationAndDie(Long stopNumber, Integer die) {
        Query q = entityManager().createQuery("SELECT o FROM CarrierMes o WHERE o.dieNumber= :die and (o.currentLocation = :stopNumber or o.destination = :stopNumber) order by buffer desc, o.updateDate asc",
                CarrierMes.class);
        q.setParameter("stopNumber", stopNumber);
        q.setParameter("die",die);
        List<CarrierMes> carriers = q.getResultList();

        return carriers;
    }
    public static List<CarrierMes> CarrierMes.findAllCarriersWithCurrentLocation(Long stopNumber) {
        Query q = entityManager().createQuery("SELECT o FROM CarrierMes o WHERE o.currentLocation = :stopNumber order by buffer desc, o.updateDate asc", CarrierMes.class);
        q.setParameter("stopNumber", stopNumber);
        List<CarrierMes> carriers = q.getResultList();

        return carriers;
    }

    public static List<CarrierMes> CarrierMes.findAllCarriersWithProductionRunNumber(Integer productionRunNumber, Integer page, Integer sizeNo) {
        Query q = entityManager().createQuery("SELECT o FROM CarrierMes o WHERE o.productionRunNumber =:productionRunNumber order by o.productionRunDate desc", CarrierMes.class);
        q.setParameter("productionRunNumber", productionRunNumber);
        List<CarrierMes> carriers = q.setFirstResult(page == null ? 0 : (page.intValue() - 1) * sizeNo).setMaxResults(sizeNo).getResultList();

        return carriers;
    }

     public static Long CarrierMes.findCountOfCarriersWithProductionRunNumber(Integer productionRunNumber) {
        Query q = entityManager().createQuery("SELECT COUNT(o) FROM CarrierMes o WHERE o.productionRunNumber =:productionRunNumber", Long.class);
        q.setParameter("productionRunNumber", productionRunNumber);

        return (Long) q.getSingleResult();
    }


    public static CarrierMes CarrierMes.findCarrier(Long id) {
        if (id == null) return null;
        return entityManager().find(CarrierMes.class, id);
    }

    public static List<CarrierMes> CarrierMes.findCarrierEntries(int firstResult, int maxResults) {
        List<CarrierMes> carriers = entityManager().createQuery("SELECT o FROM CarrierMes o", CarrierMes.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();

        return carriers;
    }

    public static CarrierMes CarrierMes.findCarrierByCarrierNumber(Integer carrierNumber) {
        Query q = null;
        if (carrierNumber != null) {
            q = entityManager().createQuery("SELECT o FROM CarrierMes o where o.carrierNumber=:carrierNumber", CarrierMes.class);
            q.setParameter("carrierNumber", carrierNumber);

            List<CarrierMes> carriers = q.getResultList();
            if (carriers != null && carriers.size() > 0) {
                return carriers.get(0);
            }
        }
        return null;
    }

    public static List<DieInventory> CarrierMes.findPartCountsByDiesByStopArea(StopArea area) {
        List<DieInventory> dieQuantity = new ArrayList<DieInventory>();
        int emptyDieNumber = 999;
        long i = 0;
        String stops = "";

        List<Stop> stopsByArea = Stop.findAllStopsByArea(area);
        if (stopsByArea != null && stopsByArea.size() > 0) {
            for (Stop stop : stopsByArea) {
                if (stops.length() > 0) {
                    stops = stops + ",";
                }
                stops = stops + stop.getId().toString();
            }

            Query q1 = entityManager().createQuery("SELECT distinct o.dieNumber FROM CarrierMes o where o.dieNumber !=:emptyDieNumber");
            q1.setParameter("emptyDieNumber", emptyDieNumber);
            List<Integer> dieNumbers = q1.getResultList();
            for (int dieId : dieNumbers) {
                if (dieId != emptyDieNumber) {
                    Long qty = 0l;
                    Long holdqty = 0l;
                    Long inspectionqty = 0l;

                    String sql = "SELECT sum(o.quantity) FROM CarrierMes o where o.dieNumber=:dienumber and destination IN (" + stops + ")";
                    Query q = entityManager().createQuery(sql);
                    q.setParameter("dienumber", dieId);

                    String holdsql = "SELECT sum(o.quantity) FROM CarrierMes o where o.dieNumber=:dienumber and o.status=:carrierstatus and destination IN (" + stops + ")";
                    Query holdq = entityManager().createQuery(holdsql);
                    holdq.setParameter("dienumber", dieId);
                    holdq.setParameter("carrierstatus", CarrierStatus.ON_HOLD.type());

                    String inspectionsql = "SELECT sum(o.quantity) FROM CarrierMes o where o.dieNumber=:dienumber and o.status=:carrierstatus and destination IN (" + stops + ")";
                    Query inspectionq = entityManager().createQuery(inspectionsql);
                    inspectionq.setParameter("dienumber", dieId);
                    inspectionq.setParameter("carrierstatus", CarrierStatus.INSPECTION_REQUIRED.type());

                    if (q.getResultList() != null && q.getResultList().size() > 0) {
                        qty = ((Long) q.getSingleResult());
                    }

                    if (holdq.getResultList() != null && holdq.getResultList().size() > 0) {
                        holdqty = ((Long) holdq.getSingleResult());
                    }

                    if (inspectionq.getResultList() != null && inspectionq.getResultList().size() > 0) {
                        inspectionqty = ((Long) inspectionq.getSingleResult());
                    }
                    if (qty != null) {
                        DieInventory die_inventory = new DieInventory(i++);
                        Die die = Die.findDie(new Long(dieId));
                        String description = die == null ? dieId + "" : die.getDescription();
                        die_inventory.setDieName(description);
                        die_inventory.setQuantity(qty);
                        die_inventory.setHoldQuantity(holdqty);
                        die_inventory.setInspectionRequiredQuantity(inspectionqty);
                        dieQuantity.add(die_inventory);
                    }
                }
            }
            Long qty = CarrierMes.getEmptyCarrierCountByStops(stops);
            if (qty > 0L) {
                DieInventory die_inventory = new DieInventory(i++);
                die_inventory.setDieName("Empty Carrier Count");
                die_inventory.setQuantity(qty);
                die_inventory.setHoldQuantity(0l);
                die_inventory.setInspectionRequiredQuantity(0l);
                dieQuantity.add(die_inventory);
            }
        }

        return dieQuantity;
    }


    private static Long CarrierMes.getEmptyCarrierCountByStops(String stops) {
        int emptyDieNumber = 999;
        Long qty = 0L;
        Query q = entityManager().createQuery("SELECT COUNT(o) FROM CarrierMes o where o.dieNumber=:dienumber and destination IN (" + stops + ")");
        q.setParameter("dienumber", emptyDieNumber);
        if (q.getResultList() != null && q.getResultList().size() > 0) {
            qty = (Long) q.getSingleResult();
        }
        return qty;
    }

    public static List<DieInventory> CarrierMes.findPartCountsByDies() {
        List<DieInventory> dieQuantity = new ArrayList<DieInventory>();
        int emptyDieNumber = 999;
        long i = 0;

        Query q1 = entityManager().createQuery("SELECT distinct o.dieNumber FROM CarrierMes o where o.dieNumber !=:emptyDieNumber");
        q1.setParameter("emptyDieNumber", emptyDieNumber);
        List<Integer> dieNumbers = q1.getResultList();
        for (int dieId : dieNumbers) {
            if (dieId != emptyDieNumber) {
                Long qty = 0l;
                Long holdqty = 0l;
                Long inspectionqty = 0l;


                String sql = "SELECT sum(o.quantity) FROM CarrierMes o where o.dieNumber=:dienumber ";

                Query q = entityManager().createQuery(sql);
                q.setParameter("dienumber", dieId);


                String holdsql = "SELECT sum(o.quantity) FROM CarrierMes o where o.dieNumber=:dienumber and o.status=:carrierstatus";
                Query holdq = entityManager().createQuery(holdsql);
                holdq.setParameter("dienumber", dieId);
                holdq.setParameter("carrierstatus", CarrierStatus.ON_HOLD.type());

                String inspectionsql = "SELECT sum(o.quantity) FROM CarrierMes o where o.dieNumber=:dienumber and o.status=:carrierstatus";
                Query inspectionq = entityManager().createQuery(inspectionsql);
                inspectionq.setParameter("dienumber", dieId);
                inspectionq.setParameter("carrierstatus", CarrierStatus.INSPECTION_REQUIRED.type());

                if (q.getResultList() != null && q.getResultList().size() > 0) {
                    qty = ((Long) q.getSingleResult());
                }

                if (holdq.getResultList() != null && holdq.getResultList().size() > 0) {
                    holdqty = ((Long) holdq.getSingleResult());
                }

                if (inspectionq.getResultList() != null && inspectionq.getResultList().size() > 0) {
                    inspectionqty = ((Long) inspectionq.getSingleResult());
                }
                if (qty != null) {
                    DieInventory die_inventory = new DieInventory(i++);
                    Die die = Die.findDie(new Long(dieId));
                    String description = die == null ? dieId + "" : die.getDescription();
                    die_inventory.setDieName(description);
                    die_inventory.setQuantity(qty);
                    die_inventory.setHoldQuantity(holdqty);
                    die_inventory.setInspectionRequiredQuantity(inspectionqty);
                    dieQuantity.add(die_inventory);
                }
            }
        }
        Long qty = CarrierMes.getEmptyCarrierCount();
        if (qty > 0L) {
            DieInventory die_inventory = new DieInventory(i++);
            die_inventory.setDieName("Empty Carriers");
            die_inventory.setQuantity(qty);
            die_inventory.setHoldQuantity(0l);
            die_inventory.setInspectionRequiredQuantity(0l);
            dieQuantity.add(die_inventory);
        }

        return dieQuantity;
    }

    private static Long CarrierMes.getEmptyCarrierCount() {
        int emptyDieNumber = 999;
        Long qty = 0L;
        Query q = entityManager().createQuery("SELECT COUNT(o) FROM CarrierMes o where o.dieNumber=:dienumber ");
        q.setParameter("dienumber", emptyDieNumber);
        if (q.getResultList() != null && q.getResultList().size() > 0) {
            qty = (Long) q.getSingleResult();
        }
        return qty;
    }

    public static List<Integer> CarrierMes.getProductionRunNumbers() {
        List<Integer> productionRunNumbers = new ArrayList<Integer>();
        Query q = entityManager().createQuery("SELECT distinct o.productionRunNumber FROM CarrierMes o");

        if (q.getResultList() != null && q.getResultList().size() > 0) {
            return (List<Integer>) q.getResultList();
        }
        productionRunNumbers.add(0);
        return productionRunNumbers;
    }

    public static List<CarrierMes> CarrierMes.getAllCarriersInLane(Long stopNumber) {
        Query q = entityManager().createQuery("SELECT o FROM CarrierMes o WHERE o.currentLocation = :stopNumber OR destination = :stopNumber order by buffer desc, o.updateDate asc", CarrierMes.class);
        q.setParameter("stopNumber", stopNumber);
        List<CarrierMes> carriers = q.getResultList();

        return carriers;
    }



    public static List<CarrierMes> CarrierMes.getReleasingCarriersInArea(List<Long> stopNumbers) {
        Query q = entityManager().createQuery("SELECT o FROM CarrierMes o WHERE o.currentLocation IN (:locations) AND o.currentLocation <> o.destination AND buffer = 1 order by o.currentLocation", CarrierMes.class);
        q.setParameter("locations", stopNumbers);

        List<CarrierMes> carriers = q.getResultList();

        return carriers;
    }

    public static Die CarrierMes.getDieByProductionRunNumber(Integer prodRunNo) {
        Query q = entityManager().createQuery("SELECT distinct o.dieNumber FROM CarrierMes o where o.productionRunNumber=:prodRunNo", Integer.class);
        q.setParameter("prodRunNo", prodRunNo);
        List<Integer> dies = q.getResultList();

        if (dies != null && dies.size() > 0) {
            return Die.findDie(Long.parseLong(dies.get(0).toString()));
        }

        return null;
    }
}
