// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

privileged aspect AuditErrorLog_Roo_Finder {

    private static final Logger LOG = LoggerFactory.getLogger(AuditErrorLog_Roo_Finder.class);

    public static List<AuditErrorLog> AuditErrorLog.findAuditErrorLogByCriteria(AuditErrorLogFinderCriteria finderCriteria, Integer page, Integer sizeNo) {
        EntityManager em = Carrier.entityManager();
        TypedQuery<AuditErrorLog> q;
        String sql = "SELECT o FROM AuditErrorLog AS o ";
        List<String> criteriaList = new ArrayList<String>();
        q = em.createQuery(sql, AuditErrorLog.class);

        LOG.debug("Finder: nodeId: " + finderCriteria.getNodeId());
        if (finderCriteria.getNodeId() != null) {
            criteriaList.add("o.nodeId like :nodeId");
        }
        if (finderCriteria.getSource() != null) {
            criteriaList.add("o.source like :source");
        }
        if (finderCriteria.getSeverity() != null) {
            criteriaList.add("o.severity = :severity");
        }
        if (finderCriteria.getMessageText() != null) {
            LOG.debug("messageText: " + finderCriteria.getMessageText());
            criteriaList.add("o.messageText like :messageText");
        }
        if ((finderCriteria.getBeginTimestamp() != null) || (finderCriteria.getEndTimestamp() != null)) {
            criteriaList.add("o.logTimestamp between :beginTimestamp and :endTimestamp");
        }

        if (criteriaList.size() > 0) {
            sql = sql + " where ";

            String tempsql = "";
            tempsql = criteriaList.get(0);
            for (int i = 1; i < criteriaList.size(); i++) {
                tempsql = tempsql + " AND " + criteriaList.get(i);
            }
            String orderBySql = " order by o.id desc";
            q = em.createQuery(sql + tempsql + orderBySql, AuditErrorLog.class);

            if (finderCriteria.getNodeId() != null) {
                q.setParameter("nodeId", "%" + finderCriteria.getNodeId() + "%");
            }
            if (finderCriteria.getSource() != null) {
                q.setParameter("source", "%" + finderCriteria.getSource() + "%");
            }
            if (finderCriteria.getSeverity() != null) {
                q.setParameter("severity", finderCriteria.getSeverity());
            }
            if (finderCriteria.getMessageText() != null) {
                q.setParameter("messageText", "%" + finderCriteria.getMessageText() + "%");
            }
            if ((finderCriteria.getBeginTimestamp() != null) && (finderCriteria.getEndTimestamp() != null)) {
                q.setParameter("beginTimestamp", finderCriteria.getBeginTimestamp());
                q.setParameter("endTimestamp", finderCriteria.getEndTimestamp());
            }
        }
        if (page == null || sizeNo == null) {
            return q.getResultList();
        } else {
            return q.setFirstResult(page == null ? 0 : (page.intValue() - 1) * sizeNo).setMaxResults(sizeNo).getResultList();
        }
    }

    public static Long AuditErrorLog.findAuditErrorLogCount(AuditErrorLogFinderCriteria finderCriteria) {

        EntityManager em = Carrier.entityManager();
        TypedQuery<Long> q = null;
        String sql = "SELECT count(o) FROM AuditErrorLog AS o ";
        List<String> criteriaList = new ArrayList<String>();

        if (finderCriteria.getNodeId() != null) {
            criteriaList.add("o.nodeId like :nodeId");
        }
        if (finderCriteria.getSource() != null) {
            criteriaList.add("o.source like :source");
        }
        if (finderCriteria.getSeverity() != null) {
            criteriaList.add("o.severity = :severity");
        }
        if (finderCriteria.getMessageText() != null) {
            criteriaList.add("o.messageText like :messageText");
        }
        if ((finderCriteria.getBeginTimestamp() != null) && (finderCriteria.getEndTimestamp() != null)) {
            criteriaList.add("o.logTimestamp between :beginTimestamp and :endTimestamp");
        }

        if (criteriaList.size() > 0) {
            sql = sql + " where ";

            String tempsql = "";
            tempsql = criteriaList.get(0);
            for (int i = 1; i < criteriaList.size(); i++) {
                tempsql = tempsql + " AND " + criteriaList.get(i);
            }
            q = em.createQuery(sql + tempsql, Long.class);

            if (finderCriteria.getNodeId() != null) {
                q.setParameter("nodeId", "%" + finderCriteria.getNodeId() + "%");
            }
            if (finderCriteria.getSource() != null) {
                q.setParameter("source", "%" + finderCriteria.getSource() + "%");
            }
            if (finderCriteria.getSeverity() != null) {
                q.setParameter("severity", finderCriteria.getSeverity());
            }
            if (finderCriteria.getMessageText() != null) {
                q.setParameter("messageText", "%" + finderCriteria.getMessageText() + "%");
            }
            if ((finderCriteria.getBeginTimestamp() != null) || (finderCriteria.getEndTimestamp() != null)) {
                q.setParameter("beginTimestamp", finderCriteria.getBeginTimestamp());
                q.setParameter("endTimestamp", finderCriteria.getEndTimestamp());
            }
        }
        if (q == null) {
            q = em.createQuery(sql, Long.class);
        }
        Long count = q.getSingleResult();
        return count != null ? count : 0;
    }

}
