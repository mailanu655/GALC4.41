// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect ParmSetting_Roo_Entity {
    
    declare @type: ParmSetting: @Entity;
    
    declare @type: ParmSetting: @Table(name = "PARM_SETTING_TBX");
    
    @PersistenceContext
    transient EntityManager ParmSetting.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID")
    private Long ParmSetting.id;
    
    @Version
    @Column(name = "version")
    private Integer ParmSetting.version;
    
    public Long ParmSetting.getId() {
        return this.id;
    }
    
    public void ParmSetting.setId(Long id) {
        this.id = id;
    }
    
    public Integer ParmSetting.getVersion() {
        return this.version;
    }
    
    public void ParmSetting.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void ParmSetting.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void ParmSetting.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ParmSetting attached = ParmSetting.findParmSetting(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void ParmSetting.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void ParmSetting.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public ParmSetting ParmSetting.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        ParmSetting merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager ParmSetting.entityManager() {
        EntityManager em = new ParmSetting().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long ParmSetting.countParmSettings() {
        return entityManager().createQuery("SELECT COUNT(o) FROM ParmSetting o", Long.class).getSingleResult();
    }
    
    public static List<ParmSetting> ParmSetting.findAllParmSettings() {
        return entityManager().createQuery("SELECT o FROM ParmSetting o", ParmSetting.class).getResultList();
    }
    
    public static ParmSetting ParmSetting.findParmSetting(Long id) {
        if (id == null) return null;
        return entityManager().find(ParmSetting.class, id);
    }
    
    public static List<ParmSetting> ParmSetting.findParmSettingEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM ParmSetting o", ParmSetting.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static ParmSetting ParmSetting.findParmSettingsByFieldName(String fieldName) {
        Query q = entityManager().createQuery("SELECT o FROM ParmSetting o WHERE o.fieldname =:name", ParmSetting.class);
        q.setParameter("name", fieldName);
        return (ParmSetting)q.getSingleResult();
    }
}
