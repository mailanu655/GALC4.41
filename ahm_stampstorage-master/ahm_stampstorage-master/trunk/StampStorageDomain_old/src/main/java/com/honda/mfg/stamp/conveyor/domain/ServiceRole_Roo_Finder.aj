// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import com.honda.mfg.stamp.conveyor.domain.ServiceRole;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ServiceRole_Roo_Finder {
    
    public static TypedQuery<ServiceRole> ServiceRole.findServiceRolesByCurrentActiveNot(Boolean currentActive) {
        if (currentActive == null) throw new IllegalArgumentException("The currentActive argument is required");
        EntityManager em = ServiceRole.entityManager();
        TypedQuery<ServiceRole> q = em.createQuery("SELECT o FROM ServiceRole AS o WHERE o.currentActive IS NOT :currentActive", ServiceRole.class);
        q.setParameter("currentActive", currentActive);
        return q;
    }
    
    public static TypedQuery<ServiceRole> ServiceRole.findServiceRolesByHostNameEquals(String hostName) {
        if (hostName == null || hostName.length() == 0) throw new IllegalArgumentException("The hostName argument is required");
        EntityManager em = ServiceRole.entityManager();
        TypedQuery<ServiceRole> q = em.createQuery("SELECT o FROM ServiceRole AS o WHERE o.hostName = :hostName", ServiceRole.class);
        q.setParameter("hostName", hostName);
        return q;
    }
    
    public static TypedQuery<ServiceRole> ServiceRole.findServiceRolesByIpEqualsAndPort(String ip, int port) {
        if (ip == null || ip.length() == 0) throw new IllegalArgumentException("The ip argument is required");
        EntityManager em = ServiceRole.entityManager();
        TypedQuery<ServiceRole> q = em.createQuery("SELECT o FROM ServiceRole AS o WHERE o.ip = :ip  AND o.port = :port", ServiceRole.class);
        q.setParameter("ip", ip);
        q.setParameter("port", port);
        return q;
    }
    
    public static TypedQuery<ServiceRole> ServiceRole.findServiceRolesByIpEqualsAndPortAndCurrentActiveNot(String ip, int port, Boolean currentActive) {
        if (ip == null || ip.length() == 0) throw new IllegalArgumentException("The ip argument is required");
        if (currentActive == null) throw new IllegalArgumentException("The currentActive argument is required");
        EntityManager em = ServiceRole.entityManager();
        TypedQuery<ServiceRole> q = em.createQuery("SELECT o FROM ServiceRole AS o WHERE o.ip = :ip  AND o.port = :port AND o.currentActive IS NOT :currentActive", ServiceRole.class);
        q.setParameter("ip", ip);
        q.setParameter("port", port);
        q.setParameter("currentActive", currentActive);
        return q;
    }
    
    public static TypedQuery<ServiceRole> ServiceRole.findServiceRolesByIpEqualsAndPortAndDesignatedPrimaryNot(String ip, int port, Boolean designatedPrimary) {
        if (ip == null || ip.length() == 0) throw new IllegalArgumentException("The ip argument is required");
        if (designatedPrimary == null) throw new IllegalArgumentException("The designatedPrimary argument is required");
        EntityManager em = ServiceRole.entityManager();
        TypedQuery<ServiceRole> q = em.createQuery("SELECT o FROM ServiceRole AS o WHERE o.ip = :ip  AND o.port = :port AND o.designatedPrimary IS NOT :designatedPrimary", ServiceRole.class);
        q.setParameter("ip", ip);
        q.setParameter("port", port);
        q.setParameter("designatedPrimary", designatedPrimary);
        return q;
    }
    
    public static TypedQuery<ServiceRole> ServiceRole.findServiceRolesByServiceNameEquals(String serviceName) {
        if (serviceName == null || serviceName.length() == 0) throw new IllegalArgumentException("The serviceName argument is required");
        EntityManager em = ServiceRole.entityManager();
        TypedQuery<ServiceRole> q = em.createQuery("SELECT o FROM ServiceRole AS o WHERE o.serviceName = :serviceName", ServiceRole.class);
        q.setParameter("serviceName", serviceName);
        return q;
    }
    
    public static TypedQuery<ServiceRole> ServiceRole.findServiceRolesByServiceNameEqualsAndCurrentActiveNot(String serviceName, Boolean currentActive) {
        if (serviceName == null || serviceName.length() == 0) throw new IllegalArgumentException("The serviceName argument is required");
        if (currentActive == null) throw new IllegalArgumentException("The currentActive argument is required");
        EntityManager em = ServiceRole.entityManager();
        TypedQuery<ServiceRole> q = em.createQuery("SELECT o FROM ServiceRole AS o WHERE o.serviceName = :serviceName  AND o.currentActive IS NOT :currentActive", ServiceRole.class);
        q.setParameter("serviceName", serviceName);
        q.setParameter("currentActive", currentActive);
        return q;
    }
    
    public static TypedQuery<ServiceRole> ServiceRole.findServiceRolesByServiceNameEqualsAndDesignatedPrimaryNot(String serviceName, Boolean designatedPrimary) {
        if (serviceName == null || serviceName.length() == 0) throw new IllegalArgumentException("The serviceName argument is required");
        if (designatedPrimary == null) throw new IllegalArgumentException("The designatedPrimary argument is required");
        EntityManager em = ServiceRole.entityManager();
        TypedQuery<ServiceRole> q = em.createQuery("SELECT o FROM ServiceRole AS o WHERE o.serviceName = :serviceName  AND o.designatedPrimary IS NOT :designatedPrimary", ServiceRole.class);
        q.setParameter("serviceName", serviceName);
        q.setParameter("designatedPrimary", designatedPrimary);
        return q;
    }
    
    public static TypedQuery<ServiceRole> ServiceRole.findServiceRolesByServiceNameEqualsAndIpEqualsAndPort(String serviceName, String ip, int port) {
        if (serviceName == null || serviceName.length() == 0) throw new IllegalArgumentException("The serviceName argument is required");
        if (ip == null || ip.length() == 0) throw new IllegalArgumentException("The ip argument is required");
        EntityManager em = ServiceRole.entityManager();
        TypedQuery<ServiceRole> q = em.createQuery("SELECT o FROM ServiceRole AS o WHERE o.serviceName = :serviceName  AND o.ip = :ip  AND o.port = :port", ServiceRole.class);
        q.setParameter("serviceName", serviceName);
        q.setParameter("ip", ip);
        q.setParameter("port", port);
        return q;
    }

    public static List<ServiceRole> ServiceRole.findAllServiceRolesOrderByFailoverOrder() {
        return entityManager().createQuery("SELECT o FROM ServiceRole o where failover_order > 0 order by failover_order", ServiceRole.class).getResultList();
    }
    
}
