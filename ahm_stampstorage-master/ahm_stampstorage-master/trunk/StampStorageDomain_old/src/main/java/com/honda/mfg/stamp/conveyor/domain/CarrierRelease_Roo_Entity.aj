// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.sql.Timestamp;
import java.util.List;

privileged aspect CarrierRelease_Roo_Entity {

    declare @type: CarrierRelease:@Entity;

    declare @type: CarrierRelease:@Table(name = "CARRIER_RELEASE_TBX");

    @PersistenceContext
    transient EntityManager CarrierRelease.entityManager;

    @Id
    //@GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "CARRIER_NUMBER")
    private Long CarrierRelease.id;

    @Version
    @Column(name = "version")
    private Integer CarrierRelease.version;

    public Long CarrierRelease.getId() {
        return this.id;
    }

    public void CarrierRelease.setId(Long id) {
        this.id = id;
    }

    public Integer CarrierRelease.getVersion() {
        return this.version;
    }

    public void CarrierRelease.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void CarrierRelease.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void CarrierRelease.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CarrierRelease attached = CarrierRelease.findCarrierRelease(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void CarrierRelease.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void CarrierRelease.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public CarrierRelease CarrierRelease.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CarrierRelease merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager CarrierRelease.entityManager() {
        EntityManager em = new CarrierRelease().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long CarrierRelease.countCarrierReleases() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CarrierRelease o", Long.class).getSingleResult();
    }

    public static List<CarrierRelease> CarrierRelease.findAllCarrierReleases() {
        return entityManager().createQuery("SELECT o FROM CarrierRelease o", CarrierRelease.class).getResultList();
    }

    public static CarrierRelease CarrierRelease.findCarrierRelease(Long id) {
        if (id == null) return null;
        return entityManager().find(CarrierRelease.class, id);
    }

    public static List<CarrierRelease> CarrierRelease.findCarrierReleaseEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CarrierRelease o", CarrierRelease.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    @Transactional
    public static void CarrierRelease.saveCarrierRelease(Long carrierNumber, Stop currentLocation, Stop destination, String source) {
        CarrierRelease carrierRelease = CarrierRelease.findCarrierRelease(carrierNumber);
        if (carrierRelease == null) {
            carrierRelease = new CarrierRelease();
            carrierRelease.setId(carrierNumber);
            carrierRelease.setCurrentLocation(currentLocation);
            carrierRelease.setDestination(destination);
            carrierRelease.setSource(source);
            carrierRelease.setRequestTimestamp(new Timestamp(System.currentTimeMillis()));
            carrierRelease.persist();
        } else {
            carrierRelease.setCurrentLocation(currentLocation);
            carrierRelease.setDestination(destination);
            carrierRelease.setSource(source);
            carrierRelease.setRequestTimestamp(new Timestamp(System.currentTimeMillis()));
            carrierRelease.merge();
        }
    }

    public static List<CarrierRelease> CarrierRelease.findCarrierReleaseEntriesAtStop(Long stopNumber) {
        Query q = entityManager().createQuery("SELECT o FROM CarrierRelease o WHERE o.id IN (SELECT x.carrierNumber FROM CarrierMes x WHERE x.currentLocation = :stopNumber)", CarrierRelease.class);
        q.setParameter("stopNumber", stopNumber);
        return q.getResultList();
    }

    public static List<CarrierRelease> CarrierRelease.findCarrierReleaseEntriesInStorageArea(List<Long> stopNumbers) {
        Query q = entityManager().createQuery("SELECT o FROM CarrierRelease o WHERE o.id IN (SELECT x.carrierNumber FROM CarrierMes x WHERE x.currentLocation IN (:stopNumbers) AND buffer = 1) order by o.requestTimestamp asc", CarrierRelease.class);
        q.setParameter("stopNumbers", stopNumbers);

        return q.getResultList();
    }

    public static List<CarrierRelease> CarrierRelease.findCarrierReleaseEntriesInStorageAreaThatNeedDestinationUpdated(List<Long> stopNumbers) {
        Query q = entityManager().createQuery("SELECT o FROM CarrierRelease o WHERE o.id IN (SELECT x.carrierNumber FROM CarrierMes x WHERE x.currentLocation IN (:stopNumbers) AND buffer = 1 and  x.currentLocation = x.destination) order by o.requestTimestamp asc", CarrierRelease.class);
        q.setParameter("stopNumbers", stopNumbers);

        return q.getResultList();
    }
}
