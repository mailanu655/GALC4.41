// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.honda.mfg.stamp.conveyor.domain;

import com.honda.mfg.stamp.conveyor.domain.enums.StopType;
import com.honda.mfg.stamp.conveyor.domain.enums.StopArea;
import com.honda.mfg.stamp.conveyor.domain.enums.StopAvailability;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

privileged aspect Stop_Roo_Entity {

    declare @type: Stop:@Entity;

    declare @type: Stop:@Table(name = "STOP_TBX");

    @PersistenceContext
    transient EntityManager Stop.entityManager;

    @Id
    //@GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "STOP_ID")
    private Long Stop.id;

    @Version
    @Column(name = "version")
    private Integer Stop.version;

    public Long Stop.getId() {
        return this.id;
    }

    public void Stop.setId(Long id) {
        this.id = id;
    }

    public Integer Stop.getVersion() {
        return this.version;
    }

    public void Stop.setVersion(Integer version) {
        this.version = version;
    }

    @Transactional
    public void Stop.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }

    @Transactional
    public void Stop.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Stop attached = Stop.findStop(this.id);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void Stop.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }

    @Transactional
    public void Stop.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }

    @Transactional
    public Stop Stop.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Stop merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }

    public static final EntityManager Stop.entityManager() {
        EntityManager em = new Stop().entityManager;
        if (em == null)
            throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }

    public static long Stop.countStops() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Stop o", Long.class).getSingleResult();
    }

    public static List<Stop> Stop.findAllStops() {
        return entityManager().createQuery("SELECT o FROM Stop o order by o.id ", Stop.class).getResultList();
    }

    public static Stop Stop.findStop(Long id) {
        if (id == null) return null;
        return entityManager().find(Stop.class, id);
    }

    public static List<Stop> Stop.findStopEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Stop o order by o.id ", Stop.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }

    public static List<Stop> Stop.findAllStopsByType(StopType stopType) {
        Query q = entityManager().createQuery("SELECT o FROM Stop o where o.stopType=:type order by o.id desc", Stop.class);
        q.setParameter("type", stopType);
        return q.getResultList();
    }

     public static List<Stop> Stop.findAllStopsByArea(StopArea stopArea) {
        Query q = entityManager().createQuery("SELECT o FROM Stop o where o.stopArea=:area", Stop.class);
        q.setParameter("area", stopArea);
        return q.getResultList();
    }

     public static List<Stop> Stop.findAllStopsByTypeAndArea(StopType stopType, StopArea stopArea) {
        Query q = entityManager().createQuery("SELECT o FROM Stop o where o.stopType=:type and o.stopArea=:area order by o.id asc", Stop.class);
        q.setParameter("type", stopType);
        q.setParameter("area", stopArea);
        return q.getResultList();
    }
}
